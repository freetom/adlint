\input texinfo
@setfilename users_guide_en.info
@documentlanguage en
@documentencoding utf-8
@settitle AdLint 3.2.0 User's Guide

@copying
Copyright (C) 2010-2013, OGIS-RI Co.,Ltd.
@end copying

@titlepage
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Overview
@end ifnottex

@unnumberedsec AdLint is

AdLint is an open source and free source code static analyzer.

It can point out insecure or nonportable code fragments, and can measure
various quality metrics of the source code.

For a part of utilization examples, see @ref{Screen Shot, screenshots}.

It (currently) can analyze source code compliant with ANSI C89 / ISO C90 and
partly ISO C99.

AdLint is written in @uref{http://www.ruby-lang.org/, Ruby}. So, it is
available for Windows, Mac OS X, GNU/Linux, FreeBSD and any other platforms
supported by Ruby.

@unnumberedsec License
Copyright (C) 2010-2013, OGIS-RI Co.,Ltd.

AdLint is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AdLint is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with AdLint.  If not, see <@uref{http://www.gnu.org/licenses/}>.

@unnumberedsec Index
@menu
* Installation:Installation.
* Sample session:Sample Session.
* Command specification:Command.
* Input specification:Input.
* Output specification:Output.
* Message list:Messages.
* Metrics list:Metrics.
* Code structure information list:CodeStructures.
* Appendix:Appendix.
* Index:Index.
@end menu


@node Installation
@chapter Installation

@menu
* Operation Requirements:Requirements.
* Hardware environment:Hardware Environment.
* Install on Windows:Install on Windows.
* Install on Unix:Install on Unix.
* Evaluation test and trial use AdLint:Evaluation.
@end menu

@node Requirements
@section Operation requirements

AdLint requires installation of Ruby version 1.9.3-p0 or later.

And it recommended to install @uref{http://www.gnu.org/software/make/make.html, GNU Make} version 3 or later
to enable to auto analyze by using the @file{GNUmakefile} which created by @ref{AdLintize Command, @command{adlintize}} command.


@node Hardware Environment
@section Hardware environment

For the recommended hardware environment, it can't be completely defined because it depends on the size of software.
The following is the test environment of AdLint and the analysis time.


@subsection MS Windows

@itemize
@item Environment
@itemize @minus
@item OS : MS Windows XP (SP3)
@item CPU : Intel Core i5 3.33GHz (660)
@item Memory : 2 GB
@end itemize
@item Tested code : Ruby 1.9.3-p0 (lines of code : 620,000)
@itemize @minus
@item serial analysis : about 7.9 hour
@item run 3 parallel to single module analysis : about 3.7 hour
@end itemize
@end itemize

@subsection  GNU/Linux

@itemize
@item Environment
@itemize @minus
@item OS : Fedora 14
@item CPU : Intel Core i5 3.33GHz (660)
@item Memory : 2 GB
@end itemize
@item Tested code : Ruby 1.9.3-p0 (lines of code : 620,000)
@itemize @minus
@item serial analysis : about 6.5 hour
@item run 2 parallel to single module analysis : about 4.2 hour
@end itemize
@end itemize


@node Install on Windows
@section Installation instructions for MS Windows environment

@anchor{install_rubyinstaller}
@subsection Install Ruby

Get the @uref{http://rubyinstaller.org/, RubyInstaller for Windows} 1.9.3-p0 or later
from the @uref{http://rubyinstaller.org/downloads/, download page}.

Execute RubyInstaller and install ruby with the instructions in the installer.

@anchor{install_devkit}
@subsection Install DEVELOPMENT KIT (DevKit)

Recommend to install DEVELOPMENT KIT (DevKit) including @uref{http://www.gnu.org/software/make/make.html, GNU Make}.

Get the DEVELOPMENT KIT (DevKit) from @uref{http://rubyinstaller.org/downloads/, download page}
distributed in @uref{http://rubyinstaller.org/, RubyInstaller for Windows}

When user execute the @file{DevKit-*.exe} ,DEVELOPMENT KIT will expand to the specified directory.

@subsection Set @code{PATH} environment variable

Append the following path to @code{PATH} environment variable : @file{bin} of Ruby directory where @ref{install_rubyinstaller, Install ruby},
@file{bin} @file{mingw\bin} of DevKit directory where @ref{install_devkit, Install DEVELOPMENT KIT (DevKit)}

@subsection Install AdLint

Start command prompt, and download and install the latest AdLint by the following command.

@verbatim
> gem install adlint
@end verbatim

If you have to use HTTP proxy, set @option{--http-proxy http://user name:password@@proxy host:port number} to
@command{gem} command as follows.

@verbatim
> gem install adlint --http-proxy http://user:passwd@proxy:3128
@end verbatim

@node Install on Unix
@section Installation instructions on Unix environment

Install Ruby interpreter by following @uref{http://www.ruby-lang.org/en/downloads/, Download Ruby}.

And download and install the latest version of AdLint.
@verbatim
% gem install adlint
@end verbatim
or
@verbatim
% sudo gem install adlint
@end verbatim


If you have to use HTTP proxy, set @option{--http-proxy http://user name:password@@proxy host:port number} to
@command{gem} command.

@node Evaluation
@section Evaluation test and trial use AdLint


AdLint provided with small sample C language projects.
Evaluation test can be execute with @code{intro_demo} project by the following procedure.

Copy @code{intro_demo} project to user's workspace.

@verbatim
% cp -r `adlint --prefix`/share/demo/intro_demo .
@end verbatim

Generate the setting file for static analysis by @ref{AdLintize Command, @command{adlintize}} command

@verbatim
% cd intro_demo
% adlintize
@end verbatim

The following files will be generated.

@itemize
@item @file{GNUmakefile} --- Make file for GNU make describing the analysis procedure
@item @file{adlint_traits.yml} --- Traits file for customize AdLint analysis behavior
@item @file{adlint_pinit.h} --- Initial header file of specific project
@item @file{adlint_cinit.h} --- Initial header file of compiler
@item @file{adlint_all.sh} --- Shell script describing the analysis procedure
@item @file{adlint_all.bat} --- Windows batch file describing the analysis procedure
@item @file{adlint_files.txt} --- Analyzed file list for shell script and batch file
@end itemize

If GNU Make version 3 or later installed, it can analyze by the following commands.

@verbatim
% make verbose-all
adlint --verbose -t adlint_traits.yml -o . intro_demo.c
                  intro_demo.c [fin] |============================| 0.401s
                    intro_demo [fin] |============================| 0.029s
  1.125s user, 0.765s system, 00:00:01.89 total
@end verbatim

If GNU Make doesn't installed, use @ref{AdLint Command,@command{adlint}} command directly
as follows.

@verbatim
% adlint -v -t adlint_traits.yml -l adlint_files.txt
                  intro_demo.c [fin] |============================| 0.401s
                    intro_demo [fin] |============================| 0.029s
  1.125s user, 0.765s system, 00:00:01.89 total
@end verbatim

When the analysis process is finished with no errors, the following file will be generated.

@itemize
@item @file{intro_demo.i} --- Source files with pre-processed.
@item @file{intro_demo.c.met.csv} --- Code information of single module analysis and metric information
@item @file{intro_demo.c.msg.csv} --- Warning message list of single module analysis
@item @file{intro_demo.met.csv} --- Metric information of cross module analysis
@item @file{intro_demo.msg.csv} --- Warning message list of cross module analysis
@end itemize

The body of @file{intro_demo.c.msg.csv} ,"doesn't reach the control " "divided by zero ".


@node Sample Session
@chapter Sample session

@menu
* Analyze GNU Screen:Analyzing Screen.
* Distributed parallel analysis with distmake:Dist Analyzing Screen.
@end menu

@node Analyzing Screen
@section Analyze GNU Screen

@subsection Preparation for project
Download @uref{ftp://ftp.gnu.org/gnu/screen/screen-4.0.3.tar.gz}, unpack the appropriate directory.

@verbatim
% wget ftp://ftp.gnu.org/gnu/screen/screen-4.0.3.tar.gz
Length: 840602 (821K) [application/x-tar]
Saving to: `screen-4.0.3.tar.gz'

100%[======================================>] 840,602     --.-K/s   in 0.1s

2011-09-28 11:41:55 (6.18 MB/s) - `screen-4.0.3.tar.gz' saved [840602/840602]

% tar xzf screen-4.0.3.tar.gz
% ls -F
screen-4.0.3/   screen-4.0.3.tar.gz
@end verbatim

@anchor{screen_exam}
@subsection Investigate project

Confirm how to build in analysis runtime environment by building GNU Screen.

@verbatim
% cd screen-4.0.3
% ./configure
this is screen version 4.0.3
checking for prefix by checking for screen... /usr/bin/screen
checking for gcc... gcc
checking for C compiler default output... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
...snip...
configure: creating ./config.status
config.status: creating Makefile
config.status: creating doc/Makefile
config.status: creating config.h
config.status: executing default commands

Now please check the pathnames in the Makefile and in the user
configuration section in config.h.
Then type 'make' to make screen. Good luck.

% make 2>&1 | tee make.log
CPP="gcc -E " srcdir=. sh ./osdef.sh
AWK=gawk CC="gcc -g -O2" srcdir=. sh ./comm.sh
AWK=gawk srcdir=. sh ./term.sh
gcc -c -I. -I.    -g -O2 screen.c
gcc -c -I. -I.    -g -O2 ansi.c
gcc -c -I. -I.    -g -O2 fileio.c
gcc -c -I. -I.    -g -O2 mark.c
gcc -c -I. -I.    -g -O2 misc.c
gcc -c -I. -I.    -g -O2 resize.c
gcc -c -I. -I.    -g -O2 socket.c
gcc -c -I. -I.    -g -O2 search.c
sh ./tty.sh tty.c
gcc -c -I. -I.    -g -O2 tty.c
gcc -c -I. -I.    -g -O2 term.c
gcc -c -I. -I.    -g -O2 window.c
gcc -c -I. -I.    -g -O2 utmp.c
gcc -c -I. -I.    -g -O2 loadav.c
gcc -c -I. -I.    -g -O2 putenv.c
gcc -c -I. -I.    -g -O2 help.c
gcc -c -I. -I.    -g -O2 termcap.c
gcc -c -I. -I.    -g -O2 input.c
gcc -c -I. -I.    -g -O2 attacher.c
gcc -c -I. -I.    -g -O2 pty.c
gcc -c -I. -I.    -g -O2 process.c
gcc -c -I. -I.    -g -O2 display.c
gcc -c -I. -I.    -g -O2 comm.c
gcc -c -I. -I.    -g -O2 kmapdef.c
gcc -c -I. -I.    -g -O2 acls.c
gcc -c -I. -I.    -g -O2 braille.c
gcc -c -I. -I.    -g -O2 braille_tsi.c
gcc -c -I. -I.    -g -O2 logfile.c
gcc -c -I. -I.    -g -O2 layer.c
gcc -c -I. -I.    -g -O2 sched.c
gcc -c -I. -I.    -g -O2 teln.c
gcc -c -I. -I.    -g -O2 nethack.c
gcc -c -I. -I.    -g -O2 encoding.c
gcc  -o screen screen.o ansi.o fileio.o mark.o misc.o resize.o socket.o
search.o tty.o term.o window.o utmp.o loadav.o putenv.o help.o termcap.o
input.o attacher.o pty.o process.o display.o comm.o kmapdef.o acls.o braille.o
braille_tsi.o logfile.o layer.o sched.o teln.o nethack.o encoding.o -lcurses
-lcrypt
@end verbatim

@anchor{screen_prepare}
@subsection Preparation static analysis
Generate the file template of static analysis by using @ref{AdLintize Command, @command{adlintize}} command.
Edit setting file depending on the analyzed project.

Investigate computer environment, compiler environment of project build.

@verbatim
% uname -mo
i686 GNU/Linux
% gcc --version
gcc (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
@end verbatim

Shows the preset build environment which supports @ref{AdLintize Command, @command{adlintize}} command.
Select near the build environment.
In this session, GCC 4.5.1 on GNU/Linux i686 architecture is using.So select  @code{i686-linux-gcc_4.5.1} .

@verbatim
% adlintize -L
i686-linux-gcc_4.5.1
i686-cygwin-gcc_4.3.4
i686-mingw-gcc_4.5.2
x86_64-ubuntu_12.04-gcc_4.6.3
@end verbatim

Generate file template which required static analysis by using @ref{AdLintize Command, @command{adlintize}} command.

@verbatim
% adlintize -e i686-linux-gcc_4.5.1 -o adlint
% cd adlint
% ls
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

Compare @file{make.log} file which generated at @ref{screen_exam, Project investigation} and @code{SOURCES} list in @file{GNUmakefile} which
generated by @ref{AdLintize Command, @command{adlintize}}, edit equally.

@verbatim
% cp GNUmakefile GNUmakefile.orig
% vi GNUmakefile
% diff -u GNUmakefile.orig GNUmakefile
--- GNUmakefile.orig    2011-09-28 13:36:24.328078206 +0900
+++ GNUmakefile 2011-09-28 13:36:37.573902006 +0900
@@ -29,8 +29,6 @@
   putenv.c \
   fileio.c \
   kmapdef.c \
-  terminfo/checktc.c \
-  terminfo/tetris.c \
   search.c \
   input.c \
   ansi.c \
@end verbatim

Then find project specific include path from @file{make.log} file which generated  @ref{screen_exam, project investigation}.
Edit the path to @file{adlint_traits.yml}.

@verbatim
% cp adlint_traits.yml adlint_traits.yml.orig
% vi adlint_traits.yml
% diff -u adlint_traits.yml.orig adlint_traits.yml
--- adlint_traits.yml.orig      2011-09-28 13:40:10.748222288 +0900
+++ adlint_traits.yml   2011-09-28 13:40:24.105054386 +0900
@@ -25,6 +25,7 @@
   #     - "../include/bar"
   #     - "/opt/baz/include"
   include_path:
+    - ".."

   # Pathname of the project specific initial header file.
   # This header file is automatically included above the first line of the
@end verbatim

@subsection Execute the static analysis

Execute static analysis by using @file{GNUmakefile} which generated @ref{screen_prepare, Preparation static analysis}.

@verbatim
% make --version
GNU Make 3.82
Built for i386-redhat-linux-gnu
Copyright (C) 2010  Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

% make verbose-all
adlint --verbose -t adlint_traits.yml -o . ../braille.c ../acls.c ../putenv.c
../fileio.c ../kmapdef.c ../search.c ../input.c ../ansi.c ../pty.c ../layer.c
../termcap.c ../loadav.c ../comm.c ../screen.c ../term.c ../teln.c ../socket.c
../encoding.c ../utmp.c ../logfile.c ../display.c ../misc.c ../attacher.c
../help.c ../tty.c ../nethack.c ../braille_tsi.c ../sched.c ../process.c
../window.c ../mark.c ../resize.c
                  ../braille.c [fin] |============================| 7.999s
                     ../acls.c [fin] |============================| 12.152s
                   ../putenv.c [fin] |============================| 0.203s
                   ../fileio.c [fin] |============================| 13.013s
...snip...
                   ../window.c [fin] |============================| 22.388s
                     ../mark.c [fin] |============================| 14.827s
                   ../resize.c [fin] |============================| 18.964s
                  screen-4.0.3 [fin] |============================| 58.346s
  771.510s user, 2.370s system, 00:12:53.87 total

% ls *.{i,msg.csv,met.csv,log}
acls.c.log             kmapdef.c.log      sched.c.log
acls.c.met.csv         kmapdef.c.met.csv  sched.c.met.csv
acls.c.msg.csv         kmapdef.c.msg.csv  sched.c.msg.csv
acls.i                 kmapdef.i          sched.i
ansi.c.log             layer.c.log        screen-4.0.3.log
ansi.c.met.csv         layer.c.met.csv    screen-4.0.3.met.csv
ansi.c.msg.csv         layer.c.msg.csv    screen-4.0.3.msg.csv
...snip...
input.c.log            resize.c.log       window.c.met.csv
input.c.met.csv        resize.c.met.csv   window.c.msg.csv
input.c.msg.csv        resize.c.msg.csv   window.i
input.i                resize.i
@end verbatim


@node Dist Analyzing Screen
@section Distributed parallel analysis with distmake


@node Command
@chapter Command specification

@menu
* @command{adlintize} command:AdLintize Command.
* @command{adlint} command:AdLint Command.
* @command{adlint_sma} command:AdLint SMA Command.
* @command{adlint_cma} command:AdLint CMA Command.
* @command{adlint_chk} command:AdLint CHK Command.
@end menu

@node AdLintize Command
@section @command{adlintize} command

@subsection Function
Generate the following files which required static analysis by AdLint.

@itemize
@item @file{GNUmakefile} --- Make file for GNU make describing the analysis procedure
@item @file{adlint_traits.yml} --- Traits file for customize AdLint analysis behavior
@item @file{adlint_pinit.h} --- Initial header file of specific project
@item @file{adlint_cinit.h} --- Initial header file of compiler
@item @file{adlint_all.sh} --- Shell script describing the analysis procedure
@item @file{adlint_all.bat} --- Windows batch file describing the analysis procedure
@item @file{adlint_files.txt} --- Analyzed file list for shell script and batch file
@end itemize

When it run a @command{adlintize} command, all @file{*.c} files under the directory will set to @code{SOURCES} variable in @file{GNUmakefile}.

@subsection How to use

When it run a @command{adlintize} command at the root directory of analyzed project,
generate required files for static analysis to @file{adlint} directory.

@verbatim
% cd project-root
% adlintize -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

@command{adlintize} command provides some preset build environment.
To specify the preset build environment, more information can set automatically to the file templates.


@option{-L} option shows the list of preset build environment.

@verbatim
% adlintize -L
i686-linux-gcc_4.5.1
i686-cygwin-gcc_4.3.4
i686-mingw-gcc_4.5.2
x86_64-ubuntu_12.04-gcc_4.6.3
@end verbatim

@option{-e} option can set the preset build environment.

@verbatim
% cd project-root
% adlintize -e i686-linux-gcc_4.5.1 -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

@subsection Help message
@verbatim
Usage: adlintize [options] [project-name]
Options:
  -t FILE, --traits FILE         Write traits to FILE
                                 If omitted, `adlint_traits.yml' will be used
  -p FILE, --pinit-header FILE   Write project initial header to FILE
                                 If omitted, `adlint_pinit.h' will be used
  -c FILE, --cinit-header FILE   Write compiler initial header to FILE
                                 If omitted, `adlint_cinit.h' will be used
  -l FILE, --list-file FILE      Write list file to FILE
                                 If omitted, `adlint_files.txt' will be used
  -m FILE, --makefile FILE       Write analysis procedure GNUmakefile to FILE
                                 If omitted, `GNUmakefile' will be used
  -s FILE, --sh-script FILE      Write analysis procedure sh script to FILE
                                 If omitted, `adlint_all.sh' will be used
  -b FILE, --bat-file FILE       Write analysis procedure bat file to FILE
                                 If omitted, `adlint_all.bat' will be used
  -o DIR, --output-dir DIR       Set output directory
                                 If omitted, `.' will be used
  -e ENV, --environment ENV      Assume ENV as target build environment
  -L, --list-environment         List all preset build environments
  -f, --force                    Force to overwrite existing files
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint Command
@section @command{adlint} command

@subsection Function

Run both single module analysis ( correspond to the compile phase ) and cross module analysis ( correspond to the link phase ) at once.

It supports the following method to specify the analyzed source code : from command line and set to the list file.

Its activity is same as the following steps.  Run a single module analysis by using @ref{AdLint SMA Command,
@command{adlint_sma}} command with specify all analyzed source file. Then run a cross module analysis by using @ref{AdLint CMA Command, @command{adlint_cma}}.

The result of single module analysis, the following files will be generated for each source files.

@itemize
@item @file{*.i} --- The result of preprocessed.
@item @file{*.c.msg.csv} --- Output message of single module analysis.
@item @file{*.c.met.csv} --- Metric measurement result by single module analysis.
@item @file{*.c.log} --- Log message of single module analysis.
@end itemize

The result of cross module analysis, the following files will be generated.

@itemize
@item @file{project_name.msg.csv} --- Output message of cross module analysis for whole project.
@item @file{project_name.met.csv} --- Metric measurement result by cross module analysis for whole project.
@item @file{project_name.log} --- Log message of cross module analysis for whole project.
@end itemize

@subsection How to use

When it run a @command{adlint} command as follows at the directory which generated the template of setting files by @ref{AdLintize Command, @command{adlintize}},
run a single module analysis and cross module analysis at once.

@verbatim
% cd project-root
% adlintize -o adlint
% cd adlint
% adlint -v -t adlint_traits.yml -o . -p 1 -l adlint_files.txt
               ../intro_demo.c [fin] |============================| 0.134s
                    intro_demo [fin] |============================| 0.012s
  0.718s user, 0.500s system, 00:00:01.21 total
@end verbatim

When it collaborate with text editor or integrated development environment, the message can output to stderr without display the progress
by not specifying the @option{-v,--verbose} option.

@verbatim
% adlint -t adlint_traits.yml -o . -p 1 -l adlint_files.txt
../intro_demo.c:6:9:warning:c_builtin:W0492:UNC:X99:The same identifier name `i' is also used in the member of structure/union, label, tag or normal identifier.
../intro_demo.c:12:13:warning:c_builtin:W0027:UNC:X99:Comparison operation is being made by pointer variable.
../intro_demo.c:16:14:warning:c_builtin:W0422:UNC:X99:Value of the dereferencing pointer may be NULL.
../intro_demo.c:31:13:warning:c_builtin:W0613:UNC:X99:This controlling expression always makes false.
...snip...
../intro_demo.c:55:9:warning:c_builtin:W9001:UNC:X99:Control never reaches to this statement.
../intro_demo.c:2:1:warning:c_builtin:W0071:UNC:X99:Included "../useless_header.h" is not referenced in the translation unit. It can be removed.
../intro_demo.c:61:19:warning:c_builtin:W0628:UNC:X99:A function `int bar(void)' is defined, but this is not used in this project.
@end verbatim

@subsection Help message
@verbatim
Usage: adlint [options] [source-file...]
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -l FILE, --list-file FILE      Use FILE as list file
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint SMA Command
@section @command{adlint_sma} command
@subsection Function

Execute only single module analysis (correspond to the compile phase) which specified by command line. @*
For the result of single module analysis, generate the following files for each source file.

@itemize
@item @file{*.i} --- The result of preprocessed.
@item @file{*.c.msg.csv} --- Output message of single module analysis.
@item @file{*.c.met.csv} --- Metric measurement result by single module analysis.
@item @file{*.c.log} --- Log message of single module analysis.
@end itemize

@subsection How to use

When it run a @command{adlint_sma} command as follows at the directory which generated the template of setting files by @ref{AdLintize Command, @command{adlintize}},
run only single module analysis.

@verbatim
% adlint_sma -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [fin] |============================| 0.134s
  1.062s user, 0.843s system, 00:00:01.90 total
@end verbatim


When it collaborate with text editor or integrated development environment,
the message can output to stderr without display the progress by not specifying the @option{-v,--verbose} option.

@verbatim
% adlint_sma -t adlint_traits.yml -o . -p 1 ../intro_demo.c
../intro_demo.c:6:9:warning:c_builtin:W0492:UNC:X99:The same identifier name `i' is also used in the member of structure/union, label, tag or normal identifier.
../intro_demo.c:12:13:warning:c_builtin:W0027:UNC:X99:Comparison operation is being made by pointer variable.
../intro_demo.c:16:14:warning:c_builtin:W0422:UNC:X99:Value of the dereferencing pointer may be NULL.
../intro_demo.c:31:13:warning:c_builtin:W0613:UNC:X99:This controlling expression always makes false.
...snip...
../intro_demo.c:55:9:warning:c_builtin:W9001:UNC:X99:Control never reaches to this statement.
../intro_demo.c:2:1:warning:c_builtin:W0071:UNC:X99:Included "../useless_header.h" is not referenced in the translation unit. It can be removed.
../intro_demo.c:61:19:warning:c_builtin:W0628:UNC:X99:A function `int bar(void)' is defined, but this is not used in this project.
@end verbatim

@subsection Help message
@verbatim
Usage: adlint_sma [options] source-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint CMA Command
@section @command{adlint_cma} command


@subsection Function

Execute only cross module analysis (correspond to the link phase) which specified by command line. @*
For the result of cross module analysis, generate the following files.


@itemize
@item @file{project_name.msg.csv} --- Output message of cross module analysis for whole project.
@item @file{project_name.met.csv} --- Metric measurement result by cross module analysis for whole project.
@item @file{project_name.log} --- Log message of cross module analysis for whole project.
@end itemize

@subsection How to use

When it run a @command{adlint_cma} command as follows after finished the single module analysis by @ref{AdLint SMA Command, @command{adlint_sma}} command
 at the directory which generated the template of setting files by @ref{AdLintize Command, @command{adlintize}},
run only cross module analysis.

@verbatim
% ls *.c.met.csv
intro_demo.c.met.csv
% adlint_cma -v -t adlint_traits.yml -o . intro_demo.c.met.csv
                    intro_demo [fin] |============================| 0.011s
  1.203s user, 0.843s system, 00:00:02.04 total
@end verbatim

When it collaborate with text editor or integrated development environment,
the message can output to stderr without display the progress by not specifying the @option{-v,--verbose} option.


@verbatim
% adlint_cma -t adlint_traits.yml -o . intro_demo.c.met.csv
../intro_demo.c:61:19:warning:c_builtin:W0628:UNC:X99:A function `int bar(void)' is defined, but this is not used in this project.
@end verbatim


@subsection Help message
@verbatim
Usage: adlint_cma [options] sma-metric-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint CHK Command
@section @command{adlint_chk} command

@subsection Function

It can validate the body of @ref{Traits, traits file} by execute only preprocessing to analyzed source file which set by command line.

@subsection How to use

Create the template of setting file by @ref{AdLintize Command, @command{adlintize}},
and edit the @ref{Traits, traits file}. Then run a @command{adlint_chk} command as follows.
It can validate the body of @ref{Traits, traits file} by execute preprocessing.

@verbatim
% adlint_chk -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [fin] |============================| 0.047s
  0.812s user, 0.875s system, 00:00:01.68 total
@end verbatim

If the include path of header file doesn't set properly,the error occurs as follows.
It can check which header file doesn't included by referring the @file{*.c.msg.csv} file which correspond to the source file.

@verbatim
% adlint_chk -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [cpp] |=======                     | 0.006s!
An error was occurred while processing `../intro_demo.c'.
See `intro_demo.c.msg.csv' and `intro_demo.c.log' for more details.

% tail intro_demo.c.msg.csv
E,../intro_demo.c,1,1,E0009,A header file of <stdio.h> doesn't found.
X,../intro_demo.c,1,1,X0003,Analysis processing has been stopped due to unrecoverable error. For the details, refer to `intro_demo.c.msg.csv' and `intro_demo.c.log'.
@end verbatim

@subsection Help message
@verbatim
Usage: adlint_chk [options] source-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim


@node Input
@chapter Input specification

@menu
* Input file:Input Files.
* Traits file:Traits.
* Message definition file:Message Definition.
* Source code annotation:Source Code Annotation.
@end menu


@node Input Files
@section Input files

Analysis action can set the following two kind of files.

@table @var
@itemx @ref{Traits, traits file}
Describe how to process the analysis. Edit by @uref{http://yaml.org/, YAML style}.
@itemx @ref{Message Definition, Message definition file}
Describe the message catalog.Edit by @uref{http://yaml.org/, YAML style}.
@end table

Traits file sets the path by the command option @option{--traits} of
@ref{AdLint Command, @command{adlint}} , @ref{AdLint SMA Command, @command{adlint_sma}} , @ref{AdLint CMA Command, @command{adlint_cma}}.

Message definition file is installed in @file{etc/mesg.d} at AdLint install path.
@ref{AdLint Command, @command{adlint}} , @ref{AdLint SMA Command,@command{adlint_sma}} ,
@ref{AdLint CMA Command, @command{adlint_cma}} command selects the appropriate the message definition file by following the
language which specified in @ref{message_traits:language, @code{language}} of @ref{Message Traits, message traits}.

@node Traits
@section Traits file

@menu
* Global Traits:Global Traits.
* Project Traits:Project Traits.
* Compiler Traits:Compiler Traits.
* Linker Traits:Linker Traits.
* Message Traits:Message Traits.
@end menu

Describe @ref{Project Traits, Project Traits} , @ref{Compiler Traits, Compiler Traits} ,
@ref{Linker Traits, Linker Traits} , @ref{Message Traits, Message Traits} to a single
@uref{http://yaml.org/, YAML format}  setting file ( @ref{Traits Sample, sample} ).

When it run a @command{adlintize} command at the root directory of analyzed project,
generate the template of traits file for the project, @file{GNUmakefile} and shell script.

@verbatim
% cd project
% adlintize -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

You can specify environment variable as items in the traits file to be
described.

For example, specify the environment variable @code{ENV_VAR} as the item
@code{item} like below;

@verbatim
  item: $ENV_VAR
@end verbatim

And embed environment variables in a string value like below;

@verbatim
  item: "prefix${ENV_VAR}suffix"
@end verbatim

You can also specify multiple values of directory pathname list item by one
environment variable like below;

@verbatim
% export ENV_VAR="/usr/local/include:/usr/include"
@end verbatim

@verbatim
  include_path:
    - $ENV_VAR
@end verbatim


@node Global Traits
@subsection Global Traits
@cindex global_traits

Global Traits can be configured by root items in traits file.

@multitable @columnfractions .01 .3 .1
@headitem No. @tab Items @tab Styles @tab Contents
@item 1
@cindex version
@anchor{global_traits:version}
@tab
@code{version}
@tab
string
@tab
This item represents the format version of this traits file.  You should not
edit this item manually.
@item 2
@cindex exam_packages
@anchor{global_traits:exam_packages}
@tab
@code{exam_packages}
@tab
array of string
@tab
This item represents list of the source code examination package names to be
used by AdLint.

@code{"c_builtin"} is a builtin examination package name bundled with AdLint
core.
New optional source code examination packages will be released in the future.

For example, If you install @code{adlint-exam-c_ansi} optional examination
package which checks whether the source code complies with ANSI C, you can edit
@code{exam_packages} item as below;

In this case, only ANSI C compliance check will be run.
@example
exam_packages:
  - "c_ansi"
@end example

In this case, both AdLint builtin check and ANSI C compliance check will be
run.
@example
exam_packages:
  - "c_builtin"
  - "c_ansi"
@end example
@end multitable


@node Project Traits
@subsection Project Traits
@cindex project_traits

Project Traits can set under the @code{project_traits} in traits file.

@multitable @columnfractions .01 .3 .1
@headitem No. @tab Items @tab Styles @tab Contents
@item 1
@cindex project_traits:project_name
@anchor{project_traits:project_name}
@tab
@code{project_name}
@tab
string
@tab
Set project name.
@item 2
@cindex project_traits:project_root
@anchor{project_traits:project_root}
@tab
@code{project_root}
@tab
string
@tab
Set pathname of the project root directory.
@item 3
@cindex project_traits:target_files:inclusion_paths
@anchor{project_traits:target_files:inclusion_paths}
@tab
@code{target_files:inclusion_paths}
@tab
array of string
@tab
Specify directory paths which contain analysis target source files.
An entry can have multiple pathnames with @code{`:'} (or @code{`;'} on windows)
separators.
@item 4
@cindex project_traits:target_files:exclusion_paths
@anchor{project_traits:target_files:exclusion_paths}
@tab
@code{target_files:exclusion_paths}
@tab
array of string
@tab
Specify directory paths to eliminate analysis target source files under the
directory.
If omitted, AdLint will check all the files included by the target source files
such as 3rd-party library headers under @ref{project_traits:target_files:inclusion_paths, @code{target_files:inclusion_paths}}.
An entry can have multiple pathnames with @code{`:'} (or @code{`;'} on windows)
separators.
@item 5
@cindex project_traits:initial_header
@anchor{project_traits:initial_header}
@tab
@code{initial_header}
@tab
string
@tab
Set the header files which is included at the top of specified source files.
For example, project specific macro definition will be described in this file.
@item 6
@cindex project_traits:file_search_paths
@anchor{project_traits:file_search_paths}
@tab
@code{file_search_paths}
@tab
array of string
@tab
Set project specific include-file search paths.
An entry can have multiple pathnames with @code{`:'} (or @code{`;'} on windows)
separators.
@item 7
@cindex project_traits:coding_style:indent_style
@anchor{project_traits:coding_style:indent_style}
@tab
@code{coding_style:indent_style}
@tab
string
@tab
Indent style which is a convention governing the identation of blocks.
Select from @code{"K&R"}, @code{"Allman"} and @code{"GNU"}.

@code{"K&R"} style is
@example
int foo(int i)
@{
    if (i == 0) @{
        return 0;
    @}
    return i;
@}
@end example

@code{"Allman"} style is
@example
int foo(int i)
@{
    if (i == 0)
    @{
        return 0;
    @}
    return i;
@}
@end example

@code{"GNU"} style is
@example
int
foo(int i)
@{
  if (i == 0)
    @{
      return 0;
    @}
  return i;
@}
@end example

@item 8
@cindex project_traits:coding_style:tab_width
@anchor{project_traits:coding_style:tab_width}
@tab
@code{coding_style:tab_width}
@tab
integer value
@tab
Set the appearance number of digits of tab character
@item 9
@cindex project_traits:coding_style:indent_width
@anchor{project_traits:coding_style:indent_width}
@tab
@code{coding_style:indent_width}
@tab
integer value
@tab
Set the appearance number of digits of indent
@item 10
@cindex project_traits:file_encoding
@anchor{project_traits:file_encoding}
@tab
@code{file_encoding}
@tab
string
@tab
Set the  character encoding.
If the value is not set, process as "ASCII-8BIT".
@end multitable


@node Compiler Traits
@subsection Compiler Traits
@cindex compiler_traits

Compiler Traits can set under the @code{compiler_traits} in traits file.

@multitable @columnfractions .01 .3 .1
@headitem No. @tab Items @tab Styles @tab Contents
@item 1
@cindex compiler_traits:initial_header
@anchor{compiler_traits:initial_header}
@tab
@code{initial_header}
@tab
string
@tab
Set the header files which is included at the top of specified source files and automatically included before  project specific @code{initial_header}.
This file describes compiler specific macro, type definition and others.
@item 2
@cindex compiler_traits:file_search_paths
@anchor{compiler_traits:file_search_paths}
@tab
@code{file_search_paths}
@tab
array of string
@tab
Set the compiler specific include-file search paths.
An entry can have multiple pathnames with @code{`:'} (or @code{`;'} on windows)
separators.
@item 3
@cindex compiler_traits:standard_types:char_size
@anchor{compiler_traits:standard_types:char_size}
@tab
@code{standard_types:char_size}
@tab
integer value
@tab
Set the size of @code{char} type family by bit quantities.
@item 4
@cindex compiler_traits:standard_types:char_alignment
@anchor{compiler_traits:standard_types:char_alignment}
@tab
@code{standard_types:char_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{char} type family by bit quantities.
@item 5
@cindex compiler_traits:standard_types:short_size
@anchor{compiler_traits:standard_types:short_size}
@tab
@code{standard_types:short_size}
@tab
integer value
@tab
Set the size of @code{short} type family by bit quantities.
@item 6
@cindex compiler_traits:standard_types:short_alignment
@anchor{compiler_traits:standard_types:short_alignment}
@tab
@code{standard_types:short_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{short} family by bit quantities.
@item 7
@cindex compiler_traits:standard_types:int_size
@anchor{compiler_traits:standard_types:int_size}
@tab
@code{standard_types:int_size}
@tab
integer value
@tab
Set the size of @code{int} type family by bit quantities.
@item 8
@cindex compiler_traits:standard_types:int_alignment
@anchor{compiler_traits:standard_types:int_alignment}
@tab
@code{standard_types:int_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{int} type family by bit quantities.
@item 9
@cindex compiler_traits:standard_types:long_size
@anchor{compiler_traits:standard_types:long_size}
@tab
@code{standard_types:long_size}
@tab
integer value
@tab
Set the size of @code{long int} type family by bit quantities.
@item 10
@cindex compiler_traits:standard_types:long_alignment
@anchor{compiler_traits:standard_types:long_alignment}
@tab
@code{standard_types:long_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{long int} type family by bit quantities.
@item 11
@cindex compiler_traits:standard_types:long_long_size
@anchor{compiler_traits:standard_types:long_long_size}
@tab
@code{standard_types:long_long_size}
@tab
integer value
@tab
Set the size of @code{long long int} type family by bit quantities.
@item 12
@cindex compiler_traits:standard_types:long_long_alignment
@anchor{compiler_traits:standard_types:long_long_alignment}
@tab
@code{standard_types:long_long_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{long long int} type family by bit quantities.
@item 13
@cindex compiler_traits:standard_types:float_size
@anchor{compiler_traits:standard_types:float_size}
@tab
@code{standard_types:float_size}
@tab
integer value
@tab
Set the size of @code{float} type family by bit quantities.
@item 14
@cindex compiler_traits:standard_types:float_alignment
@anchor{compiler_traits:standard_types:float_alignment}
@tab
@code{standard_types:float_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{float} type family by bit quantities.
@item 15
@cindex compiler_traits:standard_types:double_size
@anchor{compiler_traits:standard_types:double_size}
@tab
@code{standard_types:double_size}
@tab
integer value
@tab
Set the size of @code{double} type family by bit quantities.
@item 16
@cindex compiler_traits:standard_types:double_alignment
@anchor{compiler_traits:standard_types:double_alignment}
@tab
@code{standard_types:double_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{double} type family by bit quantities.
@item 17
@cindex compiler_traits:standard_types:long_double_size
@anchor{compiler_traits:standard_types:long_double_size}
@tab
@code{standard_types:long_double_size}
@tab
integer value
@tab
Set the size of @code{long double} type family by bit quantities.
@item 18
@cindex compiler_traits:standard_types:long_double_alignment
@anchor{compiler_traits:standard_types:long_double_alignment}
@tab
@code{standard_types:long_double_alignment}
@tab
integer value
@tab
Set the memory alignment of @code{long double} type family by bit quantities.
@item 19
@cindex compiler_traits:standard_types:code_ptr_size
@anchor{compiler_traits:standard_types:code_ptr_size}
@tab
@code{standard_types:code_ptr_size}
@tab
integer value
@tab
Set the size of function pointer by bit quantities.
@item 20
@cindex compiler_traits:standard_types:code_ptr_alignment
@anchor{compiler_traits:standard_types:code_ptr_alignment}
@tab
@code{standard_types:code_ptr_alignment}
@tab
integer value
@tab
Set the memory alignment of function pointer by bit quantities.
@item 21
@cindex compiler_traits:standard_types:data_ptr_size
@anchor{compiler_traits:standard_types:data_ptr_size}
@tab
@code{standard_types:data_ptr_size}
@tab
integer value
@tab
Set the size of data pointer by bit quantities.
@item 22
@cindex compiler_traits:standard_types:data_ptr_alignment
@anchor{compiler_traits:standard_types:data_ptr_alignment}
@tab
@code{standard_types:data_ptr_alignment}
@tab
integer value
@tab
Set the memory alignment of data pointer by bit quantities.
@item 23
@cindex compiler_traits:standard_types:char_as_unsigned_char
@anchor{compiler_traits:standard_types:char_as_unsigned_char}
@tab
@code{standard_types:char_as_unsigned_char}
@tab
boolean value
@tab
If @code{`char'} type treat as @code{`unsigned char'}, set true.
@item 24
@cindex compiler_traits:arithmetic:logical_right_shift
@anchor{compiler_traits:arithmetic:logical_right_shift}
@tab
@code{arithmetic:logical_right_shift}
@tab
boolean value
@tab
If right shift expression @code{`>>'} treat as logical shift instead of arithmetic shift,
set true.
@item 25
@cindex compiler_traits:identifier_max
@anchor{compiler_traits:identifier_max}
@tab
@code{identifier_max}
@tab
integer value
@tab
Set the maximum number of length which compiler can identifier.
@item 26
@cindex compiler_traits:extension_substitutions
@anchor{compiler_traits:extension_substitutions}
@tab
@code{extension_substitutions}
@tab
map of string
@tab
Set the token replacement pattern to adjust compiler specific extension.
AdLint puts the warning message @ref{W0061} all uses of this extension.
If @code{`__attribute__ ( arbitrary token row )'} delete after pre-process and puts the warning @ref{W0061}, set as follows.
@example
extension_substitutions:
  "__attribute__(__adlint__any)": ""
@end example

And if the token @code{`__restrict'} replaces @code{`restrict'} and put the warning @ref{W0061}, set as follows.
@example
extension_substitutions:
  "__restrict": "restrict"
@end example
@item 27
@cindex compiler_traits:arbitrary_substitutions
@anchor{compiler_traits:arbitrary_substitutions}
@tab
@code{arbitrary_substitutions}
@tab
map of string
@tab
Same as
@ref{compiler_traits:extension_substitutions, @code{extension_substitutions}},
replace the token after pre-process, the difference is doesn't put the warning
@ref{W0061}.
@end multitable


@node Linker Traits
@subsection Linker Traits
@cindex linker_traits
Linker Traits sets under @code{linker_traits} items.

@multitable @columnfractions .01 .3 .1
@headitem No. @tab Items @tab Styles @tab Contents
@item 1
@cindex linker_traits:identifier_max
@anchor{linker_traits:identifier_max}
@tab
@code{identifier_max}
@tab
integer value
@tab
Set the maximum number of length which linker can identifier.
@item 2
@cindex linker_traits:identifier_ignore_case
@anchor{linker_traits:identifier_ignore_case}
@tab
@code{identifier_ignore_case}
@tab
boolean value
@tab
Set whether check case sensitive by linker when identifier external symbol.
@end multitable


@node Message Traits
@subsection Message Traits
@cindex message_traits
Message Traits can set under the @code{message_traits} in traits file.
                                                                            .
@multitable @columnfractions .01 .3 .1
@headitem No. @tab Items @tab Styles @tab Contents
@item 1
@cindex message_traits:language
@anchor{message_traits:language}
@tab
@code{language}
@tab
string
@tab
Set the language of message body.(Currently) it available @code{"en_US"} or @code{"ja_JP"}.
@item 2
@cindex message_traits:individual_suppression
@anchor{message_traits:individual_suppression}
@tab
@code{individual_suppression}
@tab
boolean
@tab
This item enables message suppression by @ref{Source Code Annotation, source code annotations}.

In case of @code{true}, message suppression by annotations will be enabled.
@item 3
@cindex message_traits:exclusion:categories
@anchor{message_traits:exclusion:categories}
@tab
@code{exclusion:categories}
@tab
array of string
@tab
This item represents excluding code checks by its message categories.
@item 4
@cindex message_traits:exclusion:severities
@anchor{message_traits:exclusion:severities}
@tab
@code{exclusion:severities}
@tab
regexp string
@tab
This item represents excluding code checks by its message severities.
@item 5
@cindex message_traits:exclusion:messages
@anchor{message_traits:exclusion:messages}
@tab
@code{exclusion:messages}
@tab
map of Message ID and string
@tab
This item represents excluding code checks by its message ID.

Because a message ID is not unique in multiple examination packages, you should
also specify the name of the examination package including the message.
@item 6
@cindex message_traits:inclusion:messages
@anchor{message_traits:inclusion:messages}
@tab
@code{inclusion:messages}
@tab
map of Message ID and string
@tab
This item represents messages which is excluded by settings of @code{exclusion}
section but will be used by AdLint.

For example, you can bring back the specified code checks which is excluded by
@ref{message_traits:exclusion:categories, exclusion:categories}.
@item 7
@cindex message_traits:change_list
@anchor{message_traits:change_list}
@tab
@code{change_list}
@tab
map of Message ID and changed contents
@tab
This item represents overriding contents of existing one in the message
definition.

For example, you can change contents of @code{W9999} message in
@code{"c_builtin"} examination package as below;

@example
change_list:
  W9999:
    package: "c_builtin"
    classes:
      - "<name of new message category #1>:<severity of this message #1>"
      - "<name of new message category #2>:<severity of this message #2>"
    format: "new message format of this message."
@end example

@end multitable


@node Message Definition
@section Message Definition file.

Describe all error and warning message to setting file  by @uref{http://yaml.org/, format}.
Normally this file doesn't edit directly.
If it need to change the message body, set the changes to @ref{message_traits:change_list,
@code{change_list}} in traits file.


@node Source Code Annotation
@section Source Code Annotation

You can write an annotation which controls AdLint's analysis behavior as an
ordinary comment of the programming language.

@subsection Warning message suppression annotation

An annotation starts with @code{ADLINT:SF} in an ordinary comment specifies
that messages listed in the annotation of the annotated file will be
suppressed.

An annotation starts with @code{ADLINT:SL} in an ordinary comment specifies
that messages listed in the annotation of the annotated line will be
suppressed.

The following describes format and usage of the annotation.

@subheading @bullet{ Common definitions}
@example
@anchor{message_specifier_list}
message_specifier_list : @ref{qualified_message_specifier}
                       | @ref{unqualified_message_specifier}
                       | @ref{message_specifier_list} @ref{qualified_message_specifier}
                       | @ref{message_specifier_list} @ref{unqualified_message_specifier}

@anchor{qualified_message_specifier}
qualified_message_specifier : ':' @ref{package_name} @ref{unqualified_message_specifier}

@anchor{unqualified_message_specifier}
unqualified_message_specifier : ':' '[' @ref{message_name_list} ']'

@anchor{message_name_list}
message_name_list : @ref{message_name}
                  | @ref{message_name_list} ',' @ref{message_name}

@anchor{message_name}
message_name : 'W' [0-9]@{4@}

@anchor{package_name}
package_name : any string specified in @ref{global_traits:exam_packages, @code{exam_packages}} of the traits file.
@end example

@subheading @bullet{ File-wise message suppressor}
@example
@anchor{file_wise_suppressor_annotation}
file_wise_suppressor_annotation : "/*" @ref{file_wise_suppressor_head} @ref{message_specifier_list} "*/"
                                | "//" @ref{file_wise_suppressor_head} @ref{message_specifier_list}

@anchor{file_wise_suppressor_head}
file_wise_suppressor_head : "ADLINT:SF"
@end example

@subheading @bullet{ Line-wise message suppressor}
@example
@anchor{line_wise_suppressor_annotation}
line_wise_suppressor_annotation : "/*" @ref{line_wise_suppressor_head} @ref{message_specifier_list} "*/"
                                | "//" @ref{line_wise_suppressor_head} @ref{message_specifier_list}

@anchor{line_wise_suppressor_head}
line_wise_suppressor_head : "ADLINT:SL"
@end example

@subheading @bullet{ Sample code}
@verbatim
/* ADLINT:SF:[W0001,W0002] (to suppress W0001 and W0002 of all exam-packages in this file.) */
#include <stdio.h>

extern int i; /* ADLINT:SL:[W0003] (to suppress W0003 of all exam-packages only at this line.) */
extern int j; /* ADLINT:SL:c_staging:[W2001] (to suppress W2001 of `c_staging' exam-package only at this line.) */

void foo(void)
{
    printf("%d\n", i + j);
}
@end verbatim


@node Output
@chapter Output specification

@menu
* Output file:Output Files.
* Common definition:Common.
* Metrics file:Metrics File.
* Message file:Message File.
@end menu


@node Output Files
@section Output files

Print the result of single module analysis to the following four different files.

@multitable @columnfractions .01 .2 .2 .3
@headitem No. @tab Name @tab File name @tab Contents
@item 1
@tab
Preprocessed source
@tab
@file{<source file name except the extension>.i}
@tab
The line beginning with # is line marker.
@item 2
@tab
@ref{Metrics File, metrics file}
@tab
@file{<source file name>.met.csv}
@tab
Print the metrics and the code information by CSV format.
@item 3
@tab
@ref{Message File, message file}
@tab
@file{<source file name>.msg.csv}
@tab
Print the error and the warning message by CSV format.
@item 4
@tab
Log file
@tab
@file{<source file name>.log}
@tab
Print the log of single module analysis.
@end multitable

Print the result of cross module analysis to the following three different files.

@multitable @columnfractions .01 .2 .2 .3
@headitem No. @tab Name @tab File name @tab Contents
@item 1
@tab
@ref{Metrics File, metrics file}
@tab
@file{<project name>.met.csv}
@tab
Print the metrics information by CSV format.
@item 2
@tab
@ref{Message File, message file}
@tab
@file{<project name>.msg.csv}
@tab
Print the warning message by CSV format.
@item 3
@tab
Log file
@tab
@file{<project name>.log}
@tab
Print the log of cross module analysis.
@end multitable


@node Common
@section Common definition

@example
@anchor{version_number}
version_number
  : @ref{major_version} '.' @ref{minor_version} '.' @ref{patch_level}

@anchor{major_version}
major_version : integer value

@anchor{minor_version}
minor_version : integer value

@anchor{patch_level}
patch_level : integer value

@anchor{exec_timestamp}
exec_timestamp : Year '-' Month '-' Day ' ' Hour ':' Minute ':' Second ':' Time zone

@anchor{exec_working_directory}
exec_working_directory : Full path name of run the analysis.

@anchor{new_line}
new_line : line feed string depends on runtime environment.

@anchor{file_path}
file_path : file path name depends on runtime environment.

@anchor{line_no}
line_no : integer value

@anchor{lines}
lines : integer value

@anchor{column_no}
column_no : integer value

@anchor{location}
location : @ref{file_path} ',' @ref{line_no} ',' @ref{column_no}

@anchor{function_identifier}
function_identifier
  : @ref{function_name} ',' @ref{function_signature}

@anchor{function_name}
function_name : c_identifier

@anchor{function_signature}
function_signature : c_declaration_specifiers c_declarator

@anchor{function_linkage_type}
function_linkage_type
  : 'I'  <- Internal
  | 'X'  <- eXternal

@anchor{function_scope_type}
function_scope_type
  : 'F'  <- File
  | 'B'  <- Block

@anchor{function_declaration_type}
function_declaration_type
  : 'E'  <- Explicit
  | 'I'  <- Implicit

@anchor{type_name}
type_name : c_identifier

@anchor{type_rep}
type_rep : c_declaration

@anchor{variable_name}
variable_name : c_identifier

@anchor{initializer_rep}
initializer_rep : c_initializer

@anchor{assignment_rep}
assignment_rep : c_assignment_operator c_assignment_expression

@anchor{macro_name}
macro_name : c_identifier

@anchor{macro_value}
macro_value
  :
  | @ref{pp_tokens}

@anchor{pp_tokens}
pp_tokens : c_pp_tokens

@anchor{exam_package_name}
exam_package_name : arbitrary string

@anchor{message_id}
message_id
  : 'W' [0-9]@{4@}
  | 'E' [0-9]@{4@}
  | 'C' [0-9]@{4@}

@anchor{message_category}
message_category : [A-Z]@{3@}

@anchor{message_severity}
message_severity : [A-Z][0-9]@{2@}

@anchor{message_text}
message_text : arbitrary string
@end example


@node Metrics File
@section metrics file

@itemize
@item @ref{Output_Metrics_Ver, Version records}
@item @ref{Output_Metrics_Dcl, Declaration records}
@item @ref{Output_Metrics_Def, Type definition records}
@item @ref{Output_Metrics_Ini, Initialize records}
@item @ref{Output_Metrics_Asn, Assignment records}
@item @ref{Output_Metrics_Dep, Dependency records}
@item @ref{Output_Metrics_Lit, Literal records}
@item @ref{Output_Metrics_Pre, Preprocess records}
@item @ref{Output_Metrics_Met, Metirc value records}
@end itemize

@anchor{Output_Metrics_Ver}
@subsection Version records

@example
@anchor{metrics_version_record}
metrics_version_record
  : @ref{metrics_version_head} ',' @ref{version_number} ',' @ref{exec_timestamp} ',' @ref{exec_working_directory}

@anchor{metrics_version_head}
metrics_version_head : "VER"
@end example

@anchor{Output_Metrics_Ver_Sample}
@subheading @bullet{ Output example}
@example
VER,0.6.4,2012-02-16 14:10:59 +0900,/home/yanoh/intro_demo
@end example

@anchor{Output_Metrics_Dcl}
@subsection Declaration records

@example
@anchor{declaration_record}
declaration_record
  : @ref{declaration_head} ',' @ref{location} ',' @ref{typedcl_record_body}
  | @ref{declaration_head} ',' @ref{location} ',' @ref{gvardcl_record_body}
  | @ref{declaration_head} ',' @ref{location} ',' @ref{funcdcl_record_body}

@anchor{declaration_head}
declaration_head : "DCL"
@end example

@subheading @bullet{ Type definition records}
@example
@anchor{typedcl_record_body}
typedcl_record_body
  : 'T' ',' @ref{typedcl_type} ',' @ref{type_name} ',' @ref{type_rep}

@anchor{typedcl_type}
typedcl_type
  : 'T'  <- typedef
  | 'S'  <- struct
  | 'U'  <- union
  | 'E'  <- enum
@end example

@subheading @bullet{ Global variable declaration Record}
@example
@anchor{gvardcl_record_body}
gvardcl_record_body
  : 'V' ',' @ref{variable_name} ',' @ref{type_rep}
@end example

@subheading @bullet{ Function declaration record}
@example
@anchor{funcdcl_record_body}
funcdcl_record_body
  : 'F' ',' @ref{function_linkage_type} ',' @ref{function_scope_type} ',' @ref{function_declaration_type} ',' @ref{function_identifier}
@end example

@anchor{Output_Metrics_Dcl_Sample}
@subheading @bullet{ Output example}
@verbatim
 1: typedef int *int_ptr;
 2:
 3: struct Foo {
 4:     int i;
 5:     long l;
 6: };
 7:
 8: union Bar {
 9:     int i;
10:     char c;
11: };
12:
13: enum Color {
14:     RED = 1,
15:     GREEN,
16:     BLUE
17: };
18:
19: extern int global_1;
20:
21: extern int foo(long);
@end verbatim

@example
DCL,test.c,1,14,T,T,int_ptr,int *
DCL,test.c,3,8,T,S,Foo,struct Foo @{ int i; long l; @}
DCL,test.c,8,7,T,U,Bar,union Bar @{ int i; char c; @}
DCL,test.c,13,6,T,E,Color,"enum Color @{ RED = 1, GREEN, BLUE @}"
DCL,test.c,19,12,V,global_1,int
DCL,test.c,21,12,F,X,F,E,foo,int foo(long)
@end example

@anchor{Output_Metrics_Def}
@subsection Declaration records

@example
@anchor{definition_record}
definition_record
  : @ref{definition_head} ',' @ref{location} ',' @ref{vardef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{fundef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{macrodef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{labeldef_record_body}

@anchor{definition_head}
definition_head : "DEF"
@end example

@subheading @bullet{ Variable declaration records}
@example
@anchor{vardef_record_body}
vardef_record_body
  : 'V' ',' @ref{variable_linkage_type} ',' @ref{variable_scope_type} ',' @ref{storage_class_type} ',' @ref{variable_name} ',' @ref{type_rep}

@anchor{variable_linkage_type}
variable_linkage_type
  : 'I'  <- Internal
  | 'X'  <- eXternal
  | 'N'  <- None

@anchor{variable_scope_type}
variable_scope_type
  : 'F'  <- File
  | 'B'  <- Block
  | 'P'  <- Parameter

@anchor{storage_class_type}
storage_class_type
  : 'A'  <- Auto
  | 'R'  <- Register
  | 'S'  <- Static
  | 'N'  <- None
@end example

@subheading @bullet{ Function definition records}
@example
@anchor{fundef_record_body}
fundef_record_body
  : 'F' ',' @ref{function_linkage_type} ',' @ref{function_scope_type} ',' @ref{function_identifier} ',' @ref{lines}
@end example

@subheading @bullet{ Macro definition records}
@example
@anchor{macrodef_record_body}
macrodef_record_body
  : 'M' ',' @ref{macro_name} ',' @ref{macro_form_type}

@anchor{macro_form_type}
macro_form_type
  : 'O'  <- Object
  | 'F'  <- Function
@end example

@subheading @bullet{ Label definition record}
@example
@anchor{labeldef_record_body}
labeldef_record_body
  : 'L' ',' @ref{label_name}

@anchor{label_name}
label_name : c_identifier
@end example

@anchor{Output_Metrics_Def_Sample}
@subheading @bullet{ Output example}
@verbatim
 1: int global_1;
 2: struct { int i; long l; } global_2;
 3:
 4: static long static_1;
 5: static enum { FOO, BAR, BAZ } static_2;
 6:
 7: int foo(int i, register short s)
 8: {
 9:     static char static_3 = 0;
10:     register int local_1 = i + s + static_3;
11:     auto int local_2 = 0;
12:     int local_3 = 0;
13:     goto end;
14: end:
15:     return local_1 + local_2 + local_3;
16: }
17:
18: static void bar(void) {}
19:
20: #define OBJ_FORM_MACRO (1 + 2)
21: #define MAX(a, b) ((a) < (b) ? (b) : (a))
@end verbatim

@example
DEF,test.c,1,5,V,X,F,N,global_1,int
DEF,test.c,2,27,V,X,F,N,global_2,struct __adlint__unnamed_1
DEF,test.c,4,13,V,I,F,S,static_1,long
DEF,test.c,5,31,V,I,F,S,static_2,enum __adlint__unnamed_2
DEF,test.c,7,13,V,I,P,N,i,int
DEF,test.c,7,31,V,I,P,R,s,short
DEF,test.c,9,17,V,I,B,S,static_3,char
DEF,test.c,10,18,V,I,B,R,local_1,int
DEF,test.c,11,14,V,I,B,A,local_2,int
DEF,test.c,12,9,V,I,B,N,local_3,int
DEF,test.c,7,5,F,X,F,foo,"int foo(int,short)",10
DEF,test.c,18,13,F,I,F,bar,void bar(void),1
DEF,test.c,20,1,M,OBJ_FORM_MACRO,O
DEF,test.c,21,1,M,MAX,F
DEF,test.c,14,1,L,end
@end example

@anchor{Output_Metrics_Ini}
@subsection Initialization record

@example
@anchor{initialization_record}
initialization_record
  : @ref{initialization_head} ',' @ref{location} ',' @ref{variable_name} ',' @ref{initializer_rep}

@anchor{initialization_head}
initialization_head : "INI"
@end example

@anchor{Output_Metrics_Ini_Sample}
@subheading @bullet{ Output example}
@verbatim
1: int global_1 = 1;
2:
3: int main(void)
4: {
5:     int local_1 = global_1;
6:     int local_2 = local_1 + 1;
7:
8:     return local_1 + local_2;
9: }
@end verbatim

@example
INI,test.c,1,5,global_1,1
INI,test.c,5,9,local_1,global_1
INI,test.c,6,9,local_2,local_1 + 1
@end example

@anchor{Output_Metrics_Asn}
@subsection Assignment records

@example
@anchor{assignment_record}
assignment_record
  : @ref{assignment_head} ',' @ref{location} ',' @ref{variable_name} ',' @ref{assignment_rep}

@anchor{assignment_head}
assignment_head : "ASN"
@end example

@anchor{Output_Metrics_Asn_Sample}
@subheading @bullet{ Output example}
@verbatim
 1: int main(void)
 2: {
 3:     int i;
 4:
 5:     for (i = 0; i < 10; i++) {
 6:         if (i % 2) {
 7:             i += 1;
 8:         }
 9:     }
10:
11:     return 0;
12: }
@end verbatim

@example
ASN,test.c,5,12,i,= 0
ASN,test.c,7,15,i,+= 1
@end example

@anchor{Output_Metrics_Dep}
@subsection Dependency records

@example
@anchor{dependency_record}
dependency_record
  : @ref{dependency_head} ',' @ref{location} ',' @ref{include_record_body}
  | @ref{dependency_head} ',' @ref{location} ',' @ref{call_record_body}
  | @ref{dependency_head} ',' @ref{location} ',' @ref{xref_record_body}

@anchor{dependency_head}
dependency_head : "DEP"
@end example

@subheading @bullet{ Include records}
@example
@anchor{include_record_body}
include_record_body
  : 'I' ',' @ref{included_fpath}

@anchor{included_fpath}
included_fpath : '<' @ref{file_path} '>' | '"' @ref{file_path} '"'
@end example

@subheading @bullet{ Caller function records}
@example
@anchor{call_record_body}
call_record_body
  : 'C' ',' @ref{caller_function} ',' @ref{callee_function}

@anchor{caller_function}
caller_function : @ref{function_identifier}

@anchor{callee_function}
callee_function : @ref{function_identifier}
@end example

@subheading @bullet{ external reference records}
@example
@anchor{xref_record_body}
xref_record_body
  : 'X' ',' xref_variable_record_body
  | 'X' ',' xref_function_record_body

@anchor{xref_variable_record_body}
xref_variable_record_body
  : 'V' ',' @ref{accessor_function} ',' @ref{access_type} ',' @ref{accessee_variable}

@anchor{xref_function_record_body}
xref_function_record_body
  : 'F' ',' @ref{accessor_function} ',' @ref{access_type} ',' @ref{accessee_function}

@anchor{accessor_function}
accessor_function : @ref{function_identifier}

@anchor{access_type}
access_type : 'R' | 'W'

@anchor{accessee_variable}
accessee_variable : @ref{variable_name}

@anchor{accessee_function}
accessee_function : @ref{function_identifier}
@end example

@anchor{Output_Metrics_Dep_Sample}
@subheading @bullet{ Output example}
@verbatim
 1: #include <stdio.h>
 2: #include "test.h"
 3:
 4: extern int global;
 5:
 6: int foo(long l)
 7: {
 8:     int i = global;
 9:
10:     return l - i;
11: }
12:
13: int main(void)
14: {
15:     int (*p)(long) = &foo;
16:
17:     global = 5;
18:
19:     return (*p)(10);
20: }
@end verbatim

@example
DEP,test.c,1,1,I,</usr/include/stdio.h>
DEP,test.c,2,1,I,"""test.h"""
DEP,test.c,8,13,X,V,foo,int foo(long),R,global
DEP,test.c,19,16,C,main,int main(void),foo,int foo(long)
DEP,test.c,15,23,X,F,main,int main(void),R,foo,int foo(long)
DEP,test.c,17,12,X,V,main,int main(void),W,global
@end example

@anchor{Output_Metrics_Lit}
@subsection Literal records

@example
@anchor{literal_record}
literal_record
  : @ref{literal_head} ',' @ref{location} ',' @ref{literal_type} ',' @ref{literal_prefix} ',' @ref{literal_suffix} ',' @ref{literal_value}

@anchor{literal_head}
literal_head : "LIT"

@anchor{literal_type}
literal_type
  : 'DN'  <- Decimal Number
  | 'HN'  <- Hexadecimal Number
  | 'ON'  <- Octal Number
  | 'BN'  <- Binary Number
  | 'FN'  <- Floating point Number
  | 'CN'  <- Character Narrow
  | 'SN'  <- String Narrow
  | 'CW'  <- Character Wide
  | 'SW'  <- String Wide

@anchor{literal_prefix}
literal_prefix
  :
  | 'l'  | 'L'
  | '0'
  | '0x' | '0X'
  | '0b' | '0B'

@anchor{literal_suffix}
literal_suffix
  :
  | 'u'   | 'U'
  | 'l'   | 'L'
  | 'ul'  | 'Ul'  | 'uL'  | 'UL'
  | 'ull' | 'Ull' | 'uLL' | 'ULL'
  | 'll'  | 'LL'
  | 'f'   | 'F'

@anchor{literal_value}
literal_value
  : c_constant
  | c_string_literal
@end example

@anchor{Output_Metrics_Lit_Sample}
@subheading @bullet{ Output example}
@verbatim
1: unsigned int i = 0xFFU;
2:
3: int foo(long l)
4: {
5:     const wchar_t *s = L"foobar";
6:
7:     return 0;
8: }
@end verbatim

@example
LIT,test.c,1,18,HN,0x,U,0xFFU
LIT,test.c,5,24,SW,L,,"L""foobar"""
@end example

@anchor{Output_Metrics_Pre}
@subsection Preprocess record

@example
@anchor{preprocess_record}
preprocess_record
  : @ref{preprocess_head} ',' @ref{location} ',' @ref{pp_directive} ',' @ref{pp_tokens}

@anchor{preprocess_head}
preprocess_head : "PRE"

@anchor{pp_directive}
pp_directive
  : "#if"
  | "#ifdef"
  | "#ifndef"
  | "#elif"
  | "#else"
  | "#endif"
  | "#include"
  | "#define"
  | "#undef"
  | "#line"
  | "#error"
  | "#pragma"
  | "#"
@end example

@anchor{Output_Metrics_Pre_Sample}
@subheading @bullet{ Output example}
@verbatim
 1: #pragma once
 2:
 3: #if defined(NDEBUG)
 4: void debug(const char *msg) {}
 5: #else
 6: #include <stdio.h>
 7: void debug(const char *msg)
 8: {
 9:     puts(msg);
10: }
11: #endif
@end verbatim

@example
PRE,test.c,1,1,#pragma,once
PRE,test.c,3,1,#if,defined(NDEBUG)
PRE,test.c,5,1,#else,
PRE,test.c,6,1,#include,<stdio.h>
PRE,test.c,11,1,#endif,
@end example

@anchor{Output_Metrics_Met}
@subsection Metric value records

@example
@anchor{metric_record}
metric_record
  : @ref{metric_head} ',' @ref{file_metric_record_body}
  | @ref{metric_head} ',' @ref{func_metric_record_body}

@anchor{metric_head}
metric_head : "MET"

@anchor{file_metric_record_body}
file_metric_record_body
  : @ref{file_metric_name} ',' @ref{file_path} ',' @ref{metric_value}

@anchor{func_metric_record_body}
func_metric_record_body
  : @ref{func_metric_name} ',' @ref{function_identifier} ',' @ref{location} ',' @ref{metric_value}

@anchor{file_metric_name}
file_metric_name
  : "FL_STMT"  <- Number of statements
  | "FL_FUNC"  <- Number of functions

@anchor{func_metric_name}
func_metric_name
  : "FN_STMT"  <- Number of statements
  | "FN_UNRC"  <- Number of unreached statements
  | "FN_LINE"  <- Number of lines
  | "FN_PARA"  <- Number of parameters
  | "FN_UNUV"  <- Number of not use /not reuse variables
  | "FN_CSUB"  <- Location number of call function
  | "FN_CALL"  <- Location number of called from function
  | "FN_GOTO"  <- Number of goto statement
  | "FN_RETN"  <- Number of return point in a function
  | "FN_UELS"  <- Number of 'if' statement unless 'else'
  | "FN_NEST"  <- Maximum number of nest of control flow graph
  | "FN_PATH"  <- Presumed  number of static path
  | "FN_CYCM"  <- Cyclomatic complexity

@anchor{metric_value}
metric_value : integer value
@end example


@node Message File
@section message file

@example
@anchor{message_file}
message_file
  : @ref{message_version_record}
  | @ref{message_version_record} @ref{new_line} @ref{message_list}

@anchor{message_version_record}
message_version_record
  : 'V' ',' @ref{version_number} ',' @ref{exec_timestamp} ',' @ref{exec_working_directory}

@anchor{message_list}
message_list
  : @ref{error_record}
  | @ref{warning_record}
  | @ref{message_list} @ref{new_line} @ref{error_record}
  | @ref{message_list} @ref{new_line} @ref{warning_record}

@anchor{error_record}
error_record
  : @ref{error_line} @ref{new_line} @ref{context_line_list}

@anchor{error_line}
error_line
  : 'E' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}

@anchor{warning_record}
warning_record
  : @ref{warning_line} @ref{new_line} @ref{context_line_list}

@anchor{warning_line}
warning_line
  : 'W' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}

@anchor{context_line_list}
context_line_list
  :
  | @ref{context_line} @ref{new_line} @ref{context_line_list}

@anchor{context_line}
context_line
  : 'C' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}
@end example


@node Messages
@chapter Message list

@menu
* X0001::An unknown exception `%s' is found.
* X0002::An illegal message ID `%s' is found.
* X0003::Analysis processing has been stopped due to unrecoverable error. For the details, refer to `%s' and `%s'.
* X0004::An illegal message format `%s' is found.
* E0004::Corresponding #endif doesn't found.
* E0007::Syntax error is found in conditional expression token `%s'. Conditional expression evaluate as false.
* E0008::Syntax error is found in token `%s'.
* E0009::A header file of <%s> doesn't found.
* E0010::A header file of "%s" doesn't found.
* E0013::Statement cannot include in syntax.
* E0014::'&&' monadic operator to get a label address is GCC original add-on.
* E0015::'goto' statement with specified label address is GCC original add-on.
* E0016::Unfinished comment block is found.
* W0001::Nesting depth of round bracket `()' exceed 32. This program doesn't meet the strict ISO C90 standards of the term.
* W0002::Identifier and declaration of formal argument described separately in the definition of function `%s()' is old style.
* W0003::This switch statement doesn't have default label.
* W0007::'break' or 'return' statement doesn't found in the last 'case' or 'default' section.
* W0010::There is a side-effect in this ternary operator (conditional operator).
* W0013::'continue' statement is used in repetition statement.
* W0016::The field width of conversion specifier exceeds 509 characters in 'printf' function.
* W0017::The field width of conversion specifier exceeds 509 characters in 'scanf' function.
* W0018::This accuracy width of conversion specifier exceeds 509 characters.
* W0019::This pointer cast is danger because it delete const qualifier.
* W0021::This pointer cast is danger because it delete volatile qualifier.
* W0023::Arithmetic operation is being made by pointer variable.
* W0024::Increment or decrement is being made by pointer variable.
* W0025::`%s' is already included by this file directly.
* W0026::`%s' is already included by this file indirectly.
* W0027::Comparison operation is being made by pointer variable.
* W0028::Dereferencing a pointer constant of NULL.
* W0030::Arithmetic operation is being made by NULL pointer.
* W0031::A formal argument `%s' is not used in this function.
* W0033::A label of `%s:' is not used in this function. It might be removed.
* W0035::Right operand of ``&&' or `||' must arithmetic type or pointer type.
* W0036::The number of qualification operator exceeds 12.This program doesn't meet the strict ISO C90 standards of the term.
* W0037::Nest of structure or union exceeds 15. This program doesn't meet the strict ISO C90 standards of the term.
* W0038::The size of object `%s' exceeds 32767 bytes. This program doesn't meet the strict ISO C90 standards of the term.
* W0039::The number of local identifier in the block exceeds 127. This program doesn't meet the strict ISO C90 standards of the term.
* W0040::A bit field is declared without 'signed' or 'unsigned'.
* W0041::The number of member of structure or union exceeds 127.This program doesn't meet the strict ISO C90 standards of the term.
* W0042::The number of enumeration literal exceeds 127. This program doesn't meet the strict ISO C90 standards of the term.
* W0043::The initial value of the array is short of declared array's size. The residual array will be initialized by zero.
* W0049::Nest of control structure exceeds 15. This program doesn't meet the strict ISO C90 standards of the term.
* W0050::The number of 'case' label exceeds 257. This program doesn't meet the strict ISO C90 standards of the term.
* W0051::An external identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in linker property.
* W0052::An identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in compile property.
* W0053::Nest of `#include "%s"' exceeds 8.This program doesn't meet the strict ISO C90 standards of the term.
* W0054::The maximum number of `#if...' nest exceeds 8. This program doesn't meet the strict ISO C90 standards of the term.
* W0055::The number of macro definition exceeds 1024. This program doesn't meet the strict ISO C90 standards of the term.
* W0056::The number of formal argument of function-like macro exceeds 31.This program doesn't meet the strict ISO C90 standards of the term.
* W0057::The number of actual argument of function-like macro exceeds 31.This program doesn't meet the strict ISO C90 standards of the term.
* W0058::The number of characters of string literal exceeds 509.This program doesn't meet the strict ISO C90 standards of the term.
* W0059::Ctrl-M(^M) control character is found at the end of line.
* W0060::Ctrl-Z(^Z) control character is found in this file.
* W0061::`%s' is not actual reserved keyword. It will be considered as language extension and ignored.
* W0062::`__typeof__' is not supported ISO C standards. It will be considered as language extension.
* W0063::`__alignof__'is not supported ISO C standards. It will be considered as language extension..
* W0064::A binary integer literal is used. This is the language extension.
* W0065::Must not cast left operand of assignment operator.
* W0066::`main()' function must `int (void)' or `int (int, char *[])'.
* W0067::Directly access to the member of nested structure. This is the language extension.
* W0068::`.' is used to get access to bit. This is the language extension.
* W0069::`/*' is found in the beginning with `/*' comments. Nested comment doesn't allowed in ISO C standards.
* W0070::Included <%s> is not referenced in the translation unit. It can be removed.
* W0071::Included "%s" is not referenced in the translation unit. It can be removed.
* W0072::A character except for basic source character is used in header file name.
* W0073::No include guard in this include file.
* W0076::Hexadecimal constant without `U' or `u' suffix.
* W0077::Lower case `l' is added to integer or floating-point number.
* W0078::A function is declared without list of formal argument.
* W0079::This array cannot keep final character `\0' which initial value of string literal.
* W0080::A global object which const qualified is defined without explicitly initialized.
* W0081::A monadic operator `-' becomes unsigned type if it use 'unsigned int' type, 'unsigned long' type or 'unsigned long' type operand.
* W0082::Unary operator `-' is applied to an operand whose underlying type `%s' is unsigned.
* W0084::Left operand of this comma operator `,' doesn't described the statement which has side-effects.
* W0085::This statement doesn't have side-effects. It is highly possible that it having error.
* W0086::Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).
* W0087::The right side statement of comma operator is verbose statement which doesn't have side-effects.
* W0088::The right side statement of logical operator is verbose statement which doesn't have side-effects.
* W0093::This expression may cause division-by-zero.
* W0096::It divided by a constant expression which definitely zero.
* W0097::This expression must cause division-by-zero.
* W0100::The variable `%s' has not been reassigned since the initial value is assigned. It may be able to be defined as `const' with an initial value.
* W0101::An address of auto variable is substituted for a pointer which has a longer life. This program is danger.
* W0102::An address of auto variable is returned via formal argument to functions. This program is danger.
* W0103::An address of auto variable is returned as return value from a function. This program is danger.
* W0104::The value of formal argument `%s' is not change. It can be declarable with 'const'.
* W0105::The object which points the formal argument `%s' is not change. It can be declaring as pointer type which points const object.
* W0107::An address of auto variable is substituted for local pointer with 'static' option. This program is danger.
* W0108::An assignment-expression appears in the logical expression.
* W0109::The definition of this function doesn't found. It consider it was omitted, and insert `extern int %s()'.
* W0110::A variable number with floating-point type is used by loop counter in for statement.
* W0112::The statement of floating-point compares by equivalent operator.
* W0114::This control expression is not explicit logical operation.
* W0115::Unsigned left shift operator `<<' drop the high-order bit.
* W0116::Unsigned left shift operator `<<' can be drop high-order bit.
* W0117::`%s' has external-linkage without any prototype declarations.
* W0118::`%s' has external-linkage, but no prototype declaration is in header files.
* W0119::An implicit type conversion from char to signed char.
* W0120::An implicit type conversion from char to unsigned char.
* W0121::An implicit type conversion from char to signed short.
* W0122::An implicit type conversion from char to unsigned short.
* W0123::An implicit type conversion from char to signed int.
* W0124::An implicit type conversion from char to unsigned int.
* W0125::An implicit type conversion from char to signed long.
* W0126::An implicit type conversion from char to unsigned long.
* W0127::An implicit type conversion from char to float.
* W0128::An implicit type conversion from char to double.
* W0129::An implicit type conversion from char to long double.
* W0130::An implicit type conversion from char to signed long long.
* W0131::An implicit type conversion from char to unsigned long long.
* W0132::An implicit type conversion from unsigned char to char.
* W0133::An implicit type conversion from signed char to char.
* W0134::An implicit type conversion from signed short to char.
* W0135::An implicit type conversion from unsigned short to char.
* W0136::An implicit type conversion from signed int to char.
* W0137::An implicit type conversion from unsigned int to char.
* W0138::An implicit type conversion from signed long to char.
* W0139::An implicit type conversion from unsigned long to char.
* W0140::An implicit type conversion from signed long long to char.
* W0141::An implicit type conversion from unsigned long long to char.
* W0142::An implicit type conversion from unsigned char to signed char.
* W0143::An implicit type conversion from unsigned short to signed char.
* W0144::An implicit type conversion from unsigned short to signed short.
* W0145::An implicit type conversion from unsigned int to signed char.
* W0146::An implicit type conversion from unsigned int to signed short.
* W0147::An implicit type conversion from unsigned int to signed int.
* W0148::An implicit type conversion from unsigned long to signed char.
* W0149::An implicit type conversion from unsigned long to signed short.
* W0150::An implicit type conversion from unsigned long to signed int.
* W0151::An implicit type conversion from unsigned long to signed long.
* W0152::An implicit type conversion from unsigned long long to signed char.
* W0153::An implicit type conversion from unsigned long long to signed short.
* W0154::An implicit type conversion from unsigned long long to signed int.
* W0155::An implicit type conversion from unsigned long long to signed long.
* W0156::An implicit type conversion from unsigned long long to signed long long.
* W0157::An implicit type conversion from signed char to unsigned char.
* W0158::An implicit type conversion from signed char to unsigned short.
* W0159::An implicit type conversion from signed char to unsigned int.
* W0160::An implicit type conversion from signed char to unsigned long.
* W0161::An implicit type conversion from signed short to unsigned char.
* W0162::An implicit type conversion from signed short to unsigned short.
* W0163::An implicit type conversion from signed short to unsigned int.
* W0164::An implicit type conversion from signed short to unsigned long.
* W0165::Implicit conversion from `signed int' to `unsigned char'.
* W0166::An implicit type conversion from signed int to unsigned short.
* W0167::Implicit conversion from `signed int' to `unsigned int'.
* W0168::An implicit type conversion from signed int to unsigned long.
* W0169::An implicit type conversion from signed long to unsigned char.
* W0170::An implicit type conversion from signed long to unsigned short.
* W0171::An implicit type conversion from signed long to unsigned int.
* W0172::An implicit type conversion from signed long to unsigned long.
* W0173::An implicit type conversion from signed char to unsigned long long.
* W0174::An implicit type conversion from signed short to unsigned long long.
* W0175::An implicit type conversion from signed int to unsigned long long.
* W0176::An implicit type conversion from signed long to unsigned long long.
* W0177::An implicit type conversion from signed long long to unsigned char.
* W0178::An implicit type conversion from signed long long to unsigned short.
* W0179::An implicit type conversion from signed long long to unsigned int.
* W0180::An implicit type conversion from signed long long to unsigned long.
* W0181::An implicit type conversion from signed long long to unsigned long long.
* W0182::An implicit type conversion from unsigned char to float.
* W0183::An implicit type conversion from unsigned char to double.
* W0184::An implicit type conversion from unsigned char to long double.
* W0185::An implicit type conversion from signed char to float.
* W0186::An implicit type conversion from signed char to double.
* W0187::An implicit type conversion from signed char to long double.
* W0188::An implicit type conversion from signed short to float.
* W0189::An implicit type conversion from signed short to double.
* W0190::An implicit type conversion from signed short to long double.
* W0191::An implicit type conversion from unsigned short to float.
* W0192::An implicit type conversion from unsigned short to double.
* W0193::An implicit type conversion from unsigned short to long double.
* W0194::An implicit type conversion from signed int to float.
* W0195::An implicit type conversion from signed int to double.
* W0196::An implicit type conversion from signed int to long double.
* W0197::An implicit type conversion from unsigned int to float.
* W0198::An implicit type conversion from unsigned int to double.
* W0199::An implicit type conversion from unsigned int to long double.
* W0200::An implicit type conversion from signed long to float.
* W0201::An implicit type conversion from signed long to double.
* W0202::An implicit type conversion from signed long to long double.
* W0203::An implicit type conversion from unsigned long to float.
* W0204::An implicit type conversion from unsigned long to double.
* W0205::An implicit type conversion from unsigned long to long double.
* W0206::An implicit type conversion from signed long long to float.
* W0207::An implicit type conversion from signed long long to double.
* W0208::An implicit type conversion from signed long long to long double.
* W0209::An implicit type conversion from unsigned long long to float.
* W0210::An implicit type conversion from unsigned long long to double.
* W0211::An implicit type conversion from unsigned long long to long double.
* W0212::An implicit type conversion from float to char.
* W0213::An implicit type conversion from float to signed char.
* W0214::An implicit type conversion from float to unsigned char.
* W0215::An implicit type conversion from float to signed short.
* W0216::An implicit type conversion from float to unsigned short.
* W0217::An implicit type conversion from float to signed int.
* W0218::An implicit type conversion from float to unsigned int.
* W0219::An implicit type conversion from float to signed long.
* W0220::An implicit type conversion from float to unsigned long.
* W0221::An implicit type conversion from double to char.
* W0222::An implicit type conversion from double to signed char.
* W0223::An implicit type conversion from double to unsigned char.
* W0224::An implicit type conversion from double to signed short.
* W0225::An implicit type conversion from double to unsigned short.
* W0226::An implicit type conversion from double to signed int.
* W0227::An implicit type conversion from double to unsigned int.
* W0228::An implicit type conversion from double to signed long.
* W0229::An implicit type conversion from double to unsigned long.
* W0230::An implicit type conversion from long double to char.
* W0231::An implicit type conversion from long double to signed char.
* W0232::An implicit type conversion from long double to unsigned char.
* W0233::An implicit type conversion from long double to signed short.
* W0234::An implicit type conversion from long double to unsigned short.
* W0235::An implicit type conversion from long double to signed int.
* W0236::An implicit type conversion from long double to unsigned int.
* W0237::An implicit type conversion from long double to signed long.
* W0238::An implicit type conversion from long double to unsigned long.
* W0239::An implicit type conversion from float to signed long long.
* W0240::An implicit type conversion from float to unsigned long long.
* W0241::An implicit type conversion from double to signed long long.
* W0242::An implicit type conversion from double to unsigned long long.
* W0243::An implicit type conversion from long double to signed long long.
* W0244::An implicit type conversion from long double to unsigned long long.
* W0245::An implicit type conversion from unsigned char to signed short.
* W0246::Implicit conversion from `unsigned char' to `signed int'.
* W0247::An implicit type conversion from unsigned char to signed long.
* W0248::An implicit type conversion from unsigned short to signed int.
* W0249::An implicit type conversion from unsigned short to signed long.
* W0250::An implicit type conversion from unsigned int to signed long.
* W0251::An implicit type conversion from unsigned char to signed long long.
* W0252::An implicit type conversion from unsigned short to signed long long.
* W0253::An implicit type conversion from unsigned int to signed long long.
* W0254::An implicit type conversion from unsigned long to signed long long.
* W0255::A value of char type is returned from `signed char %s()' function.
* W0256::A value of char type is returned from `unsigned char %s()' function.
* W0257::A value of char type is returned from `signed short %s()' function.
* W0258::A value of char type is returned from `unsigned short %s()' function.
* W0259::A value of char type is returned from `signed int %s()' function.
* W0260::A value of char type is returned from `unsigned int %s()' function.
* W0261::A value of char type is returned from `signed long %s()' function.
* W0262::A value of char type is returned from `unsigned long %s()' function.
* W0263::A value of char type is returned from `float %s()' function.
* W0264::A value of char type is returned from `double %s()' function.
* W0265::A value of char type is returned from `long double %s()' function.
* W0266::A value of char type is returned from `signed long long %s()' function.
* W0267::A value of char type is returned from `unsigned long long %s()' function.
* W0268::A value of unsigned char type is returned from `char %s()' function.
* W0269::A value of signed char type is returned from `char %s()' function.
* W0270::A value of signed short type is returned from `char %s()' function.
* W0271::A value of unsigned short type is returned from `char %s()' function.
* W0272::A value of signed int type is returned from `char %s()' function.
* W0273::A value of unsigned int type is returned from `char %s()' function.
* W0274::A value of signed long type is returned from `char %s()' function.
* W0275::A value of unsigned long type is returned from `char %s()' function.
* W0276::A value of signed long long type is returned from `char %s()' function.
* W0277::A value of unsigned long long type is returned from `char %s()' function.
* W0278::A value of unsigned char type is returned from `signed char %s()' function.
* W0279::A value of unsigned short type is returned from `signed char %s()' function.
* W0280::A value of unsigned short type is returned from `signed short %s()' function.
* W0281::A value of unsigned int type is returned from `signed char %s()' function.
* W0282::A value of unsigned int type is returned from `signed short %s()' function.
* W0283::A value of unsigned int type is returned from `signed int %s()' function.
* W0284::A value of unsigned long type is returned from `signed char %s()' function.
* W0285::A value of unsigned long type is returned from `signed short %s()' function.
* W0286::A value of unsigned long type is returned from `signed int %s()' function.
* W0287::A value of unsigned long type is returned from `signed long %s()' function.
* W0288::A value of unsigned long long type is returned from `signed char %s()' function.
* W0289::A value of unsigned long long type is returned from `signed short %s()' function.
* W0290::A value of unsigned long long type is returned from `signed int %s()' function.
* W0291::A value of unsigned long long type is returned from `signed long %s()' function.
* W0292::A value of unsigned long long type is returned from `signed long long %s()' function.
* W0293::A value of signed char type is returned from `unsigned char %s()' function.
* W0294::A value of signed char type is returned from `unsigned short %s()' function.
* W0295::A value of signed char type is returned from `unsigned int %s()' function.
* W0296::A value of signed char type is returned from `unsigned long %s()' function.
* W0297::A value of signed short type is returned from `unsigned char %s()' function.
* W0298::A value of signed short type is returned from `unsigned short %s()' function.
* W0299::A value of signed short type is returned from `unsigned int %s()' function.
* W0300::A value of signed short type is returned from `unsigned long %s()' function.
* W0301::A value of signed int type is returned from `unsigned char %s()' function.
* W0302::A value of signed int type is returned from `unsigned short %s()' function.
* W0303::A value of signed int type is returned from `unsigned int %s()' function.
* W0304::A value of signed int type is returned from `unsigned long %s()' function.
* W0305::A value of signed long type is returned from `unsigned char %s()' function.
* W0306::A value of signed long type is returned from `unsigned short %s()' function.
* W0307::A value of signed long type is returned from `unsigned int %s()' function.
* W0308::A value of signed long type is returned from `unsigned long %s()' function.
* W0309::A value of signed char type is returned from `unsigned long long %s()' function.
* W0310::A value of signed short type is returned from `unsigned long long %s()' function.
* W0311::A value of signed int type is returned from `unsigned long long %s()' function.
* W0312::A value of signed long type is returned from `unsigned long long %s()' function.
* W0313::A value of signed long long type is returned from `unsigned char %s()' function.
* W0314::A value of signed long long type is returned from `unsigned short %s()' function.
* W0315::A value of signed long long type is returned from `unsigned int %s()' function.
* W0316::A value of signed long long type is returned from `unsigned long %s()' function.
* W0317::A value of signed long long type is returned from `unsigned long long %s()' function.
* W0318::A value of unsigned char type is returned from `float %s()' function.
* W0319::A value of unsigned char type is returned from `double %s()' function.
* W0320::A value of unsigned char type is returned from `long double %s()' function.
* W0321::A value of signed char type is returned from `float %s()' function.
* W0322::A value of signed char type is returned from `double %s()' function.
* W0323::A value of signed char type is returned from `long double %s()' function.
* W0324::A value of signed short type is returned from `float %s()' function.
* W0325::A value of signed short type is returned from `double %s()' function.
* W0326::A value of signed short type is returned from `long double %s()' function.
* W0327::A value of unsigned short type is returned from `float %s()' function.
* W0328::A value of unsigned short type is returned from `double %s()' function.
* W0329::A value of unsigned short type is returned from `long double %s()' function.
* W0330::A value of signed int type is returned from `float %s()' function.
* W0331::A value of signed int type is returned from `double %s()' function.
* W0332::A value of signed int type is returned from `long double %s()' function.
* W0333::A value of unsigned int type is returned from `float %s()' function.
* W0334::A value of unsigned int type is returned from `double %s()' function.
* W0335::A value of unsigned int type is returned from `long double %s()' function.
* W0336::A value of signed long type is returned from `float %s()' function.
* W0337::A value of signed long type is returned from `double %s()' function.
* W0338::A value of signed long type is returned from `long double %s()' function.
* W0339::A value of unsigned long type is returned from `float %s()' function.
* W0340::A value of unsigned long type is returned from `double %s()' function.
* W0341::A value of unsigned long type is returned from `long double %s()' function.
* W0342::A value of signed long long type is returned from `float %s()' function.
* W0343::A value of signed long long type is returned from `double %s()' function.
* W0344::A value of signed long long type is returned from `long double %s()' function.
* W0345::A value of unsigned long long type is returned from `float %s()' function.
* W0346::A value of unsigned long long type is returned from `double %s()' function.
* W0347::A value of unsigned long long type is returned from `long double %s()' function.
* W0348::A value of float type is returned from `char %s()' function.
* W0349::A value of float type is returned from `signed char %s()' function.
* W0350::A value of float type is returned from `unsigned char %s()' function.
* W0351::A value of float type is returned from `signed short %s()' function.
* W0352::A value of float type is returned from `unsigned short %s()' function.
* W0353::A value of float type is returned from `signed int %s()' function.
* W0354::A value of float type is returned from `unsigned int %s()' function.
* W0355::A value of float type is returned from `signed long %s()' function.
* W0356::A value of float type is returned from `unsigned long %s()' function.
* W0357::A value of double type is returned from `char %s()' function.
* W0358::A value of double type is returned from `signed char %s()' function.
* W0359::A value of double type is returned from `unsigned char %s()' function.
* W0360::A value of double type is returned from `signed short %s()' function.
* W0361::A value of double type is returned from `unsigned short %s()' function.
* W0362::A value of double type is returned from `signed int %s()' function.
* W0363::A value of double type is returned from `unsigned int %s()' function.
* W0364::A value of double type is returned from `signed long %s()' function.
* W0365::A value of double type is returned from `unsigned long %s()' function.
* W0366::A value of long double type is returned from `char %s()' function.
* W0367::A value of long double type is returned from `signed char %s()' function.
* W0368::A value of long double type is returned from `unsigned char %s()' function.
* W0369::A value of long double type is returned from `signed short %s()' function.
* W0370::A value of long double type is returned from `unsigned short %s()' function.
* W0371::A value of long double type is returned from `signed int %s()' function.
* W0372::A value of long double type is returned from `unsigned int %s()' function.
* W0373::A value of long double type is returned from `signed long %s()' function.
* W0374::A value of long double type is returned from `unsigned long %s()' function.
* W0375::A value of float type is returned from `signed long long %s()' function.
* W0376::A value of float type is returned from `unsigned long long %s()' function.
* W0377::A value of double type is returned from `signed long long %s()' function.
* W0378::A value of double type is returned from `unsigned long long %s()' function.
* W0379::A value of long double type is returned from `signed long long %s()' function.
* W0380::A value of long double type is returned from `unsigned long long %s()' function.
* W0381::A value of signed short type is returned from `signed char %s()' function.
* W0382::A value of unsigned short type is returned from `unsigned char %s()' function.
* W0383::A value of signed int type is returned from `signed char %s()' function.
* W0384::A value of signed int type is returned from `signed short %s()' function.
* W0385::A value of unsigned int type is returned from `unsigned char %s()' function.
* W0386::A value of unsigned int type is returned from `unsigned short %s()' function.
* W0387::A value of signed long type is returned from `signed char %s()' function.
* W0388::A value of signed long type is returned from `signed short %s()' function.
* W0389::A value of signed long type is returned from `signed int %s()' function.
* W0390::A value of unsigned long type is returned from `unsigned char %s()' function.
* W0391::A value of unsigned long type is returned from `unsigned short %s()' function.
* W0392::A value of unsigned long type is returned from `unsigned int %s()' function.
* W0393::A value of signed long long type is returned from `signed char %s()' function.
* W0394::A value of signed long long type is returned from `signed short %s()' function.
* W0395::A value of signed long long type is returned from `signed int %s()' function.
* W0396::A value of signed long long type is returned from `signed long %s()' function.
* W0397::A value of unsigned long long type is returned from `unsigned char %s()' function.
* W0398::A value of unsigned long long type is returned from `unsigned short %s()' function.
* W0399::A value of unsigned long long type is returned from `unsigned int %s()' function.
* W0400::A value of unsigned long long type is returned from `unsigned long %s()' function.
* W0401::A value of unsigned char type is returned from `signed short %s()' function.
* W0402::A value of unsigned char type is returned from `signed int %s()' function.
* W0403::A value of unsigned char type is returned from `signed long %s()' function.
* W0404::A value of unsigned short type is returned from `signed int %s()' function.
* W0405::A value of unsigned short type is returned from `signed long %s()' function.
* W0406::A value of unsigned int type is returned from `signed long %s()' function.
* W0407::A value of unsigned char type is returned from `signed long long %s()' function.
* W0408::A value of unsigned short type is returned from `signed long long %s()' function.
* W0409::A value of unsigned int type is returned from `signed long long %s()' function.
* W0410::A value of unsigned long type is returned from `signed long long %s()' function.
* W0411::The initialization of enumeration should be only the starting, whole or not at all.
* W0413::The body of control statement is unenclosed by curly brace `@{@}' block.
* W0414::Body of the controlling statement in a line is not enclosed by `@{@}'.
* W0421::Value of the dereferencing pointer must be NULL.
* W0422::Value of the dereferencing pointer may be NULL.
* W0423::Arithmetic operation is being made to the pointer which its value will be NULL.
* W0424::Arithmetic operation is being made to the pointer which its value might be NULL.
* W0425::There are several definitions or statements in a line.
* W0431::This line begins at more left than previous lines of the same indentation level.
* W0432::Indentation of this line does not comply with the project's indent style.
* W0440::An indent of this close bracket `@}' is not correspond to the open bracket `@{'.
* W0441::The type of integer literal which doesn't have a suffix is not int type.
* W0442::A function-like macro is defined.
* W0443::This function-like macro might be replaced with a function.
* W0444::`#'operator and `##'operator is used in a macro definition.
* W0445::Multiple `##'operator is used in a macro definition.
* W0446::The result value of assignment operation is used.
* W0447::A comma operator is used except 'for' statement.
* W0456::An object or a function `%s which has external coupling is defined in a header file.
* W0457::The return value doesn't define explicitly in the function declaration or definition. It defined as 'int' implicitly.
* W0458::The type doesn't define explicitly in the object declaration or definition. It defined as 'int' implicitly.
* W0459::A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
* W0460::A value of variable `%s' wouldn't set when this expression is evaluated.
* W0461::A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
* W0462::A pointer which the value will probably not set is used for the actual argument of the function.
* W0477::There are unpaired `[]',`()',`@{@}' in macro definition.
* W0478::This macro defines scraps of unrecognized codes.
* W0479::This macro definition might be replaced with 'typedef' declaration.
* W0480::This macro defines keyword of control statement or punctuator.
* W0481::This macro defines the block around by `@{@}'.
* W0482::This macro defines either type specifier.
* W0483::This macro defines the pair of storage class specifier and type specifier.
* W0488::A function call `()', array's index operation `[]', or structure/union operation `->' or `.' are used with && or ||. It had better clear the coupling by using `()'.
* W0489::A monadic operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
* W0490::A binary operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
* W0491::The same identifier name `%s' is also used in the declaration of other namespace.
* W0492::The same identifier name `%s' is also used in the member of structure/union, label, tag or normal identifier.
* W0493::The value of structure or union is passed as the actual argument of the function.
* W0495::operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
* W0496::A ternary operator is used several times. It had better clear the coupling by using `()'.
* W0497::Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
* W0498::The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
* W0499::The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
* W0500::The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
* W0501::A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
* W0502::A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
* W0508::There's a side effect at the right operand of `&&' or `||'operator.
* W0511::C++ style comment of `//' is used.
* W0512::The result of `++' or `--' operator is used in the statement.
* W0525::A field named 1bit is declared by signed type.
* W0528::This macro defines octal constant value.
* W0529::An octal literal is used.
* W0530::An octal escape sequence is used in a character constant or a string literal.
* W0532::'break' statement is used to exits 'case' or 'default' section, but it's not described at the end of 'case' section.
* W0534::A control variable `%s' is not initialized in this 'for' statement.
* W0535::A comma operator is used in a 'for' statement.
* W0538::This 'default' label is not final label in this 'switch' statement.
* W0540::A function which the blank formal argument list is declared. `void' is omitted.
* W0541::Inline assembly code should be encapsulated by macro.
* W0542::There are identifiers in the part of formal argument in a function declaration.
* W0543::The identifier of formal argument in this function declaration is different from the past declaration of it.
* W0544::The identifier of formal argument in the function declaration is different from the declaration of function pointer.
* W0546::There is 'case' or 'default' label of switch statement in a nested block.
* W0549::A formal argument of macro doesn't enclosed by `()'.
* W0551::An union type specifier is defined.
* W0552::An union type object is defined.
* W0553::A pointer points to the function cast to other function pointer type.
* W0554::An actual argument `%s' in `#pragma' is unrecognized. This `#pragma' command will be ignored.
* W0555::This function is called recursive with indirectly.
* W0556::The function which includes this call is called recursively.
* W0559::The operand of `!' operator is the expression of bit operation or arithmetic operation.
* W0560::The operand of `~' operator is boolean type expression.
* W0561::The meaning of `*p++' is `*(p++)'. It is not `(*p)++'. `*' operator is verbose.
* W0562::There are verbose `@{@}' in the initializer.
* W0563::If it jumps from outside of this block to `%s' label,the local variable will not be initialized.
* W0564::If this 'goto' statement jumps to `%s' label,local variable will not be initialized.
* W0565::A volatile integer type cast to volatile pointer type and vice versa.
* W0566::A volatile integer type cast to function pointer type and vice versa.
* W0567::A volatile integer type cast to pointer to object and vice versa.
* W0568::The result of left shift operation against the signed constant expression value is undefined.
* W0569::The result of left shift operation against the signed expression value is undefined.
* W0570::This signed left shift operation may make undefined value.
* W0571::The result of right shift operation against the signed data is a possibility the both logical shift and arithmetic shift by implementation.
* W0572::Bitwise operation of signed value causes implementation-defined behavior.
* W0573::A `-' character in scanset in `[]' is implementation defined.
* W0574::The character except for basic source character is used in the character constant.
* W0575::The character except for basic source character is used in the string literal.
* W0576::The character except for basic source character is used in the comment of source file `%s'.
* W0577::The character except for basic source character is used in preprocessing directive of source file `%s'.
* W0578::A generic integer value of the compound expression typed `%s' is implicitly converted into a new value of bigger type `%s'.
* W0579::A generic integer value of the compound expression typed `%s' is explicitly converted into a new value of bigger type `%s'.
* W0580::An address of local static variable is substituted for a pointer which has a wider scope.
* W0581::The number or type of actual argument is different from the past.
* W0582::The number or type of actual argument is different from the function prototype declaration at the following.
* W0583::The number or type of actual argument is different from the function declaration at the following.
* W0584::The type of %s actual argument is different from the type of formal argument in function definition.
* W0585::A control variable `%s' doesn't appear increment expression.
* W0586::A typedef `%s' is declared in more than one place.
* W0589::An object `%s' is only referenced by function `%s' in the defined translation unit.
* W0591::A function `%s' is only referenced by the defined translation unit.
* W0593::An object `%s' is only referenced by the defined translation unit.
* W0597::`%s' is modified more than once between the side-effects completion point. The evaluation order is undefined.
* W0598::`%s' might be modified more than once between the side-effects completion point. The evaluation order is undefined.
* W0599::`%s' is modified and referenced between the side-effects completion point. The evaluation order is undefined.
* W0600::`%s' is modified and might be referenced between the side-effects completion point. The evaluation order is undefined.
* W0605::Multiple break-statements appear to break the same iteration.
* W0606::An union has a member which type is floating-point.
* W0607::An integer expression which the value which the value is minus converted to unsigned type.
* W0608::An integer expression which the value might be minus converted to unsigned type.
* W0609::This logical expression always makes true.
* W0610::This logical expression always makes false.
* W0611::The value of this 'for' control expression is always true.
* W0612::The value of this 'if' conditional expression is always true.
* W0613::This controlling expression always makes false.
* W0614::The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
* W0622::A function is declared in the block scope.
* W0623::An external coupling object is declared in the block scope.
* W0624::There is '#define' or '#undef' in a block.
* W0625::`%s' is using in the declaration or definition of external coupling. But its 'typedef' doesn't declare in the header file.
* W0626::A wide character or wide string literal is used.
* W0627::There is a dead letter (only `;') in the following other code.
* W0628::A function `%s' is defined, but this is not used in this project.
* W0629::`%s()' has internal-linkage, but it is never called in this translation-unit.
* W0632::Using ' or " characters in `#include <%s>' directive makes undefined behavior.
* W0633::Using ' character in `#include "%s"' directive makes undefined behavior.
* W0634::`\' is used in `#include' line. `/' is recommended for the path delimiter.
* W0635::The type doesn't match with %sth conversion specifier and the corresponding actual argument.
* W0636::An actual argument doesn't exist correspond to %sth conversion specifier.
* W0637::There is more actual argument than the number of conversion specifier in function call.
* W0638::This function call requiring at least one actual argument.
* W0639::%sth conversion specifier doesn't match with corresponding type of actual argument.
* W0640::The actual argument of scanf function have to pass the object pointer to store the data.
* W0641::Floating-point number type cast to pointer to object and vice versa.
* W0642::Address derivation from the object declared as `register' is prohibited.
* W0643::This string literal constituted by a macro is illegal form unenclosed by `"'. `#'operator may apply to actual argument which has '\' at the end.
* W0644::A value in void statement is going to use. 'void' statement doesn't have a value.
* W0645::'void' type cannot use in the type of formal argument.
* W0646::A normal string literal and a wide string literal are contiguous.
* W0649::A right operand value of shift operand is negative constant value. This result is undefined.
* W0650::A value of the right operand in a shift expression is bigger than the bit size of the left operand type `%s'. This result is undefined.
* W0653::The initial value of an array, structure or union is not enclosed by `@{@}'.
* W0654::The initializer of structure or union must the value of the same structure type or union type.
* W0655::This is bit field statement which the size is undefined.
* W0656::%sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
* W0657::An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
* W0658::An invalid flag is used in %sth conversion specifier of `o'.
* W0659::An invalid flag is used in %sth conversion specifier of `u'.
* W0660::An invalid flag is used in %sth conversion specifier of `x'.
* W0661::An invalid flag is used in %sth conversion specifier of `X'.
* W0662::An invalid flag is used in %sth conversion specifier of `f'.
* W0663::An invalid flag is used in %sth conversion specifier of `e'.
* W0664::An invalid flag is used in %sth conversion specifier of `E'.
* W0665::An invalid flag is used in %sth conversion specifier of `g'.
* W0666::An invalid flag is used in %sth conversion specifier of `G'.
* W0667::An invalid flag is used in %sth conversion specifier of `c'.
* W0668::An invalid flag is used in %sth conversion specifier of `%%'.
* W0669::An invalid flag is used in %sth conversion specifier of `s'.
* W0670::An invalid flag is used in %sth conversion specifier of `n'.
* W0671::An invalid flag is used in %sth conversion specifier of `p'.
* W0672::An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
* W0673::%sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
* W0674::An invalid flag is used in %sth conversion specifier of `d/i/n'.
* W0675::An invalid flag is used in %sth conversion specifier of `o'.
* W0676::An invalid flag is used in %sth conversion specifier of `u'.
* W0677::An invalid flag is used in %sth conversion specifier of `x/X'.
* W0678::An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
* W0679::An invalid flag is used in %sth conversion specifier of `s'.
* W0680::An invalid flag is used in %sth conversion specifier of `p'.
* W0681::An invalid flag is used in %sth conversion specifier of `%%'.
* W0682::An invalid flag is used in %sth conversion specifier of `['.
* W0683::An invalid flag is used in %sth conversion specifier of `c'.
* W0684::An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
* W0685::A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
* W0686::The same characters are described in scanset (characters enclosed by `[]').
* W0687::#undef is using to delete #defined operator.
* W0688::There is no line number in 1 to 32767 ranges after #line directive.
* W0689::#line directive syntax doesn't match `#line integer constant \"string\"'.
* W0690::No line number after #line directive.
* W0691::The result of `##' operator is not valid preprocessing token.
* W0692::A function-like macro `%s' doesn't given an actual argument.
* W0693::A function-like macro is called by actual argument which its definition is smaller.
* W0694::'assert' macro is inhibited to call the function named `assert'. This result is undefined.
* W0695::If #undef the 'assert' macro, and enable to call its name function, the result is undefined.
* W0696::This macro using in `#if...' is undefined.
* W0697::There is a path with exits with an implicit `return;' statement in a function `%s' which has a return value.
* W0698::A `return;' statement is found in a function `%s' which has a return value.
* W0699::The return value of function `%s()' is unspecified. The return value is implicitly int. There is no expression to set the value to 'return' statement.
* W0700::The return value of function `%s()' is unspecified. The return value is implicitly int. There is no 'return' statement to return value.
* W0703::The tag `%s' hides the declaration of same identifier which has wider scope.
* W0704::This `%s' declaration hides the declaration of same identifier which has wider scope.
* W0705::This non-constant array subscript may cause out-of-range access.
* W0707::This constant array subscript must cause out-of-range access.
* W0708::A value of control variable `%s' in 'for' statement is changed in the body of repetition.
* W0711::Right operand of relational operator is a substantive 'boolean' expression.
* W0712::Left operand of relational operator is a substantive 'boolean' expression.
* W0713::Both sides of relational operator is substantive 'boolean' expressions.
* W0714::Both sides of `&' operator is substantive 'boolean' expressions.
* W0715::Both sides of `|' operator is substantive 'boolean' expressions.
* W0716::A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.
* W0717::A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
* W0718::A bit operator or right side operand of arithmetic operator is a substantive 'boolean' expression.
* W0719::A value of the right operand in a shift expression is bigger than the bit size of the left operand underlying type `%s'.
* W0720::The value with floating-point type doesn't fit in the range of converted type.
* W0721::This volatile integer type doesn't have enough size to keep pointer value.
* W0722::A value of signed statement is overflow.
* W0723::A value of signed statement might be overflow.
* W0724::An unrecognized preprocessing directive is ignored by conditional include directive.
* W0726::A function `%s()' which return value is declared as qualified void type, `return expression;' is found.
* W0727::The value not part of the enumeration type is used.
* W0728::Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.
* W0729::An enumeration literal of the other enumeration type is substituted for enumeration type object.
* W0730::A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.
* W0731::The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.
* W0732::Both operand of `&&'operator is bit operator or arithmetic operator.
* W0733::Both operand of `||'operator is bit operator or arithmetic operator.
* W0734::A left operand of logical operator is bit operator or arithmetic operator.
* W0735::A right operand of logical operator is the expression of bit operator or arithmetic operator.
* W0736::A static variable `%s' which declared in file scope is read and write in one function only.
* W0737::The content of `enum %s' is unknown. The enumeration tag is declared without define the content.
* W0738::An implicit type conversion from positive integer constant expression to smaller unsigned type. The value is rounded.
* W0739::The result of unsigned subtraction in constant expression is minus.
* W0740::The result of unsigned addition in constant expression beyond the maximum.
* W0741::The result of unsigned multiplication in constant expression beyond the maximum.
* W0742::A negative integer constant expression converted to unsigned type.
* W0743::The value of integer constant expression beyond the range of might be expressed with converted signed type.
* W0744::The value of this control expression is constant value to be false. This control statement is not run.
* W0745::This non-constant array subscript may cause out-of-range access.
* W0747::An implicit type conversion from signed short to signed char.
* W0748::An implicit type conversion from unsigned short to unsigned char.
* W0749::An implicit type conversion from signed int to signed char.
* W0750::An implicit type conversion from signed int to signed short.
* W0751::An implicit type conversion from unsigned int to unsigned char.
* W0752::An implicit type conversion from unsigned int to unsigned short.
* W0753::An implicit type conversion from signed long to signed char.
* W0754::An implicit type conversion from signed long to signed short.
* W0755::An implicit type conversion from signed long to signed int.
* W0756::An implicit type conversion from unsigned long to unsigned char.
* W0757::An implicit type conversion from unsigned long to unsigned short.
* W0758::An implicit type conversion from unsigned long to unsigned int.
* W0759::An implicit type conversion from signed long long to signed char.
* W0760::An implicit type conversion from signed long long to signed short.
* W0761::An implicit type conversion from signed long long to singed int.
* W0762::An implicit type conversion from signed long long to signed long.
* W0763::An implicit type conversion from unsigned long long to unsigned char.
* W0764::An implicit type conversion from unsigned long long to unsigned short.
* W0765::An implicit type conversion from unsigned long long to unsigned int.
* W0766::An implicit type conversion from unsigned long long to unsigned long.
* W0767::An implicit type conversion from double to float.
* W0768::An implicit type conversion from long double to float.
* W0769::An implicit type conversion from long double to double.
* W0770::A declaration of identifier `%s' which has external coupling exists more than one.
* W0771::A global identifier `%s' is declared in more than one file.
* W0774::A value of double type is returned from `float %s()'function.
* W0775::A value of long double type is returned from `float %s()' function.
* W0776::A value of long double type is returned from `double %s()'function.
* W0777::An implicit type conversion from compound expression of float to double.
* W0778::An implicit type conversion from compound expression of float to long double.
* W0779::An implicit type conversion from compound expression of to long double.
* W0780::Unsigned left shift operator `<<' in constant expression truncate non-zero high-order bit.
* W0781::This 'switch' statement have only one path. It's verbose.
* W0783::Cast is being made including the pointer point to incomplete type. This program is not portable.
* W0784::The nonstandard escape sequence is used.
* W0785::This declaration of `%s' is different from a former declaration.
* W0786::A bit field which having the type of except 'int', 'signed int' or 'unsigned int' doesn't support in ISO C standards.
* W0787::A type of `%s' is different from the past declaration in the different scope.
* W0788::A type of `%s' is different from the past declaration in the same scope.
* W0789::A type of `%s' is different from the past declaration in the wider scope.
* W0790::An global object or a function `%s' is declared in more than one file.
* W0791::An global object or a function `%s' is declared in more than one file.
* W0792::A floating point type object cast to function pointer and vice versa.
* W0793::A function pointer cast to pointer to point an object and vice versa.
* W0794::Left shift operation of signed value causes implementation-defined behavior.
* W0795::The number of an actual argument in function call is smaller than the number of a formal argument in the function prototype declaration.
* W0796::The number of an actual argument in function call is bigger than the number of a formal argument in the function prototype declaration.
* W0797::The number of an actual argument in function call is different from the number of a formal argument in the function declaration.
* W0798::Must not use the value with incomplete union object.
* W0799::Must not use the value with incomplete structure object.
* W0800::`%s' is incomplete type which doesn't have a linkage.This is undefined.
* W0801::This structure  or union doesn't have a named member.
* W0802::A form of after `#include' preprocessing directive is not <file name> nor "file name".
* W0803::A preprocessing directive is described in actual argument of function-like macro.
* W0804::The 'defined' syntax is not `defined (identifier)' nor `defined identifier'.
* W0805::An identifier to be actual argument doesn't find in `defined'.
* W0806::It is trying to define a macro named `defined'.
* W0807::It is trying to delete pre-defined macro `%s'.
* W0808::It is trying to redefine pre-defined macro `%s'.
* W0809::An identifier `%s' is reserved by the library.
* W0810::`@{@}' is required to clarify this structure of `if-if-else' statement.
* W0811::The `defined' token which the expanded result of this macro doesn't allowed.
* W0827::An initial value of nested structure's element doesn't enclosed in curly brace `@{ @}'.
* W0828::An initial value of nested array's element doesn't enclosed in curly brace `@{ @}'.
* W0830::There is comma `,' at the end of the enumerator list.
* W0831::This is language extension for inline assembly. It will be ignored between #asm and #endasm.
* W0832::An inline assembly syntax is using. This is the language extension. This code will be ignored.
* W0833::A suffix 'LL' is using.
* W0834::A long long type is using.
* W0835::A macro which receives variable argument is defined.
* W0947::String literal is specified directly.
* W0948::Character constant %s is specified directly.
* W0949::A value `%s' is used directly for size definition of bit field.
* W0950::Integer constant `%s' is specified directly as an array size.
* W1026::%sth actual argument is not object type.
* W1027::A base type of array is function type. This is meaningless.
* W1028::A base type of array is an array with unknown size. Incomplete type of array will not build.
* W1029::A base type of array is an obscure structure or union. Incomplete type of array will not build.
* W1030::A label `%s' is used more than two times in this function.
* W1031::An Object `%s' is declared both external coupling and internal coupling. This action is undefined.
* W1032::A tentative definition of variable '%s' which has internal linkage must not incomplete type.
* W1033::A 'volatile' or 'const' qualifier is used for the type of function return value. This action is undefined.
* W1034::It is declared at function `%s()' with static storage class specifier in block scope. This usage is meaningless.
* W1035::`%s' declared typedef. It cannot be redeclared inside an inner scope without using explicit type.
* W1036::`%s' declared typedef. It cannot be redeclared as a member of structure or union without using explicit type.
* W1037::`%s' which has external coupling is declared more than one, this is incompatible.
* W1039::`ll' is used in %sth conversion specifier.
* W1040::An unrecognizable string is described after preprocessing directive.
* W1041::`%s' is not official preprocessing directive of ISO C standards.
* W1042::'sizeof' operator is using in preprocessing directive. This is the language extension.
* W1043::`@@ address' is not supported ISO C standards. It will be considered as language extension.
* W1045::This `@@ word' syntax will be ignored.
* W1046::A space character is ignored between `\' and line feed.
* W1047::The struct, union or array's initializer is not literal.
* W1048::The multi byte string literal is an implementation defined value.
* W1049::The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
* W1050::The result of conversion to signed integer type in integer expression is not express by a signed type.
* W1051::The result of unsigned arithmetic expression typed `%s' is going around 0 by overflow.
* W1052::The result of unsigned arithmetic expression typed `%s' can be going around by overflow.
* W1053::A numeric constants is passed to an actual argument which formal argument is enumeration type.
* W1054::A non enumeration type expression is substituted for the enumeration type.
* W1055::A non enumeration type expression is returned from the function which return value is enumeration type.
* W1056::An object of actual argument is different enumeration type which formal argument is enumeration type.
* W1057::An enumeration value is substituted for different enumeration type object.
* W1058::A different enumeration type of value is returned from a function which return value is enumeration type.
* W1059::An enumeration value is passed to actual argument which formal argument is not enumeration type.
* W1060::An enumeration value is returned from a function which return value is not enumeration type .
* W1061::Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
* W1062::Non constant expression is substituted for the enumeration type object.
* W1063::The return value returned from enumeration type function to non constant expression.
* W1064::A integer constant is used in switch statement where case label is enumeration type.
* W1065::A value of different enumeration type is used in switch statement  where case label is an enumeration type.
* W1066::A value of the `float' typed compound expression is explicitly converted into a `double' value.
* W1067::A value of the `float' typed compound expression is explicitly converted into a `long double' value.
* W1068::A value of the `double' typed compound expression is explicitly converted into a `long double' value.
* W1069::No trailing `else' clause is found in this `if-else-if' statements chain.
* W1070::This `switch' statement can be translated into `if-else' statement because there are only 2 execution paths.
* W1071::Function `%s' has multiple termination points.
* W1072::`A `goto' statement is found.
* W1073::Return value of the function `%s' is discarded.
* W1074::Side-effects in `sizeof' operand will not be recorded because the operand will not be executed actually.
* W1075::This declaration has no `static' storage-class-specifier while the declaring object has internal-linkage.
* W1076::`%s' has internal-linkage without any prototype declarations.
* W1077::Declaring array object without a size.
* W9001::Control never reaches to this statement.
* W9002::There is no line feed character at the end of file.
* W9003::An object typed `%s' is implicitly converted into an object of type `%s'.
* C0001::A warning is detected as a pair of this identifier `%s'.
* C1000::Warning above is detected in the following context.
* C1001::This controlling-expression is evaluated to be true.
* C1002::This controlling-expression is evaluated to be false.
* C1003::The problematic variable is defined here without initializer.
* C1004::NULL value is assigned to the the problematic variable.
* C1005::A value possibly be NULL is assigned to the problematic variable.
* C1006::New value is assigned to the problematic variable.
@end menu

@node X0001
@section X0001
@cindex X0001

@subsection Message body

An unknown exception `%s' is found.

@subsection Content

If you find this message, please send appropriate source file,
@ref{Traits, traits file}, @ref{Message File, message file} and log file to AdLint development team.
It will lead to improve quality of AdLint.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node X0002
@section X0002
@cindex X0002

@subsection Message body

An illegal message ID `%s' is found.

@subsection Content

There's a possibility that the message catalog which AdLint using in internal is broken.
Please reinstall AdLint. If you still cannot solve this issue, please report it to AdLint development team.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node X0003
@section X0003
@cindex X0003

@subsection Message body

Analysis processing has been stopped due to unrecoverable error. For the details, refer to `%s' and `%s'.

@subsection Content

AdLint cannot process the analysis.
This error occurred because it cannot find header file or it cannot parse the source file.
This error can be solve by reviewing the @ref{Traits, traits file}.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node X0004
@section X0004
@cindex X0004

@subsection Message body

An illegal message format `%s' is found.

@subsection Content

There's a possibility that the message catalog which AdLint using in internal is broken.
Please reinstall AdLint. If you still cannot solve this issue, please report it to AdLint development team.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node E0004
@section E0004
@cindex E0004

@subsection Message body

Corresponding #endif doesn't found.

@subsection Content

This error occurred when it cannot find @code{#endif} directive correspond to
@code{#if}, @code{#ifdef}, @code{#ifndef} directive.

@subsection Sample code

@verbatim
#if DEBUG
  int i = 0;
#else
  int i = 1;
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node E0007
@section E0007
@cindex E0007

@subsection Message body

Syntax error is found in conditional expression token `%s'.
Conditional expression evaluate as false.

@subsection Content

This message will be output when it find syntax error
while evaluating the conditional expression of @code{#if}, @code{#elif} directive.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node E0008
@section E0008
@cindex E0008

@subsection Message body

Syntax error is found in token `%s'.

@subsection Content

This message will be output when it cannot parse preprocessed source file.

If you use compiler specific extension to build,
it can be solve by deleting specific token row in @ref{Traits, traits file}.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node E0009
@section E0009
@cindex E0009

@subsection Message body

A header file of <%s> doesn't found.

@subsection Content

It includes header file in @code{#include <...>} directive,
but it doesn't exist at the include path specified at @ref{Traits, traits file}.

This error can be solve by reviewing the setting of include path in @ref{Traits, traits file}.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node E0010
@section E0010
@cindex E0010

@subsection Message body

A header file of \%s\ doesn't found.

@subsection Content

It includes header file in @code{#include "..."}  directive,
but it doesn't exist at the include path specified at @ref{Traits, traits file}.

This error can be solve by reviewing the setting of include path in @ref{Traits, traits file}.


@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node E0013
@section E0013
@cindex E0013

@subsection Message body

Statement cannot include in syntax.

@subsection Content

This message will be output when GCC extension (Statement Exprs) is using.


@subsection Sample code

@verbatim
#define maxint(a, b) ({int _a = (a), _b = (b); _a > _b ? _a : _b; })
int i = maxint(1, 2); /* E0013 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node E0014
@section E0014
@cindex E0014

@subsection Message body

'&&' monadic operator to get a label address is GCC original add-on.


@subsection Content

This message will be output when GCC extension (Labels as Values) is using.

@subsection Sample code

@verbatim
void *label_ptr = &&foo; /* E0014 */
goto *label_ptr; /* E0015 */
foo:;
@end verbatim

@subsection Related message

@itemize
@item @ref{E0015} 'goto' statement with specified label address is GCC original add-on.
@end itemize

@subsection Since

1.0.0

@node E0015
@section E0015
@cindex E0015

@subsection Message body

'goto' statement with specified label address is GCC original add-on.

@subsection Content

This message will be output when GCC extension (Labels as Values) is using.

@subsection Sample code

@verbatim
void *label_ptr = &&foo; /* E0014 */
goto *label_ptr; /* E0015 */
foo:;
@end verbatim

@subsection Related message

@itemize
@item @ref{E0014} '&&' monadic operator to get a label address is GCC original add-on.
@end itemize

@subsection Since

1.0.0

@node E0016
@section E0016
@cindex E0016

@subsection Message body

Unfinished comment block is found.

@subsection Content

This message will be output when the block comment begging with @code{/*}
is not finished by @code{*/}.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node W0001
@section W0001
@cindex W0001

@subsection Message body

Nesting depth of round bracket `()' exceed 32. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = 10;
int b = 20;
int c = (((((((((((((((((((((((((((((((((a + b))))))))))))))))))))))))))))))))); /* W0001 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0002
@section W0002
@cindex W0002

@subsection Message body

Identifier and declaration of formal argument described separately in the definition of function `%s()' is old style.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* function definition in K&R style */
int func(arg) /* W0002 */
char arg;
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0003
@section W0003
@cindex W0003

@subsection Message body

This switch statement doesn't have default label.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int value;
int number;
switch(number) {
case 1:
    value = 1;
    break;
case 2:
    value = 2;
    break;
case 3:
    value = 3;
    break; /* W0003 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0007
@section W0007
@cindex W0007

@subsection Message body

'break' or 'return' statement doesn't found in the last 'case' or 'default' section.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int value;
int number;
switch (number) {
case 1:
    value = 1;
    break;
case 2:
    value = 2;
case 3: /* W0007 */
    value = 3;
    break;
default:
    value = 0;
    break;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0010
@section W0010
@cindex W0010

@subsection Message body

There is a side-effect in this ternary operator (conditional operator).

@subsection Content

Under construction.

@subsection Sample code

@verbatim
x = (a > 0) ? b++ : b--; /* W0010 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0013
@section W0013
@cindex W0013

@subsection Message body

'continue' statement is used in repetition statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static void foo(void)
{
    int i;
    int j;

    i++;
    for (i = 1, j = 0; i < 20; i++) {
        j += 2;
        if ((j % i) == 3) {
            continue;  /* W0013 */
        }
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0016
@section W0016
@cindex W0016

@subsection Message body

The field width of conversion specifier exceeds 509 characters in 'printf' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
printf("%510d\n", a); /* W0016 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0017} The field width of conversion specifier exceeds 509 characters in 'scanf' function.
@end itemize

@subsection Since

1.0.0

@node W0017
@section W0017
@cindex W0017

@subsection Message body

The field width of conversion specifier exceeds 509 characters in 'scanf' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
scanf("%510d", &a); /* W0017 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0016} The field width of conversion specifier exceeds 509 characters in 'printf' function.
@end itemize

@subsection Since

1.0.0

@node W0018
@section W0018
@cindex W0018

@subsection Message body

This accuracy width of conversion specifier exceeds 509 characters.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
printf("%.510f\n", a); /* W0018 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0019
@section W0019
@cindex W0019

@subsection Message body

This pointer cast is danger because it delete const qualifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *pa;
const int *pb;
pa = (int *) pb; /* W0019 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0021
@section W0021
@cindex W0021

@subsection Message body

This pointer cast is danger because it delete volatile qualifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *pa;
volatile int *pb;
pa = (int *) pb; /* W0021 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0023
@section W0023
@cindex W0023

@subsection Message body

Arithmetic operation is being made by pointer variable.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *p;
int *q;
long r = p + r; /* W0023 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0024} Increment or decrement is being made by pointer variable.
@end itemize

@subsection Since

1.0.0

@node W0024
@section W0024
@cindex W0024

@subsection Message body

Increment or decrement is being made by pointer variable.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *p;
p++; /* W0024 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0023} Arithmetic operation is being made by pointer variable.
@end itemize

@subsection Since

1.0.0

@node W0025
@section W0025
@cindex W0025

@subsection Message body

`%s' is already included by this file directly.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#include "test.h"
#include "test2.h"
#include "test.h" /* W0025 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0026} `%s' is already included by this file indirectly.
@end itemize

@subsection Since

1.0.0

@node W0026
@section W0026
@cindex W0026

@subsection Message body

`%s' is already included by this file indirectly.

@subsection Content

Under construction.

@subsection Sample code

@file{test.h}
@verbatim
#include "test2.h"
@end verbatim

@file{test.c}
@verbatim
#include "test.h"
#include "test2.h" /* W0026 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0025} `%s' is already included by this file directly.
@end itemize

@subsection Since

1.0.0

@node W0027
@section W0027
@cindex W0027

@subsection Message body

Comparison operation is being made by pointer variable.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *p;
int *q;
if (p < q) { /* W0027 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0028
@section W0028
@cindex W0028

@subsection Message body

Dereferencing a pointer constant of NULL.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i = *(int *) NULL; /* W0028 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0030
@section W0030
@cindex W0030

@subsection Message body

Arithmetic operation is being made by NULL pointer.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *p;
p = (int *) NULL + 1; /* W0030 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0031
@section W0031
@cindex W0031

@subsection Message body

A formal argument `%s' is not used in this function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int num) /* W0031 */
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0033
@section W0033
@cindex W0033

@subsection Message body

A label of `%s:' is not used in this function. It might be removed.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int num = 0;
    for (int i =0; i < 10; i++) {
        num++;
    }
ERROR: /* W0033 */
    num = 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0035
@section W0035
@cindex W0035

@subsection Message body

Right operand of ``&&' or `||' must arithmetic type or pointer type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct STR {
    int x;
    int y;
};

extern struct STR str;

void func(void)
{
    int x;
    int y;
    x = y && str; /* W0035 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0036
@section W0036
@cindex W0036

@subsection Message body

The number of qualification operator exceeds 12.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int num[1][2][3][4][5][6][7][8][9][10][11][12][13]; /* W0036 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0037
@section W0037
@cindex W0037

@subsection Message body

Nest of structure or union exceeds 15. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct st1 {
  struct st2 {
    struct st3 {
      struct st4 {
        struct st5 {
          struct st6 {
            struct st7 {
              struct st8 {
                struct st9 {
                  struct st10 {
                    struct st11 {
                      struct st12 {
                        struct st13 {
                          struct st14 {
                            struct st15 {
                              struct st16 { /* W0037 */
                                int i;
                              } st16;
                            } st15;
                          } st14;
                        } st13;
                      } st12;
                    } st11;
                  } st10;
                } st9;
              } st8;
            } st7;
          } st6;
        } st5;
      } st5;
    } st3;
  } st2;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0038
@section W0038
@cindex W0038

@subsection Message body

The size of object `%s' exceeds 32767 bytes. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int num[100][330]; /* W0038 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0039
@section W0039

@subsection Message body

The number of local identifier in the block exceeds 127. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int num1,  num2,  num3,  num4,  num5,  num6,  num7,  num8,  num9,  num10;
    int num11, num12, num13, num14, num15, num16, num17, num18, num19, num20;

    ...snip...

    int num111, num112, num113, num114, num115, num116, num117, num118, num119, num120;
    int num121, num122, num123, num124, num125, num126, num127, num128; /* W0039 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0040
@section W0040
@cindex W0040

@subsection Message body

A bit field is declared without 'signed' or 'unsigned'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct STR { /* W0040 */
    int a:5;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0041
@section W0041
@cindex W0041

@subsection Message body

The number of member of structure or union exceeds 127.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct STR {
    int num1;
    int num2;
    int num3;
    int num4;
    int num5;

    ...snip...

    int num125;
    int num126;
    int num127;
    int num128; /* W0041 */
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0042
@section W0042
@cindex W0042

@subsection Message body

The number of enumeration literal exceeds 127. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum ENM {
    e1,  e2,  e3,  e4,  e5,  e6,  e7,  e8,  e9,  e10,
    e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,

    ...snip...

    e111, e112, e113, e114, e115, e116, e117, e118, e119, e120,
    e121, e122, e123, e124, e125, e126, e127, e128 /* W0042 */
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0043
@section W0043
@cindex W0043

@subsection Message body

The initial value of the array is short of declared array's size. The residual array will be initialized by zero.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int array[5] = { 1, 2, 3 }; /* W0043 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0049
@section W0049
@cindex W0049

@subsection Message body

Nest of control structure exceeds 15. This program doesn't meet the strict ISO C90 standards of the term.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
if(x > 0) {
  if(x > 0) {
    if(x > 0) {
      if(x > 0) {
        if(x > 0) {
          if(x > 0) {
            if(x > 0) {
              if(x > 0) {
                if(x > 0) {
                  if(x > 0) {
                    if(x > 0) {
                      if(x > 0) {
                        if(x > 0) {
                          if(x > 0) {
                            if (x > 0) {
                              if(x > 0) { /* W0049 */
                                ;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0050
@section W0050
@cindex W0050

@subsection Message body

The number of 'case' label exceeds 257. This program doesn't meet the strict ISO C90 standards of the term.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
switch (num) {
case 1:
    break;
case 2:
    break;
case 3:
    break;

  ...snip...

case 257:
    break;
case 258: /* W0050 */
    break;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0051
@section W0051
@cindex W0051

@subsection Message body

An external identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in linker property.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int very_long_long_long_ ...snip... _long_external_symbol; /* W0051 */
@end verbatim

@subsection Related message

@itemize
@item @ref{C0001} A warning is detected as a pair of this identifier `%s'.
@end itemize

@subsection Since

1.0.0

@node W0052
@section W0052
@cindex W0052

@subsection Message body

An identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in compile property.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int very_long_long_long_long_long_ ...snip... _long_symbol; /* W0052 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C0001} A warning is detected as a pair of this identifier `%s'.
@end itemize

@subsection Since

1.0.0

@node W0053
@section W0053
@cindex W0053

@subsection Message body

Nest of `#include \%s\' exceeds 8.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@file{test.c}
@verbatim
#include "test1.h"
@end verbatim

@file{test1.h}
@verbatim
#include "test2.h"
@end verbatim

@file{test2.h}
@verbatim
#include "test3.h"
@end verbatim

@file{test3.h}
@verbatim
#include "test4.h"
@end verbatim

@file{test4.h}
@verbatim
#include "test5.h"
@end verbatim

@file{test5.h}
@verbatim
#include "test6.h"
@end verbatim

@file{test6.h}
@verbatim
#include "test7.h"
@end verbatim

@file{test7.h}
@verbatim
#include "test8.h"
@end verbatim

@file{test8.h}
@verbatim
#include "test9.h"
@end verbatim

@file{test9.h}
@verbatim
#include "test10.h" /* W0053 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0054
@section W0054
@cindex W0054

@subsection Message body

The maximum number of `#if...' nest exceeds 8. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#if N > 1
#if N > 2
#if N > 3
#if N > 4
#if N > 5
#if N > 6
#if N > 7
#if N > 8 /* W0054 */
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0055
@section W0055
@cindex W0055

@subsection Message body

The number of macro definition exceeds 1024. This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO_1
#define MACRO_2
#define MACRO_3

...snip...

#define MACRO_1023
#define MACRO_1024
#define MACRO_1025 /* W0055 */
@end verbatim


@subsection Related message

None.

@subsection Since

1.0.0

@node W0056
@section W0056
@cindex W0056

@subsection Message body

The number of formal argument of function-like macro exceeds 31.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(a1, a2, a3, ...snip... a30, a31, a32) /* W0056 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0057
@section W0057
@cindex W0057

@subsection Message body

The number of actual argument of function-like macro exceeds 31.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i = MACRO(1, 2, 3 ...snip... 30, 31, 32); /* W0057 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0058
@section W0058
@cindex W0058

@subsection Message body

The number of characters of string literal exceeds 509.This program doesn't meet the strict ISO C90 standards of the term.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char buf[] = "very long long long ...snip... long string literal"; /* W0058 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0059
@section W0059
@cindex W0059

@subsection Message body

Ctrl-M(^M) control character is found at the end of line.

@subsection Content

Under construction.

@subsection Sample code

None.

@subsection Related message

@itemize
@item @ref{W0060} Ctrl-Z(^Z) control character is found in this file.
@end itemize

@subsection Since

1.0.0

@node W0060
@section W0060
@cindex W0060

@subsection Message body

Ctrl-Z(^Z) control character is found in this file.

@subsection Content

Under construction.

@subsection Sample code

None.

@subsection Related message

@itemize
@item @ref{W0059} Ctrl-M(^M) control character is found at the end of line.
@end itemize

@subsection Since

1.0.0

@node W0061
@section W0061
@cindex W0061

@subsection Message body

`%s' is not actual reserved keyword. It will be considered as language extension and ignored.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int func(void) __attribute__ ((__const__)); /* W0061 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0062} `__typeof__' is not supported ISO C standards. It will be considered as language extension.
@item @ref{W0063} `__alignof__'is not supported ISO C standards. It will be considered as language extension..
@end itemize

@subsection Since

1.0.0

@node W0062
@section W0062
@cindex W0062

@subsection Message body

`__typeof__' is not supported ISO C standards. It will be considered as language extension.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define DEF_FUNPTR(func) __typeof__(func) *ptr_##func = 0
DEF_FUNPTR(main); /* W0062 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0061} `%s' is not actual reserved keyword. It will be considered as language extension and ignored.
@item @ref{W0063} `__alignof__'is not supported ISO C standards. It will be considered as language extension..
@end itemize

@subsection Since

1.0.0

@node W0063
@section W0063
@cindex W0063

@subsection Message body

`__alignof__'is not supported ISO C standards. It will be considered as language extension..

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = __alignof__(struct sockaddr *) /* W0063 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0061} `%s' is not actual reserved keyword. It will be considered as language extension and ignored.
@item @ref{W0062} `__typeof__' is not supported ISO C standards. It will be considered as language extension.
@end itemize

@subsection Since

1.0.0

@node W0064
@section W0064
@cindex W0064

@subsection Message body

A binary integer literal is used. This is the language extension.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char c = 0b00000001; /* W0064 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0065
@section W0065
@cindex W0065

@subsection Message body

Must not cast left operand of assignment operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int num)
{
    (unsigned short) num = 100U; /* W0065 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0066
@section W0066
@cindex W0066

@subsection Message body

`main()' function must `int (void)' or `int (int, char *[])'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void main(void) {} /* W0066 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0067
@section W0067
@cindex W0067

@subsection Message body

Directly access to the member of nested structure. This is the language extension.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct BBB {
    int mb;
    struct AAA {
        int ma;
    };
} bbb;

bbb.ma = 1; /* W0067 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0068} `.' is used to get access to bit. This is the language extension.
@end itemize

@subsection Since

1.0.0

@node W0068
@section W0068
@cindex W0068

@subsection Message body

`.' is used to get access to bit. This is the language extension.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short a;

a.2 = 0; /* W0068 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0067} Directly access to the member of nested structure. This is the language extension.
@end itemize

@subsection Since

1.0.0

@node W0069
@section W0069
@cindex W0069

@subsection Message body

`/*' is found in the beginning with `/*' comments. Nested comment doesn't allowed in ISO C standards.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* /* W0069 */ */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0070
@section W0070
@cindex W0070

@subsection Message body

Included <%s> is not referenced in the translation unit. It can be removed.

@subsection Content

Under construction.

@subsection Sample code

None.

@subsection Related message

@itemize
@item @ref{W0071} Included "%s" is not referenced in the translation unit. It can be removed.
@end itemize

@subsection Since

1.0.0

@node W0071
@section W0071
@cindex W0071

@subsection Message body

Included \%s\ is not referenced in the translation unit. It can be removed.

@subsection Content

Under construction.

@subsection Sample code

None.

@subsection Related message

@itemize
@item @ref{W0070} Included <%s> is not referenced in the translation unit. It can be removed.
@end itemize

@subsection Since

1.0.0

@node W0072
@section W0072
@cindex W0072

@subsection Message body

A character except for basic source character is used in header file name.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#include <test$.h> /* W0072 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0073
@section W0073
@cindex W0073

@subsection Message body

No include guard in this include file.

@subsection Content

Under construction.

@subsection Sample code

None.

@subsection Related message

None.

@subsection Since

1.0.0

@node W0076
@section W0076
@cindex W0076

@subsection Message body

Hexadecimal constant without `U' or `u' suffix.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int num = 0x1234; /* W0076 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0077
@section W0077
@cindex W0077

@subsection Message body

Lower case `l' is added to integer or floating-point number.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long a = 0x1000l; /* W0077 */
long b = 0x1000L; /* OK */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0078
@section W0078
@cindex W0078

@subsection Message body

A function is declared without list of formal argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int sample() /* W0078 */
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0079
@section W0079
@cindex W0079

@subsection Message body

This array cannot keep final character `\0' which initial value of string literal.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char text[3] = "ABC"; /* W0079 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0080
@section W0080
@cindex W0080

@subsection Message body

A global object which const qualified is defined without explicitly initialized.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const int num; /* W0080 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0081
@section W0081
@cindex W0081

@subsection Message body

A monadic operator `-' becomes unsigned type if it use 'unsigned int' type, 'unsigned long' type or 'unsigned long' type operand.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long num = 0;
long val = -num; /* W0081 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0082
@section W0082
@cindex W0082

@subsection Message body

Unary operator `-' is applied to an operand whose underlying type `%s' is unsigned.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short num = 20;
int val = -num; /* W0082 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0084
@section W0084
@cindex W0084

@subsection Message body

Left operand of this comma operator `,' doesn't described the statement which has side-effects.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = 0;
int b = 1;

a, b++; /* W0084 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0085} This statement doesn't have side-effects. It is highly possible that it having error.
@item @ref{W0086} Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).
@item @ref{W0087} The right side statement of comma operator is verbose statement which doesn't have side-effects.
@item @ref{W0088} The right side statement of logical operator is verbose statement which doesn't have side-effects.
@end itemize

@subsection Since

1.0.0

@node W0085
@section W0085
@cindex W0085

@subsection Message body

This statement doesn't have side-effects. It is highly possible that it having error.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
a; /* W0085 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0084} Left operand of this comma operator `,' doesn't described the statement which has side-effects.
@item @ref{W0086} Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).
@item @ref{W0087} The right side statement of comma operator is verbose statement which doesn't have side-effects.
@item @ref{W0088} The right side statement of logical operator is verbose statement which doesn't have side-effects.
@end itemize

@subsection Since

1.0.0

@node W0086
@section W0086
@cindex W0086

@subsection Message body

Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;
int b;

(a < 0) ? b : b++; /* W0086 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0084} Left operand of this comma operator `,' doesn't described the statement which has side-effects.
@item @ref{W0085} This statement doesn't have side-effects. It is highly possible that it having error.
@item @ref{W0087} The right side statement of comma operator is verbose statement which doesn't have side-effects.
@item @ref{W0088} The right side statement of logical operator is verbose statement which doesn't have side-effects.
@end itemize

@subsection Since

1.0.0

@node W0087
@section W0087
@cindex W0087

@subsection Message body

The right side statement of comma operator is verbose statement which doesn't have side-effects.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = 0;
int b = 1;

a++, b; /* W0087 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0084} Left operand of this comma operator `,' doesn't described the statement which has side-effects.
@item @ref{W0085} This statement doesn't have side-effects. It is highly possible that it having error.
@item @ref{W0086} Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).
@item @ref{W0088} The right side statement of logical operator is verbose statement which doesn't have side-effects.
@end itemize

@subsection Since

1.0.0

@node W0088
@section W0088
@cindex W0088

@subsection Message body

The right side statement of logical operator is verbose statement which doesn't have side-effects.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
(a < 0) && func(a) && func(b) && c; /* W0088 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0084} Left operand of this comma operator `,' doesn't described the statement which has side-effects.
@item @ref{W0085} This statement doesn't have side-effects. It is highly possible that it having error.
@item @ref{W0086} Second or third operand is verbose statement which doesn't have side-effects in ternary operator (conditional operator).
@item @ref{W0087} The right side statement of comma operator is verbose statement which doesn't have side-effects.
@end itemize

@subsection Since

1.0.0

@node W0093
@section W0093
@cindex W0093

@subsection Message body

This expression may cause division-by-zero.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b)
{
    if (b > 0) {
        return a / b; /* OK */
    }
    return a / b; /* W0093 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0096
@section W0096
@cindex W0096

@subsection Message body

It divided by a constant expression which definitely zero.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define A (0)

int b = 10 / A; /* W0096 */
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0097
@section W0097
@cindex W0097

@subsection Message body

This expression may cause division-by-zero.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b)
{
    if (a < 0) {
        ...snip...
    }
    else {
        ...snip...
        if (a < 1) {
            return b / a; /* W0097 */
        }
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0100
@section W0100
@cindex W0100

@subsection Message body

The variable `%s' has not been reassigned since the initial value is assigned. It may be able to be defined as `const' with an initial value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    int b = a; /* W0100 */
    return b;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0101
@section W0101
@cindex W0101

@subsection Message body

An address of auto variable is substituted for a pointer which has a longer life. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern long *ptr;

void func()
{
    long value = 0;
    ptr = &value; /* W0101 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0102
@section W0102
@cindex W0102

@subsection Message body

An address of auto variable is returned via formal argument to functions. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int **ptr)
{
    int num;
    *ptr = &num; /* W0102 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0103} An address of auto variable is returned as return value from a function. This program is danger.
@end itemize

@subsection Since

1.0.0

@node W0103
@section W0103
@cindex W0103

@subsection Message body

An address of auto variable is returned as return value from a function. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char *foo1(void)
{
    char a[3];
    return a; /* W0103 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0102} An address of auto variable is returned via formal argument to functions. This program is danger.
@end itemize

@subsection Since

1.0.0

@node W0104
@section W0104
@cindex W0104

@subsection Message body

The value of formal argument `%s' is not change. It can be declarable with 'const'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int val) /* W0104 */
{
    const int num = val + 1;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0105} The object which points the formal argument `%s' is not change. It can be declaring as pointer type which points const object.
@end itemize

@subsection Since

1.0.0

@node W0105
@section W0105
@cindex W0105

@subsection Message body

The object which points the formal argument `%s' is not change. It can be declaring as pointer type which points const object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int *val) /* W0105 */
{
    const int num = *val;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0104} The value of formal argument `%s' is not change. It can be declarable with 'const'.
@end itemize

@subsection Since

1.0.0

@node W0107
@section W0107
@cindex W0107

@subsection Message body

An address of auto variable is substituted for local pointer with 'static' option. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void foo()
{
    static int *p;
    int b = 100;

    p = &b; /* W0107 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0108
@section W0108
@cindex W0108

@subsection Message body

An assignment-expression appears in the logical expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;
int b;

if (a = b) { /* W0108 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0109
@section W0109

@subsection Message body

The definition of this function doesn't found. It consider it was omitted, and insert `extern int %s()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func()
{
    foo(); /* W0109 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0110
@section W0110
@cindex W0110

@subsection Message body

A variable number with floating-point type is used by loop counter in for statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double d;

for (d = 0.0; d != 1.0; d += 0.1) { /* W0110 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0112
@section W0112
@cindex W0112

@subsection Message body

The statement of floating-point compares by equivalent operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double a = 0.1;
a = (a + 0.1) * 5.0;
if (a == 1.0) { /* W0112 */
}
@end verbatim


@subsection Related message

None.

@subsection Since

1.0.0

@node W0114
@section W0114
@cindex W0114

@subsection Message body

This control expression is not explicit logical operation.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;

if (a != 0) { /* OK */
}

if (a) { /* W0114 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0115
@section W0115
@cindex W0115

@subsection Message body

Unsigned left shift operator `<<' drop the high-order bit.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(unsigned int a)
{
    if (a > 0x40000000U) {
        return a << 2; /* W0115 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0116} Unsigned left shift operator `<<' can be drop high-order bit.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0116
@section W0116
@cindex W0116

@subsection Message body

Unsigned left shift operator `<<' can be drop high-order bit.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(unsigned int a)
{
    if (a > 0x40000000U) {
        return a << 1; /* W0116 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0115} Unsigned left shift operator `<<' drop the high-order bit.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0117
@section W0117
@cindex W0117

@subsection Message body

`%s' has external-linkage without any prototype declarations.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void) /* W0117 */
{
    ...snip...
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0118} `%s' has external-linkage, but no prototype declaration is in header files.
@end itemize

@subsection Since

1.0.0

@node W0118
@section W0118
@cindex W0118

@subsection Message body

`%s' has external-linkage, but no prototype declaration is in header files.

@subsection Content

Under construction.

@subsection Sample code

@file{test.c}
@verbatim
extern int val; /* W0118 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0117} `%s' has external-linkage without any prototype declarations.
@end itemize

@subsection Since

1.0.0

@node W0119
@section W0119
@cindex W0119

@subsection Message body

An implicit type conversion from char to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(char a)
{
    signed char b = a; /* W0119 */
    foo(a); /* W0119 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0120
@section W0120
@cindex W0120

@subsection Message body

An implicit type conversion from char to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(char a)
{
    unsigned char b = a; /* W0120 */
    foo(a); /* W0120 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize


@subsection Since

1.0.0

@node W0121
@section W0121
@cindex W0121

@subsection Message body

An implicit type conversion from char to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(char a)
{
    short b = a; /* W0121 */
    foo(a); /* W0121 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize


@subsection Since

1.0.0

@node W0122
@section W0122
@cindex W0122

@subsection Message body

An implicit type conversion from char to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(char a)
{
    unsigned short b = a; /* W0122 */
    foo(a); /* W0122 */
}
@end verbatim

@subsection Related message
@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize


@subsection Since

1.0.0

@node W0123
@section W0123
@cindex W0123

@subsection Message body

An implicit type conversion from char to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(char a)
{
    int b = a; /* W0123 */
    foo(a); /* W0123 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0124
@section W0124
@cindex W0124

@subsection Message body

An implicit type conversion from char to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(char a)
{
    unsigned int b = a; /* W0124 */
    foo(a); /* W0124 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0125
@section W0125
@cindex W0125

@subsection Message body

An implicit type conversion from char to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(char a)
{
    long b = a; /* W0125 */
    foo(a); /* W0125 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0126
@section W0126
@cindex W0126

@subsection Message body

An implicit type conversion from char to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(char a)
{
    unsigned long b = a; /* W0126 */
    foo(a); /* W0126 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0127
@section W0127
@cindex W0127

@subsection Message body

An implicit type conversion from char to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(char a)
{
    float b = a; /* W0127 */
    foo(a); /* W0127 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0128
@section W0128
@cindex W0128

@subsection Message body

An implicit type conversion from char to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(char a)
{
    double b = a; /* W0128 */
    foo(a); /* W0128 */
}
@end verbatim

@subsection Related message
@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0129
@section W0129
@cindex W0129

@subsection Message body

An implicit type conversion from char to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(char a)
{
    long double b = a; /* W0129 */
    foo(a); /* W0129 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize


Under construction.

@subsection Since

1.0.0

@node W0130
@section W0130
@cindex W0130

@subsection Message body

An implicit type conversion from char to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(char a)
{
    long long b = a; /* W0130 */
    foo(a); /* W0130 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0131} An implicit type conversion from char to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0131
@section W0131
@cindex W0131

@subsection Message body

An implicit type conversion from char to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(char a)
{
    unsigned long long b = a; /* W0131 */
    foo(a); /* W0131 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0119} An implicit type conversion from char to signed char.
@item @ref{W0120} An implicit type conversion from char to unsigned char.
@item @ref{W0121} An implicit type conversion from char to signed short.
@item @ref{W0122} An implicit type conversion from char to unsigned short.
@item @ref{W0123} An implicit type conversion from char to signed int.
@item @ref{W0124} An implicit type conversion from char to unsigned int.
@item @ref{W0125} An implicit type conversion from char to signed long.
@item @ref{W0126} An implicit type conversion from char to unsigned long.
@item @ref{W0127} An implicit type conversion from char to float.
@item @ref{W0128} An implicit type conversion from char to double.
@item @ref{W0129} An implicit type conversion from char to long double.
@item @ref{W0130} An implicit type conversion from char to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0132
@section W0132
@cindex W0132

@subsection Message body

An implicit type conversion from unsigned char to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(unsigned char a)
{
    char b = a; /* W0132 */
    foo(a); /* W0132 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0133
@section W0133
@cindex W0133

@subsection Message body

An implicit type conversion from signed char to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(signed char a)
{
    char b = a; /* W0133 */
    foo(a); /* W0133 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0134
@section W0134
@cindex W0134

@subsection Message body

An implicit type conversion from signed short to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(short a)
{
    char b = a; /* W0134 */
    foo(a); /* W0134 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0135
@section W0135
@cindex W0135

@subsection Message body

An implicit type conversion from unsigned short to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(unsigned short a)
{
    char b = a; /* W0135 */
    foo(a); /* W0135 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0136
@section W0136
@cindex W0136

@subsection Message body

An implicit type conversion from signed int to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(int a)
{
    char b = a; /* W0136 */
    foo(a); /* W0136 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0137
@section W0137
@cindex W0137

@subsection Message body

An implicit type conversion from unsigned int to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(unsigned int a)
{
    char b = a; /* W0137 */
    foo(a); /* W0137 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0138
@section W0138
@cindex W0138

@subsection Message body

An implicit type conversion from signed long to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(long a)
{
    char b = a; /* W0138 */
    foo(a); /* W0138 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0139
@section W0139
@cindex W0139

@subsection Message body

An implicit type conversion from unsigned long to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(unsigned long a)
{
    char b = a; /* W0139 */
    foo(a); /* W0139 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0140
@section W0140
@cindex W0140

@subsection Message body

An implicit type conversion from signed long long to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(long long a)
{
    char b = a; /* W0140 */
    foo(a); /* W0140 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0141} An implicit type conversion from unsigned long long to char.
@end itemize

@subsection Since

1.0.0

@node W0141
@section W0141
@cindex W0141

@subsection Message body

An implicit type conversion from unsigned long long to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(unsigned long long a)
{
    char b = a; /* W0141 */
    foo(a); /* W0141 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0132} An implicit type conversion from unsigned char to char.
@item @ref{W0133} An implicit type conversion from signed char to char.
@item @ref{W0134} An implicit type conversion from signed short to char.
@item @ref{W0135} An implicit type conversion from unsigned short to char.
@item @ref{W0136} An implicit type conversion from signed int to char.
@item @ref{W0137} An implicit type conversion from unsigned int to char.
@item @ref{W0138} An implicit type conversion from signed long to char.
@item @ref{W0139} An implicit type conversion from unsigned long to char.
@item @ref{W0140} An implicit type conversion from signed long long to char.
@end itemize

@subsection Since

1.0.0

@node W0142
@section W0142
@cindex W0142

@subsection Message body

An implicit type conversion from unsigned char to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(unsigned char a)
{
    signed char b = a; /* W0142 */
    foo(a); /* W0142 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0143
@section W0143
@cindex W0143

@subsection Message body

An implicit type conversion from unsigned short to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(unsigned short a)
{
    signed char b = a; /* W0143 */
    foo(a); /* W0143 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0144
@section W0144
@cindex W0144

@subsection Message body

An implicit type conversion from unsigned short to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(unsigned short a)
{
    short b = a; /* W0144 */
    foo(a); /* W0144 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0145
@section W0145
@cindex W0145

@subsection Message body

An implicit type conversion from unsigned int to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(unsigned int a)
{
    signed char b = a; /* W0145 */
    foo(a); /* W0145 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0146
@section W0146
@cindex W0146

@subsection Message body

An implicit type conversion from unsigned int to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(unsigned int a)
{
    short b = a; /* W0146 */
    foo(a); /* W0146 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0147
@section W0147
@cindex W0147

@subsection Message body

An implicit type conversion from unsigned int to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(unsigned int a)
{
    int b = a; /* W0147 */
    foo(a); /* W0147 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0148
@section W0148
@cindex W0148

@subsection Message body

An implicit type conversion from unsigned long to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(unsigned long a)
{
    signed char b = a; /* W0148 */
    foo(a); /* W0148 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0149
@section W0149
@cindex W0149

@subsection Message body

An implicit type conversion from unsigned long to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(unsigned long a)
{
    short b = a; /* W0149 */
    foo(a); /* W0149 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0150
@section W0150
@cindex W0150

@subsection Message body

An implicit type conversion from unsigned long to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(unsigned long a)
{
    int b = a; /* W0150 */
    foo(a); /* W0150 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0151
@section W0151
@cindex W0151

@subsection Message body

An implicit type conversion from unsigned long to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(unsigned long a)
{
    long b = a; /* W0151 */
    foo(a); /* W0151 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0152
@section W0152
@cindex W0152

@subsection Message body

An implicit type conversion from unsigned long long to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(unsigned long long a)
{
    signed char b = a; /* W0152 */
    foo(a); /* W0152 */
}
@end verbatim.

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0153
@section W0153
@cindex W0153

@subsection Message body

An implicit type conversion from unsigned long long to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(unsigned long long a)
{
    short b = a; /* W0153 */
    foo(a); /* W0153 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0154
@section W0154
@cindex W0154

@subsection Message body

An implicit type conversion from unsigned long long to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(unsigned long long a)
{
    int b = a; /* W0154 */
    foo(a); /* W0154 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0155
@section W0155
@cindex W0155

@subsection Message body

An implicit type conversion from unsigned long long to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(unsigned long long a)
{
    long b = a; /* W0155 */
    foo(a); /* W0155 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0156} An implicit type conversion from unsigned long long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0156
@section W0156
@cindex W0156

@subsection Message body

An implicit type conversion from unsigned long long to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(unsigned long long a)
{
    long long b = a; /* W0156 */
    foo(a); /* W0156 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0142} An implicit type conversion from unsigned char to signed char.
@item @ref{W0143} An implicit type conversion from unsigned short to signed char.
@item @ref{W0144} An implicit type conversion from unsigned short to signed short.
@item @ref{W0145} An implicit type conversion from unsigned int to signed char.
@item @ref{W0146} An implicit type conversion from unsigned int to signed short.
@item @ref{W0147} An implicit type conversion from unsigned int to signed int.
@item @ref{W0148} An implicit type conversion from unsigned long to signed char.
@item @ref{W0149} An implicit type conversion from unsigned long to signed short.
@item @ref{W0150} An implicit type conversion from unsigned long to signed int.
@item @ref{W0151} An implicit type conversion from unsigned long to signed long.
@item @ref{W0152} An implicit type conversion from unsigned long long to signed char.
@item @ref{W0153} An implicit type conversion from unsigned long long to signed short.
@item @ref{W0154} An implicit type conversion from unsigned long long to signed int.
@item @ref{W0155} An implicit type conversion from unsigned long long to signed long.
@end itemize

@subsection Since

1.0.0

@node W0157
@section W0157
@cindex W0157

@subsection Message body

An implicit type conversion from signed char to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(signed char a)
{
    unsigned char b = a; /* W0157 */
    foo(a); /* W0157 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0158
@section W0158
@cindex W0158

@subsection Message body

An implicit type conversion from signed char to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(signed char a)
{
    unsigned short b = a; /* W0158 */
    foo(a); /* W0158 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

Under construction.

@subsection Since

1.0.0

@node W0159
@section W0159
@cindex W0159

@subsection Message body

An implicit type conversion from signed char to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(signed char a)
{
    unsigned int b = a; /* W0159 */
    foo(a); /* W0159 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0160
@section W0160
@cindex W0160

@subsection Message body

An implicit type conversion from signed char to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(signed char a)
{
    unsigned long b = a; /* W0160 */
    foo(a); /* W0160 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0161
@section W0161
@cindex W0161

@subsection Message body

An implicit type conversion from signed short to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(short a)
{
    unsigned char b = a; /* W0161 */
    foo(a); /* W0161 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0162
@section W0162
@cindex W0162

@subsection Message body

An implicit type conversion from signed short to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(short a)
{
    unsigned short b = a; /* W0162 */
    foo(a); /* W0162 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0163
@section W0163
@cindex W0163

@subsection Message body

An implicit type conversion from signed short to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(short a)
{
    unsigned int b = a; /* W0163 */
    foo(a); /* W0163 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0164
@section W0164
@cindex W0164

@subsection Message body

An implicit type conversion from signed short to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(short a)
{
    unsigned long b = a; /* W0164 */
    foo(a); /* W0164 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0165
@section W0165
@cindex W0165

@subsection Message body

Implicit conversion from `signed int' to `unsigned char'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(int a)
{
    unsigned char b = a; /* W0165 */
    foo(a); /* W0165 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0166
@section W0166
@cindex W0166

@subsection Message body

An implicit type conversion from signed int to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(int a)
{
    unsigned short b = a; /* W0166 */
    foo(a); /* W0166 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0167
@section W0167
@cindex W0167

@subsection Message body

Implicit conversion from `signed int' to `unsigned int'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(int a)
{
    unsigned int b = a; /* W0167 */
    foo(a); /* W0167 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0168
@section W0168
@cindex W0168

@subsection Message body

An implicit type conversion from signed int to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(int a)
{
    unsigned long b = a; /* W0168 */
    foo(a); /* W0168 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0169
@section W0169
@cindex W0169

@subsection Message body

An implicit type conversion from signed long to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(long a)
{
    unsigned char b = a; /* W0169 */
    foo(a); /* W0169 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0170
@section W0170
@cindex W0170

@subsection Message body

An implicit type conversion from signed long to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(long a)
{
    unsigned short b = a; /* W0170 */
    foo(a); /* W0170 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0171
@section W0171
@cindex W0171

@subsection Message body

An implicit type conversion from signed long to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(long a)
{
    unsigned int b = a; /* W0171 */
    foo(a); /* W0171 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0172
@section W0172
@cindex W0172

@subsection Message body

An implicit type conversion from signed long to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(long a)
{
    unsigned long b = a; /* W0172 */
    foo(a); /* W0172 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0173
@section W0173
@cindex W0173

@subsection Message body

An implicit type conversion from signed char to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(signed char a)
{
    unsigned long long b = a; /* W0173 */
    foo(a); /* W0173 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0174
@section W0174
@cindex W0174

@subsection Message body

An implicit type conversion from signed short to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(short a)
{
    unsigned long long b = a; /* W0174 */
    foo(a); /* W0174 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0175
@section W0175
@cindex W0175

@subsection Message body

An implicit type conversion from signed int to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(int a)
{
    unsigned long long b = a; /* W0175 */
    foo(a); /* W0175 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0176
@section W0176
@cindex W0176

@subsection Message body

An implicit type conversion from signed long to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(long a)
{
    unsigned long long b = a; /* W0176 */
    foo(a); /* W0176 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0177
@section W0177
@cindex W0177

@subsection Message body

An implicit type conversion from signed long long to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(long long a)
{
    unsigned char b = a; /* W0177 */
    foo(a); /* W0177 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0178
@section W0178
@cindex W0178

@subsection Message body

An implicit type conversion from signed long long to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(long long a)
{
    unsigned short b = a; /* W0178 */
    foo(a); /* W0178 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0179
@section W0179
@cindex W0179

@subsection Message body

An implicit type conversion from signed long long to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(long long a)
{
    unsigned int b = a; /* W0179 */
    foo(a); /* W0179 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0180
@section W0180
@cindex W0180

@subsection Message body

An implicit type conversion from signed long long to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(long long a)
{
    unsigned long b = a; /* W0180 */
    foo(a); /* W0180 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0181} An implicit type conversion from signed long long to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0181
@section W0181
@cindex W0181

@subsection Message body

An implicit type conversion from signed long long to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(long long a)
{
    unsigned long long b = a; /* W0181 */
    foo(a); /* W0181 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0157} An implicit type conversion from signed char to unsigned char.
@item @ref{W0158} An implicit type conversion from signed char to unsigned short.
@item @ref{W0159} An implicit type conversion from signed char to unsigned int.
@item @ref{W0160} An implicit type conversion from signed char to unsigned long.
@item @ref{W0161} An implicit type conversion from signed short to unsigned char.
@item @ref{W0162} An implicit type conversion from signed short to unsigned short.
@item @ref{W0163} An implicit type conversion from signed short to unsigned int.
@item @ref{W0164} An implicit type conversion from signed short to unsigned long.
@item @ref{W0165} Implicit conversion from `signed int' to `unsigned char'.
@item @ref{W0166} An implicit type conversion from signed int to unsigned short.
@item @ref{W0167} Implicit conversion from `signed int' to `unsigned int'.
@item @ref{W0168} An implicit type conversion from signed int to unsigned long.
@item @ref{W0169} An implicit type conversion from signed long to unsigned char.
@item @ref{W0170} An implicit type conversion from signed long to unsigned short.
@item @ref{W0171} An implicit type conversion from signed long to unsigned int.
@item @ref{W0172} An implicit type conversion from signed long to unsigned long.
@item @ref{W0173} An implicit type conversion from signed char to unsigned long long.
@item @ref{W0174} An implicit type conversion from signed short to unsigned long long.
@item @ref{W0175} An implicit type conversion from signed int to unsigned long long.
@item @ref{W0176} An implicit type conversion from signed long to unsigned long long.
@item @ref{W0177} An implicit type conversion from signed long long to unsigned char.
@item @ref{W0178} An implicit type conversion from signed long long to unsigned short.
@item @ref{W0179} An implicit type conversion from signed long long to unsigned int.
@item @ref{W0180} An implicit type conversion from signed long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0182
@section W0182
@cindex W0182

@subsection Message body

An implicit type conversion from unsigned char to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(unsigned char a)
{
    float b = a; /* W0182 */
    foo(a); /* W0182 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0183
@section W0183
@cindex W0183

@subsection Message body

An implicit type conversion from unsigned char to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(unsigned char a)
{
    double b = a; /* W0183 */
    foo(a); /* W0183 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0184
@section W0184
@cindex W0184

@subsection Message body

An implicit type conversion from unsigned char to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(unsigned char a)
{
    long double b = a; /* W0184 */
    foo(a); /* W0184 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0185
@section W0185
@cindex W0185

@subsection Message body

An implicit type conversion from signed char to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(signed char a)
{
    float b = a; /* W0185 */
    foo(a); /* W0185 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0186
@section W0186
@cindex W0186

@subsection Message body

An implicit type conversion from signed char to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(signed char a)
{
    double b = a; /* W0186 */
    foo(a); /* W0186 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0187
@section W0187
@cindex W0187

@subsection Message body

An implicit type conversion from signed char to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(signed char a)
{
    long double b = a; /* W0187 */
    foo(a); /* W0187 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0188
@section W0188
@cindex W0188

@subsection Message body

An implicit type conversion from signed short to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(short a)
{
    float b = a; /* W0188 */
    foo(a); /* W0188 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0189
@section W0189
@cindex W0189

@subsection Message body

An implicit type conversion from signed short to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(short a)
{
    double b = a; /* W0189 */
    foo(a); /* W0189 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0190
@section W0190
@cindex W0190

@subsection Message body

An implicit type conversion from signed short to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(short a)
{
    long double b = a; /* W0190 */
    foo(a); /* W0190 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0191
@section W0191
@cindex W0191

@subsection Message body

An implicit type conversion from unsigned short to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(unsigned short a)
{
    float b = a; /* W0191 */
    foo(a); /* W0191 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0192
@section W0192
@cindex W0192

@subsection Message body

An implicit type conversion from unsigned short to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(unsigned short a)
{
    double b = a; /* W0192 */
    foo(a); /* W0192 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0193
@section W0193
@cindex W0193

@subsection Message body

An implicit type conversion from unsigned short to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(unsigned short a)
{
    long double b = a; /* W0193 */
    foo(a); /* W0193 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0194
@section W0194
@cindex W0194

@subsection Message body

An implicit type conversion from signed int to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(int a)
{
    float b = a; /* W0194 */
    foo(a); /* W0194 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0195
@section W0195
@cindex W0195

@subsection Message body

An implicit type conversion from signed int to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(int a)
{
    double b = a; /* W0195 */
    foo(a); /* W0195 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0196
@section W0196
@cindex W0196

@subsection Message body

An implicit type conversion from signed int to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(int a)
{
    long double b = a; /* W0196 */
    foo(a); /* W0196 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0197
@section W0197
@cindex W0197

@subsection Message body

An implicit type conversion from unsigned int to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(unsigned int a)
{
    float b = a; /* W0197 */
    foo(a); /* W0197 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0198
@section W0198
@cindex W0198

@subsection Message body

An implicit type conversion from unsigned int to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(unsigned int a)
{
    double b = a; /* W0198 */
    foo(a); /* W0198 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0199
@section W0199
@cindex W0199

@subsection Message body

An implicit type conversion from unsigned int to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(unsigned int a)
{
    long double b = a; /* W0199 */
    foo(a); /* W0199 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0200
@section W0200
@cindex W0200

@subsection Message body

An implicit type conversion from signed long to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(long a)
{
    float b = a; /* W0200 */
    foo(a); /* W0200 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0201
@section W0201
@cindex W0201

@subsection Message body

An implicit type conversion from signed long to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(long a)
{
    double b = a; /* W0201 */
    foo(a); /* W0201 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0202
@section W0202
@cindex W0202

@subsection Message body

An implicit type conversion from signed long to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(long a)
{
    long double b = a; /* W0202 */
    foo(a); /* W0202 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0203
@section W0203
@cindex W0203

@subsection Message body

An implicit type conversion from unsigned long to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(unsigned long a)
{
    float b = a; /* W0203 */
    foo(a); /* W0203 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0204
@section W0204
@cindex W0204

@subsection Message body

An implicit type conversion from unsigned long to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(unsigned long a)
{
    double b = a; /* W0204 */
    foo(a); /* W0204 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0205
@section W0205
@cindex W0205

@subsection Message body

An implicit type conversion from unsigned long to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(unsigned long a)
{
    long double b = a; /* W0205 */
    foo(a); /* W0205 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0206
@section W0206
@cindex W0206

@subsection Message body

An implicit type conversion from signed long long to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(long long a)
{
    float b = a; /* W0206 */
    foo(a); /* W0206 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0207
@section W0207
@cindex W0207

@subsection Message body

An implicit type conversion from signed long long to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(long long a)
{
    double b = a; /* W0207 */
    foo(a); /* W0207 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0208
@section W0208
@cindex W0208

@subsection Message body

An implicit type conversion from signed long long to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(long long a)
{
    long double b = a; /* W0208 */
    foo(a); /* W0208 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0209
@section W0209
@cindex W0209

@subsection Message body

An implicit type conversion from unsigned long long to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(unsigned long long a)
{
    float b = a; /* W0209 */
    foo(a); /* W0209 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0210
@section W0210
@cindex W0210

@subsection Message body

An implicit type conversion from unsigned long long to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(unsigned long long a)
{
    double b = a; /* W0210 */
    foo(a); /* W0210 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0211} An implicit type conversion from unsigned long long to long double.
@end itemize

@subsection Since

1.0.0

@node W0211
@section W0211
@cindex W0211

@subsection Message body

An implicit type conversion from unsigned long long to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long double a);

void bar(unsigned long long a)
{
    long double b = a; /* W0211 */
    foo(a); /* W0211 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0182} An implicit type conversion from unsigned char to float.
@item @ref{W0183} An implicit type conversion from unsigned char to double.
@item @ref{W0184} An implicit type conversion from unsigned char to long double.
@item @ref{W0185} An implicit type conversion from signed char to float.
@item @ref{W0186} An implicit type conversion from signed char to double.
@item @ref{W0187} An implicit type conversion from signed char to long double.
@item @ref{W0188} An implicit type conversion from signed short to float.
@item @ref{W0189} An implicit type conversion from signed short to double.
@item @ref{W0190} An implicit type conversion from signed short to long double.
@item @ref{W0191} An implicit type conversion from unsigned short to float.
@item @ref{W0192} An implicit type conversion from unsigned short to double.
@item @ref{W0193} An implicit type conversion from unsigned short to long double.
@item @ref{W0194} An implicit type conversion from signed int to float.
@item @ref{W0195} An implicit type conversion from signed int to double.
@item @ref{W0196} An implicit type conversion from signed int to long double.
@item @ref{W0197} An implicit type conversion from unsigned int to float.
@item @ref{W0198} An implicit type conversion from unsigned int to double.
@item @ref{W0199} An implicit type conversion from unsigned int to long double.
@item @ref{W0200} An implicit type conversion from signed long to float.
@item @ref{W0201} An implicit type conversion from signed long to double.
@item @ref{W0202} An implicit type conversion from signed long to long double.
@item @ref{W0203} An implicit type conversion from unsigned long to float.
@item @ref{W0204} An implicit type conversion from unsigned long to double.
@item @ref{W0205} An implicit type conversion from unsigned long to long double.
@item @ref{W0206} An implicit type conversion from signed long long to float.
@item @ref{W0207} An implicit type conversion from signed long long to double.
@item @ref{W0208} An implicit type conversion from signed long long to long double.
@item @ref{W0209} An implicit type conversion from unsigned long long to float.
@item @ref{W0210} An implicit type conversion from unsigned long long to double.
@end itemize

@subsection Since

1.0.0

@node W0212
@section W0212
@cindex W0212

@subsection Message body

An implicit type conversion from unsigned long long to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(float a)
{
    char b = a; /* W0212 */
    foo(a); /* W0212 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0213
@section W0213
@cindex W0213

@subsection Message body

An implicit type conversion from float to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(float a)
{
    signed char b = a; /* W0213 */
    foo(a); /* W0213 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0214
@section W0214
@cindex W0214

@subsection Message body

An implicit type conversion from float to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(float a)
{
    unsigned char b = a; /* W0214 */
    foo(a); /* W0214 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0215
@section W0215
@cindex W0215

@subsection Message body

An implicit type conversion from float to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(float a)
{
    short b = a; /* W0215 */
    foo(a); /* W0215 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0216
@section W0216
@cindex W0216

@subsection Message body

An implicit type conversion from float to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(float a)
{
    unsigned short b = a; /* W0216 */
    foo(a); /* W0216 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0217
@section W0217
@cindex W0217

@subsection Message body

An implicit type conversion from float to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(float a)
{
    int b = a; /* W0217 */
    foo(a); /* W0217 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0218
@section W0218
@cindex W0218

@subsection Message body

An implicit type conversion from float to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(float a)
{
    unsigned int b = a; /* W0218 */
    foo(a); /* W0218 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0219
@section W0219
@cindex W0219

@subsection Message body

An implicit type conversion from float to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(float a)
{
    long b = a; /* W0219 */
    foo(a); /* W0219 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0220
@section W0220
@cindex W0220

@subsection Message body

An implicit type conversion from float to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(float a)
{
    unsigned long b = a; /* W0220 */
    foo(a); /* W0220 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0221
@section W0221
@cindex W0221

@subsection Message body

An implicit type conversion from double to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(double a)
{
    char b = a; /* W0221 */
    foo(a); /* W0221 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0222
@section W0222
@cindex W0222

@subsection Message body

An implicit type conversion from double to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(double a)
{
    signed char b = a; /* W0222 */
    foo(a); /* W0222 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0223
@section W0223
@cindex W0223

@subsection Message body

An implicit type conversion from double to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(double a)
{
    unsigned char b = a; /* W0223 */
    foo(a); /* W0223 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0224
@section W0224
@cindex W0224

@subsection Message body

An implicit type conversion from double to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(double a)
{
    short b = a; /* W0224 */
    foo(a); /* W0224 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0225
@section W0225
@cindex W0225

@subsection Message body

An implicit type conversion from double to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(double a)
{
    unsigned short b = a; /* W0225 */
    foo(a); /* W0225 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0226
@section W0226
@cindex W0226

@subsection Message body

An implicit type conversion from double to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(double a)
{
    int b = a; /* W0226 */
    foo(a); /* W0226 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0227
@section W0227
@cindex W0227

@subsection Message body

An implicit type conversion from double to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(double a)
{
    unsigned int b = a; /* W0227 */
    foo(a); /* W0227 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0228
@section W0228
@cindex W0228

@subsection Message body

An implicit type conversion from double to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(double a)
{
    long b = a; /* W0228 */
    foo(a); /* W0228 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0229
@section W0229
@cindex W0229

@subsection Message body

An implicit type conversion from double to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(double a)
{
    unsigned long b = a; /* W0229 */
    foo(a); /* W0229 */
}
@end verbatim
@subsection Related message
@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0230
@section W0230
@cindex W0230

@subsection Message body

An implicit type conversion from long double to char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(char a);

void bar(long double a)
{
    char b = a; /* W0230 */
    foo(a); /* W0230 */
}
@end verbatim

@subsection Related message
@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0231
@section W0231
@cindex W0231

@subsection Message body

An implicit type conversion from long double to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(long double a)
{
    signed char b = a; /* W0231 */
    foo(a); /* W0231 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0232
@section W0232
@cindex W0232

@subsection Message body

An implicit type conversion from long double to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(long double a)
{
    unsigned char b = a; /* W0232 */
    foo(a); /* W0232 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0233
@section W0233
@cindex W0233

@subsection Message body

An implicit type conversion from long double to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(long double a)
{
    short b = a; /* W0233 */
    foo(a); /* W0233 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0234
@section W0234
@cindex W0234

@subsection Message body

An implicit type conversion from long double to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(long double a)
{
    unsigned short b = a; /* W0234 */
    foo(a); /* W0234 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0235
@section W0235
@cindex W0235

@subsection Message body

An implicit type conversion from long double to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(long double a)
{
    int b = a; /* W0235 */
    foo(a); /* W0235 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0236
@section W0236
@cindex W0236

@subsection Message body

An implicit type conversion from long double to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(long double a)
{
    unsigned int b = a; /* W0236 */
    foo(a); /* W0236 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0237
@section W0237
@cindex W0237

@subsection Message body

An implicit type conversion from long double to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(long double a)
{
    long b = a; /* W0237 */
    foo(a); /* W0237 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0238
@section W0238
@cindex W0238

@subsection Message body

An implicit type conversion from long double to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(long double a)
{
    unsigned long b = a; /* W0238 */
    foo(a); /* W0238 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0239
@section W0239
@cindex W0239

@subsection Message body

An implicit type conversion from float to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(float a)
{
    long long b = a; /* W0239 */
    foo(a); /* W0239 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0240
@section W0240
@cindex W0240

@subsection Message body

An implicit type conversion from float to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(float a)
{
    unsigned long long b = a; /* W0240 */
    foo(a); /* W0240 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0241
@section W0241
@cindex W0241

@subsection Message body

An implicit type conversion from double to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(double a)
{
    long long b = a; /* W0241 */
    foo(a); /* W0241 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0242
@section W0242
@cindex W0242

@subsection Message body

An implicit type conversion from double to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(double a)
{
    unsigned long long b = a; /* W0242 */
    foo(a); /* W0242 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0243
@section W0243
@cindex W0243

@subsection Message body

An implicit type conversion from long double to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(long double a)
{
    long long b = a; /* W0243 */
    foo(a); /* W0243 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0244} An implicit type conversion from long double to unsigned long long.
@end itemize

@subsection Since

1.0.0

@node W0244
@section W0244
@cindex W0244

@subsection Message body

An implicit type conversion from long double to unsigned long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long long a);

void bar(long double a)
{
    unsigned long long b = a; /* W0244 */
    foo(a); /* W0244 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0212} An implicit type conversion from float to char.
@item @ref{W0213} An implicit type conversion from float to signed char.
@item @ref{W0214} An implicit type conversion from float to unsigned char.
@item @ref{W0215} An implicit type conversion from float to signed short.
@item @ref{W0216} An implicit type conversion from float to unsigned short.
@item @ref{W0217} An implicit type conversion from float to signed int.
@item @ref{W0218} An implicit type conversion from float to unsigned int.
@item @ref{W0219} An implicit type conversion from float to signed long.
@item @ref{W0220} An implicit type conversion from float to unsigned long.
@item @ref{W0221} An implicit type conversion from double to char.
@item @ref{W0222} An implicit type conversion from double to signed char.
@item @ref{W0223} An implicit type conversion from double to unsigned char.
@item @ref{W0224} An implicit type conversion from double to signed short.
@item @ref{W0225} An implicit type conversion from double to unsigned short.
@item @ref{W0226} An implicit type conversion from double to signed int.
@item @ref{W0227} An implicit type conversion from double to unsigned int.
@item @ref{W0228} An implicit type conversion from double to signed long.
@item @ref{W0229} An implicit type conversion from double to unsigned long.
@item @ref{W0230} An implicit type conversion from long double to char.
@item @ref{W0231} An implicit type conversion from long double to signed char.
@item @ref{W0232} An implicit type conversion from long double to unsigned char.
@item @ref{W0233} An implicit type conversion from long double to signed short.
@item @ref{W0234} An implicit type conversion from long double to unsigned short.
@item @ref{W0235} An implicit type conversion from long double to signed int.
@item @ref{W0236} An implicit type conversion from long double to unsigned int.
@item @ref{W0237} An implicit type conversion from long double to signed long.
@item @ref{W0238} An implicit type conversion from long double to unsigned long.
@item @ref{W0239} An implicit type conversion from float to signed long long.
@item @ref{W0240} An implicit type conversion from float to unsigned long long.
@item @ref{W0241} An implicit type conversion from double to signed long long.
@item @ref{W0242} An implicit type conversion from double to unsigned long long.
@item @ref{W0243} An implicit type conversion from long double to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0245
@section W0245
@cindex W0245

@subsection Message body

An implicit type conversion from unsigned char to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(unsigned char a)
{
    short b = a; /* W0245 */
    foo(a); /* W0245 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0246
@section W0246
@cindex W0246

@subsection Message body

Implicit conversion from `unsigned char' to `signed int'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(unsigned char a)
{
    int b = a; /* W0246 */
    foo(a); /* W0246 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0247
@section W0247
@cindex W0247

@subsection Message body

An implicit type conversion from unsigned char to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(unsigned char a)
{
    long b = a; /* W0247 */
    foo(a); /* W0247 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0248
@section W0248
@cindex W0248

@subsection Message body

An implicit type conversion from unsigned short to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(unsigned short a)
{
    int b = a; /* W0248 */
    foo(a); /* W0248 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0249
@section W0249
@cindex W0249

@subsection Message body

An implicit type conversion from unsigned short to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(unsigned short a)
{
    long b = a; /* W0249 */
    foo(a); /* W0249 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0250
@section W0250
@cindex W0250

@subsection Message body

An implicit type conversion from unsigned int to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(unsigned int a)
{
    long b = a; /* W0250 */
    foo(a); /* W0250 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0251
@section W0251
@cindex W0251

@subsection Message body

An implicit type conversion from unsigned char to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(unsigned char a)
{
    long long b = a; /* W0251 */
    foo(a); /* W0251 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0252
@section W0252
@cindex W0252

@subsection Message body

An implicit type conversion from unsigned short to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(unsigned short a)
{
    long long b = a; /* W0252 */
    foo(a); /* W0252 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0253
@section W0253
@cindex W0253

@subsection Message body

An implicit type conversion from unsigned int to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(unsigned int a)
{
    long long b = a; /* W0253 */
    foo(a); /* W0253 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0254} An implicit type conversion from unsigned long to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0254
@section W0254
@cindex W0254

@subsection Message body

An implicit type conversion from unsigned long to signed long long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long long a);

void bar(unsigned long a)
{
    long long b = a; /* W0254 */
    foo(a); /* W0254 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0245} An implicit type conversion from unsigned char to signed short.
@item @ref{W0246} Implicit conversion from `unsigned char' to `signed int'.
@item @ref{W0247} An implicit type conversion from unsigned char to signed long.
@item @ref{W0248} An implicit type conversion from unsigned short to signed int.
@item @ref{W0249} An implicit type conversion from unsigned short to signed long.
@item @ref{W0250} An implicit type conversion from unsigned int to signed long.
@item @ref{W0251} An implicit type conversion from unsigned char to signed long long.
@item @ref{W0252} An implicit type conversion from unsigned short to signed long long.
@item @ref{W0253} An implicit type conversion from unsigned int to signed long long.
@end itemize

@subsection Since

1.0.0

@node W0255
@section W0255
@cindex W0255

@subsection Message body

A value of char type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    char a = 0;
    return a; /* W0255 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0256
@section W0256
@cindex W0256

@subsection Message body

A value of char type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    char a = 0;
    return a; /* W0256 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0257
@section W0257
@cindex W0257

@subsection Message body

A value of char type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    char a = 0;
    return a; /* W0257 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0258
@section W0258
@cindex W0258

@subsection Message body

A value of char type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    char a = 0;
    return a; /* W0258 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0259
@section W0259
@cindex W0259

@subsection Message body

A value of char type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    char a = 0;
    return a; /* W0259 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0260
@section W0260
@cindex W0260

@subsection Message body

A value of char type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    char a = 0;
    return a; /* W0260 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0261
@section W0261
@cindex W0261

@subsection Message body

A value of char type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    char a = 0;
    return a; /* W0261 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0262
@section W0262
@cindex W0262

@subsection Message body

A value of char type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    char a = 0;
    return a; /* W0262 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0263
@section W0263
@cindex W0263

@subsection Message body

A value of char type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    char a = 0;
    return a; /* W0263 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0264
@section W0264
@cindex W0264

@subsection Message body

A value of char type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    char a = 0;
    return a; /* W0264 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0265
@section W0265
@cindex W0265

@subsection Message body

A value of char type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    char a = 0;
    return a; /* W0265 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0266
@section W0266
@cindex W0266

@subsection Message body

A value of char type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    char a = 0;
    return a; /* W0266 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0267} A value of char type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0267
@section W0267
@cindex W0267

@subsection Message body

A value of char type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    char a = 0;
    return a; /* W0267 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0255} A value of char type is returned from `signed char %s()' function.
@item @ref{W0256} A value of char type is returned from `unsigned char %s()' function.
@item @ref{W0257} A value of char type is returned from `signed short %s()' function.
@item @ref{W0258} A value of char type is returned from `unsigned short %s()' function.
@item @ref{W0259} A value of char type is returned from `signed int %s()' function.
@item @ref{W0260} A value of char type is returned from `unsigned int %s()' function.
@item @ref{W0261} A value of char type is returned from `signed long %s()' function.
@item @ref{W0262} A value of char type is returned from `unsigned long %s()' function.
@item @ref{W0263} A value of char type is returned from `float %s()' function.
@item @ref{W0264} A value of char type is returned from `double %s()' function.
@item @ref{W0265} A value of char type is returned from `long double %s()' function.
@item @ref{W0266} A value of char type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0268
@section W0268
@cindex W0268

@subsection Message body

A value of unsigned char type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    unsigned char a = 0;
    return a; /* W0268 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0269
@section W0269
@cindex W0269

@subsection Message body

A value of signed char type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    signed char a = 0;
    return a; /* W0269 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0270
@section W0270
@cindex W0270

@subsection Message body

A value of signed short type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    short a = 0;
    return a; /* W0270 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0271
@section W0271
@cindex W0271

@subsection Message body

A value of unsigned short type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    unsigned short a = 0;
    return a; /* W0271 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0272
@section W0272
@cindex W0272

@subsection Message body

A value of signed int type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    int a = 0;
    return a; /* W0272 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0273
@section W0273
@cindex W0273

@subsection Message body

A value of unsigned int type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    unsigned int a = 0;
    return a; /* W0273 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0274
@section W0274
@cindex W0274

@subsection Message body

A value of signed long type is returned from `char %s()' function.

@subsection Content

@subsection Sample code

@verbatim
char func(void)
{
    long a = 0;
    return a; /* W0274 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0275
@section W0275
@cindex W0275

@subsection Message body

A value of unsigned long type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    unsigned long a = 0;
    return a; /* W0275 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0276
@section W0276
@cindex W0276

@subsection Message body

A value of signed long long type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    long long a = 0;
    return a; /* W0276 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0277} A value of unsigned long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0277
@section W0277
@cindex W0277

@subsection Message body

A value of unsigned long long type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    unsigned long long a = 0;
    return a; /* W0277 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0268} A value of unsigned char type is returned from `char %s()' function.
@item @ref{W0269} A value of signed char type is returned from `char %s()' function.
@item @ref{W0270} A value of signed short type is returned from `char %s()' function.
@item @ref{W0271} A value of unsigned short type is returned from `char %s()' function.
@item @ref{W0272} A value of signed int type is returned from `char %s()' function.
@item @ref{W0273} A value of unsigned int type is returned from `char %s()' function.
@item @ref{W0274} A value of signed long type is returned from `char %s()' function.
@item @ref{W0275} A value of unsigned long type is returned from `char %s()' function.
@item @ref{W0276} A value of signed long long type is returned from `char %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0278
@section W0278
@cindex W0278

@subsection Message body

A value of unsigned char type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    unsigned char a = 0;
    return a; /* W0278 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0279
@section W0279
@cindex W0279

@subsection Message body

A value of unsigned short type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    unsigned short a = 0;
    return a; /* W0279 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0280
@section W0280
@cindex W0280

@subsection Message body

A value of unsigned short type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    unsigned short a = 0;
    return a; /* W0280 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0281
@section W0281
@cindex W0281

@subsection Message body

A value of unsigned int type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    unsigned int a = 0;
    return a; /* W0281 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0282
@section W0282
@cindex W0282

@subsection Message body

A value of unsigned int type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    unsigned int a = 0;
    return a; /* W0282 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0283
@section W0283
@cindex W0283

@subsection Message body

A value of unsigned int type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    unsigned int a = 0;
    return a; /* W0283 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0284
@section W0284
@cindex W0284

@subsection Message body

A value of unsigned long type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    unsigned long a = 0;
    return a; /* W0284 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0285
@section W0285
@cindex W0285

@subsection Message body

A value of unsigned long type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    unsigned long a = 0;
    return a; /* W0285 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0286
@section W0286
@cindex W0286

@subsection Message body

A value of unsigned long type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    unsigned long a = 0;
    return a; /* W0286 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0287
@section W0287
@cindex W0287

@subsection Message body

A value of unsigned long type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    unsigned long a = 0;
    return a; /* W0287 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0288
@section W0288
@cindex W0288

@subsection Message body

A value of unsigned long long type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    unsigned long long a = 0;
    return a; /* W0288 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0289
@section W0289
@cindex W0289

@subsection Message body

A value of unsigned long long type is returned from `short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    unsigned long long a = 0;
    return a; /* W0289 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0290
@section W0290
@cindex W0290

@subsection Message body

A value of unsigned long long type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    unsigned long long a = 0;
    return a; /* W0290 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0291
@section W0291
@cindex W0291

@subsection Message body

A value of unsigned long long type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    unsigned long long a = 0;
    return a; /* W0291 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0292} A value of unsigned long long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0292
@section W0292
@cindex W0292

@subsection Message body

A value of unsigned long long type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    unsigned long long a = 0;
    return a; /* W0292 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0278} A value of unsigned char type is returned from `signed char %s()' function.
@item @ref{W0279} A value of unsigned short type is returned from `signed char %s()' function.
@item @ref{W0280} A value of unsigned short type is returned from `signed short %s()' function.
@item @ref{W0281} A value of unsigned int type is returned from `signed char %s()' function.
@item @ref{W0282} A value of unsigned int type is returned from `signed short %s()' function.
@item @ref{W0283} A value of unsigned int type is returned from `signed int %s()' function.
@item @ref{W0284} A value of unsigned long type is returned from `signed char %s()' function.
@item @ref{W0285} A value of unsigned long type is returned from `signed short %s()' function.
@item @ref{W0286} A value of unsigned long type is returned from `signed int %s()' function.
@item @ref{W0287} A value of unsigned long type is returned from `signed long %s()' function.
@item @ref{W0288} A value of unsigned long long type is returned from `signed char %s()' function.
@item @ref{W0289} A value of unsigned long long type is returned from `signed short %s()' function.
@item @ref{W0290} A value of unsigned long long type is returned from `signed int %s()' function.
@item @ref{W0291} A value of unsigned long long type is returned from `signed long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0293
@section W0293
@cindex W0293

@subsection Message body

A value of signed char type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    signed char a = 0;
    return a; /* W0293 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0294
@section W0294
@cindex W0294

@subsection Message body

A value of signed char type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    signed char a = 0;
    return a; /* W0294 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0295
@section W0295
@cindex W0295

@subsection Message body

A value of signed char type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    signed char a = 0;
    return a; /* W0295 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0296
@section W0296
@cindex W0296

@subsection Message body

A value of signed char type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    signed char a = 0;
    return a; /* W0296 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0297
@section W0297
@cindex W0297

@subsection Message body

A value of signed short type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    short a = 0;
    return a; /* W0297 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0298
@section W0298
@cindex W0298

@subsection Message body

A value of short type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    short a = 0;
    return a; /* W0298 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0299
@section W0299
@cindex W0299

@subsection Message body

A value of signed short type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    short a = 0;
    return a; /* W0299 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0300
@section W0300
@cindex W0300

@subsection Message body

A value of signed short type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    short a = 0;
    return a; /* W0300 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0301
@section W0301
@cindex W0301

@subsection Message body

A value of signed int type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    int a = 0;
    return a; /* W0301 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0302
@section W0302
@cindex W0302

@subsection Message body

A value of signed int type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    int a = 0;
    return a; /* W0302 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0303
@section W0303
@cindex W0303

@subsection Message body

A value of signed int type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    int a = 0;
    return a; /* W0303 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0304
@section W0304
@cindex W0304

@subsection Message body

A value of signed int type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    int a = 0;
    return a; /* W0304 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0305
@section W0305
@cindex W0305

@subsection Message body

A value of signed long type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    long a = 0;
    return a; /* W0305 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0306
@section W0306
@cindex W0306

@subsection Message body

A value of signed long type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    long a = 0;
    return a; /* W0306 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0307
@section W0307
@cindex W0307

@subsection Message body

A value of signed long type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    long a = 0;
    return a; /* W0307 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0308
@section W0308
@cindex W0308

@subsection Message body

A value of signed long type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    long a = 0;
    return a; /* W0308 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0309
@section W0309
@cindex W0309

@subsection Message body

A value of signed char type is returned from `unsigned long long %s()' function.
@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    signed char a = 0;
    return a; /* W0309 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0310
@section W0310
@cindex W0310

@subsection Message body

A value of signed short type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    short a = 0;
    return a; /* W0310 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0311
@section W0311
@cindex W0311

@subsection Message body

A value of signed int type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    int a = 0;
    return a; /* W0311 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0312
@section W0312
@cindex W0312

@subsection Message body

A value of signed long type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    long a = 0;
    return a; /* W0312 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0313
@section W0313
@cindex W0313

@subsection Message body

A value of signed long long type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    long long a = 0;
    return a; /* W0313 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0314
@section W0314
@cindex W0314

@subsection Message body

A value of signed long long type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    long long a = 0;
    return a; /* W0314 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0315
@section W0315
@cindex W0315

@subsection Message body

A value of signed long long type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    long long a = 0;
    return a; /* W0315 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0316
@section W0316
@cindex W0316

@subsection Message body

A value of signed long long type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    long long a = 0;
    return a; /* W0316 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0317} A value of signed long long type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0317
@section W0317
@cindex W0317

@subsection Message body

A value of signed long long type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    long long a = 0;
    return a; /* W0317 */
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0293} A value of signed char type is returned from `unsigned char %s()' function.
@item @ref{W0294} A value of signed char type is returned from `unsigned short %s()' function.
@item @ref{W0295} A value of signed char type is returned from `unsigned int %s()' function.
@item @ref{W0296} A value of signed char type is returned from `unsigned long %s()' function.
@item @ref{W0297} A value of signed short type is returned from `unsigned char %s()' function.
@item @ref{W0298} A value of signed short type is returned from `unsigned short %s()' function.
@item @ref{W0299} A value of signed short type is returned from `unsigned int %s()' function.
@item @ref{W0300} A value of signed short type is returned from `unsigned long %s()' function.
@item @ref{W0301} A value of signed int type is returned from `unsigned char %s()' function.
@item @ref{W0302} A value of signed int type is returned from `unsigned short %s()' function.
@item @ref{W0303} A value of signed int type is returned from `unsigned int %s()' function.
@item @ref{W0304} A value of signed int type is returned from `unsigned long %s()' function.
@item @ref{W0305} A value of signed long type is returned from `unsigned char %s()' function.
@item @ref{W0306} A value of signed long type is returned from `unsigned short %s()' function.
@item @ref{W0307} A value of signed long type is returned from `unsigned int %s()' function.
@item @ref{W0308} A value of signed long type is returned from `unsigned long %s()' function.
@item @ref{W0309} A value of signed char type is returned from `unsigned long long %s()' function.
@item @ref{W0310} A value of signed short type is returned from `unsigned long long %s()' function.
@item @ref{W0311} A value of signed int type is returned from `unsigned long long %s()' function.
@item @ref{W0312} A value of signed long type is returned from `unsigned long long %s()' function.
@item @ref{W0313} A value of signed long long type is returned from `unsigned char %s()' function.
@item @ref{W0314} A value of signed long long type is returned from `unsigned short %s()' function.
@item @ref{W0315} A value of signed long long type is returned from `unsigned int %s()' function.
@item @ref{W0316} A value of signed long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0318
@section W0318
@cindex W0318

@subsection Message body

A value of unsigned char type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned char a = 0;
    return a; /* W0318 */
}
@end verbatim
@subsection Related message

@itemize
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0319
@section W0319
@cindex W0319

@subsection Message body

A value of unsigned char type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned char a = 0;
    return a; /* W0319 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0320
@section W0320
@cindex W0320

@subsection Message body

A value of unsigned char type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned char a = 0;
    return a; /* W0320 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0321
@section W0321
@cindex W0321

@subsection Message body

A value of signed char type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned char a = 0;
    return a; /* W0321 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0322
@section W0322
@cindex W0322

@subsection Message body

A value of signed char type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned char a = 0;
    return a; /* W0322 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0323
@section W0323
@cindex W0323

@subsection Message body

A value of signed char type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned char a = 0;
    return a; /* W0323 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0324
@section W0324
@cindex W0324

@subsection Message body

A value of signed short type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    short a = 0;
    return a; /* W0324 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0325
@section W0325
@cindex W0325

@subsection Message body

A value of signed short type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    short a = 0;
    return a; /* W0325 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0326
@section W0326
@cindex W0326

@subsection Message body

A value of signed short type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    short a = 0;
    return a; /* W0326 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0327
@section W0327
@cindex W0327

@subsection Message body

A value of unsigned short type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned short a = 0;
    return a; /* W0327 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0328
@section W0328
@cindex W0328

@subsection Message body

A value of unsigned short type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned short a = 0;
    return a; /* W0328 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0329
@section W0329
@cindex W0329

@subsection Message body

A value of unsigned short type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned short a = 0;
    return a; /* W0329 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0330
@section W0330
@cindex W0330

@subsection Message body

A value of signed int type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    int a = 0;
    return a; /* W0330 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0331
@section W0331
@cindex W0331

@subsection Message body

A value of signed int type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    int a = 0;
    return a; /* W0331 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0332
@section W0332
@cindex W0332

@subsection Message body

A value of signed int type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    int a = 0;
    return a; /* W0332 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0333
@section W0333
@cindex W0333

@subsection Message body

A value of unsigned int type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned int a = 0;
    return a; /* W0333 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0334
@section W0334
@cindex W0334

@subsection Message body

A value of unsigned int type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned int a = 0;
    return a; /* W0334 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0335
@section W0335
@cindex W0335

@subsection Message body

A value of unsigned int type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned int a = 0;
    return a; /* W0335 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0336
@section W0336
@cindex W0336

@subsection Message body

A value of signed long type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    long a = 0;
    return a; /* W0336 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0337
@section W0337
@cindex W0337

@subsection Message body

A value of signed long type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    long a = 0;
    return a; /* W0337 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0338
@section W0338
@cindex W0338

@subsection Message body

A value of signed long type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    long a = 0;
    return a; /* W0338 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0339
@section W0339
@cindex W0339

@subsection Message body

A value of unsigned long type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned long a = 0;
    return a; /* W0339 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0340
@section W0340
@cindex W0340

@subsection Message body

A value of unsigned long type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned long a = 0;
    return a; /* W0340 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0341
@section W0341
@cindex W0341

@subsection Message body

A value of unsigned long type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned long a = 0;
    return a; /* W0341 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0342
@section W0342
@cindex W0342

@subsection Message body

A value of signed long long type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    long long a = 0;
    return a; /* W0342 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0343
@section W0343
@cindex W0343

@subsection Message body

A value of signed long long type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    long long a = 0;
    return a; /* W0343 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0344
@section W0344
@cindex W0344

@subsection Message body

A value of signed long long type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    long long a = 0;
    return a; /* W0344 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0345
@section W0345
@cindex W0345

@subsection Message body

A value of unsigned long long type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
float func(void)
{
    unsigned long long a = 0;
    return a; /* W0345 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0346
@section W0346
@cindex W0346

@subsection Message body

A value of unsigned long long type is returned from `double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
double func(void)
{
    unsigned long long a = 0;
    return a; /* W0346 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0347} A value of unsigned long long type is returned from `long double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0347
@section W0347

@subsection Message body

A value of unsigned long long type is returned from `long double %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long double func(void)
{
    unsigned long long a = 0;
    return a; /* W0347 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0318} A value of unsigned char type is returned from `float %s()' function.
@item @ref{W0319} A value of unsigned char type is returned from `double %s()' function.
@item @ref{W0320} A value of unsigned char type is returned from `long double %s()' function.
@item @ref{W0321} A value of signed char type is returned from `float %s()' function.
@item @ref{W0322} A value of signed char type is returned from `double %s()' function.
@item @ref{W0323} A value of signed char type is returned from `long double %s()' function.
@item @ref{W0324} A value of signed short type is returned from `float %s()' function.
@item @ref{W0325} A value of signed short type is returned from `double %s()' function.
@item @ref{W0326} A value of signed short type is returned from `long double %s()' function.
@item @ref{W0327} A value of unsigned short type is returned from `float %s()' function.
@item @ref{W0328} A value of unsigned short type is returned from `double %s()' function.
@item @ref{W0329} A value of unsigned short type is returned from `long double %s()' function.
@item @ref{W0330} A value of signed int type is returned from `float %s()' function.
@item @ref{W0331} A value of signed int type is returned from `double %s()' function.
@item @ref{W0332} A value of signed int type is returned from `long double %s()' function.
@item @ref{W0333} A value of unsigned int type is returned from `float %s()' function.
@item @ref{W0334} A value of unsigned int type is returned from `double %s()' function.
@item @ref{W0335} A value of unsigned int type is returned from `long double %s()' function.
@item @ref{W0336} A value of signed long type is returned from `float %s()' function.
@item @ref{W0337} A value of signed long type is returned from `double %s()' function.
@item @ref{W0338} A value of signed long type is returned from `long double %s()' function.
@item @ref{W0339} A value of unsigned long type is returned from `float %s()' function.
@item @ref{W0340} A value of unsigned long type is returned from `double %s()' function.
@item @ref{W0341} A value of unsigned long type is returned from `long double %s()' function.
@item @ref{W0342} A value of signed long long type is returned from `float %s()' function.
@item @ref{W0343} A value of signed long long type is returned from `double %s()' function.
@item @ref{W0344} A value of signed long long type is returned from `long double %s()' function.
@item @ref{W0345} A value of unsigned long long type is returned from `float %s()' function.
@item @ref{W0346} A value of unsigned long long type is returned from `double %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0348
@section W0348
@cindex W0348

@subsection Message body

A value of float type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    float a = 0;
    return a; /* W0348 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0349
@section W0349
@cindex W0349

@subsection Message body

A value of float type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    float a = 0;
    return a; /* W0349 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0350
@section W0350
@cindex W0350

@subsection Message body

A value of float type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    float a = 0;
    return a; /* W0350 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0351
@section W0351
@cindex W0351

@subsection Message body

A value of float type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    float a = 0;
    return a; /* W0351 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0352
@section W0352
@cindex W0352

@subsection Message body

A value of float type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    float a = 0;
    return a; /* W0352 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0353
@section W0353
@cindex W0353

@subsection Message body

A value of float type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    float a = 0;
    return a; /* W0353 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0354
@section W0354
@cindex W0354

@subsection Message body

A value of float type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    float a = 0;
    return a; /* W0354 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0355
@section W0355
@cindex W0355

@subsection Message body

A value of float type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    float a = 0;
    return a; /* W0355 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0356
@section W0356
@cindex W0356

@subsection Message body

A value of float type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    float a = 0;
    return a; /* W0356 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0357
@section W0357
@cindex W0357

@subsection Message body

A value of double type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    double a = 0;
    return a; /* W0357 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0358
@section W0358
@cindex W0358

@subsection Message body

A value of double type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    double a = 0;
    return a; /* W0358 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0359
@section W0359
@cindex W0359

@subsection Message body

A value of double type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    double a = 0;
    return a; /* W0359 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0360
@section W0360
@cindex W0360

@subsection Message body

A value of double type is returned from `short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    double a = 0;
    return a; /* W0360 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0361
@section W0361
@cindex W0361

@subsection Message body

A value of double type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    double a = 0;
    return a; /* W0361 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0362
@section W0362
@cindex W0362

@subsection Message body

A value of double type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    double a = 0;
    return a; /* W0362 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0363
@section W0363
@cindex W0363

@subsection Message body

A value of double type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    double a = 0;
    return a; /* W0363 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0364
@section W0364
@cindex W0364

@subsection Message body

A value of double type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    double a = 0;
    return a; /* W0364 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0365
@section W0365
@cindex W0365

@subsection Message body

A value of double type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    double a = 0;
    return a; /* W0365 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0366
@section W0366
@cindex W0366

@subsection Message body

A value of long double type is returned from `char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char func(void)
{
    long double a = 0;
    return a; /* W0366 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0367
@section W0367
@cindex W0367

@subsection Message body

A value of long double type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    long double a = 0;
    return a; /* W0367 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0368
@section W0368
@cindex W0368

@subsection Message body

A value of long double type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    long double a = 0;
    return a; /* W0368 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0369
@section W0369
@cindex W0369

@subsection Message body

A value of long double type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    long double a = 0;
    return a; /* W0369 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0370
@section W0370
@cindex W0370

@subsection Message body

A value of long double type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    long double a = 0;
    return a; /* W0370 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0371
@section W0371
@cindex W0371

@subsection Message body

A value of long double type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    long double a = 0;
    return a; /* W0371 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0372
@section W0372
@cindex W0372

@subsection Message body

A value of long double type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    long double a = 0;
    return a; /* W0372 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0373
@section W0373
@cindex W0373

@subsection Message body

A value of long double type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    long double a = 0;
    return a; /* W0373 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0374
@section W0374
@cindex W0374

@subsection Message body

A value of long double type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    long double a = 0;
    return a; /* W0374 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0375
@section W0375
@cindex W0375

@subsection Message body

A value of float type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    float a = 0;
    return a; /* W0375 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0376
@section W0376
@cindex W0376

@subsection Message body

A value of float type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    float a = 0;
    return a; /* W0376 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0377
@section W0377
@cindex W0377

@subsection Message body

A value of double type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    double a = 0;
    return a; /* W0377 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0378
@section W0378
@cindex W0378

@subsection Message body

A value of double type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    double a = 0;
    return a; /* W0378 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0379
@section W0379
@cindex W0379

@subsection Message body

A value of long double type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    long double a = 0;
    return a; /* W0379 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0380} A value of long double type is returned from `unsigned long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0380
@section W0380
@cindex W0380

@subsection Message body

A value of long double type is returned from `unsigned long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long long func(void)
{
    long double a = 0;
    return a; /* W0380 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0348} A value of float type is returned from `char %s()' function.
@item @ref{W0349} A value of float type is returned from `signed char %s()' function.
@item @ref{W0350} A value of float type is returned from `unsigned char %s()' function.
@item @ref{W0351} A value of float type is returned from `signed short %s()' function.
@item @ref{W0352} A value of float type is returned from `unsigned short %s()' function.
@item @ref{W0353} A value of float type is returned from `signed int %s()' function.
@item @ref{W0354} A value of float type is returned from `unsigned int %s()' function.
@item @ref{W0355} A value of float type is returned from `signed long %s()' function.
@item @ref{W0356} A value of float type is returned from `unsigned long %s()' function.
@item @ref{W0357} A value of double type is returned from `char %s()' function.
@item @ref{W0358} A value of double type is returned from `signed char %s()' function.
@item @ref{W0359} A value of double type is returned from `unsigned char %s()' function.
@item @ref{W0360} A value of double type is returned from `signed short %s()' function.
@item @ref{W0361} A value of double type is returned from `unsigned short %s()' function.
@item @ref{W0362} A value of double type is returned from `signed int %s()' function.
@item @ref{W0363} A value of double type is returned from `unsigned int %s()' function.
@item @ref{W0364} A value of double type is returned from `signed long %s()' function.
@item @ref{W0365} A value of double type is returned from `unsigned long %s()' function.
@item @ref{W0366} A value of long double type is returned from `char %s()' function.
@item @ref{W0367} A value of long double type is returned from `signed char %s()' function.
@item @ref{W0368} A value of long double type is returned from `unsigned char %s()' function.
@item @ref{W0369} A value of long double type is returned from `signed short %s()' function.
@item @ref{W0370} A value of long double type is returned from `unsigned short %s()' function.
@item @ref{W0371} A value of long double type is returned from `signed int %s()' function.
@item @ref{W0372} A value of long double type is returned from `unsigned int %s()' function.
@item @ref{W0373} A value of long double type is returned from `signed long %s()' function.
@item @ref{W0374} A value of long double type is returned from `unsigned long %s()' function.
@item @ref{W0375} A value of float type is returned from `signed long long %s()' function.
@item @ref{W0376} A value of float type is returned from `unsigned long long %s()' function.
@item @ref{W0377} A value of double type is returned from `signed long long %s()' function.
@item @ref{W0378} A value of double type is returned from `unsigned long long %s()' function.
@item @ref{W0379} A value of long double type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0381
@section W0381
@cindex W0381

@subsection Message body

A value of signed short type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    short a = 0;
    return a; /* W0381 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0382
@section W0382
@cindex W0382

@subsection Message body

A value of unsigned short type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    unsigned short a = 0;
    return a; /* W0382 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0383
@section W0383
@cindex W0383

@subsection Message body

A value of signed int type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    int a = 0;
    return a; /* W0383 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0384
@section W0384
@cindex W0384

@subsection Message body

A value of signed int type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    int a = 0;
    return a; /* W0384 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0385
@section W0385
@cindex W0385

@subsection Message body

A value of unsigned int type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    unsigned int a = 0;
    return a; /* W0385 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0386
@section W0386
@cindex W0386

@subsection Message body

A value of unsigned int type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    unsigned int a = 0;
    return a; /* W0386 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0387
@section W0387
@cindex W0387

@subsection Message body

A value of signed long type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    long a = 0;
    return a; /* W0387 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0388
@section W0388
@cindex W0388

@subsection Message body

A value of signed long type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    long a = 0;
    return a; /* W0388 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0389
@section W0389
@cindex W0389

@subsection Message body

A value of signed long type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    long a = 0;
    return a; /* W0389 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0390
@section W0390
@cindex W0390

@subsection Message body

A value of unsigned long type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    unsigned long a = 0;
    return a; /* W0390 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0391
@section W0391
@cindex W0391

@subsection Message body

A value of unsigned long type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    unsigned long a = 0;
    return a; /* W0391 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0392
@section W0392
@cindex W0392

@subsection Message body

A value of unsigned long type is returned from `unsigned int %s()' function.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    unsigned long a = 0;
    return a; /* W0392 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0393
@section W0393
@cindex W0393

@subsection Message body

A value of signed long long type is returned from `signed char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char func(void)
{
    long long a = 0;
    return a; /* W0393 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0394
@section W0394
@cindex W0394

@subsection Message body

A value of signed long long type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    long long a = 0;
    return a; /* W0394 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0395
@section W0395
@cindex W0395

@subsection Message body

A value of signed long long type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    long long a = 0;
    return a; /* W0395 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0396
@section W0396
@cindex W0396

@subsection Message body

A value of signed long long type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    long long a = 0;
    return a; /* W0396 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0397
@section W0397
@cindex W0397

@subsection Message body

A value of unsigned long long type is returned from `unsigned char %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned char func(void)
{
    unsigned long long a = 0;
    return a; /* W0397 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0398
@section W0398
@cindex W0398

@subsection Message body

A value of unsigned long long type is returned from `unsigned short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned short func(void)
{
    unsigned long long a = 0;
    return a; /* W0398 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0399
@section W0399
@cindex W0399

@subsection Message body

A value of unsigned long long type is returned from `unsigned int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(void)
{
    unsigned long long a = 0;
    return a; /* W0399 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0400} A value of unsigned long long type is returned from `unsigned long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0400
@section W0400
@cindex W0400

@subsection Message body

A value of unsigned long long type is returned from `unsigned long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned long func(void)
{
    unsigned long long a = 0;
    return a; /* W0400 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0381} A value of signed short type is returned from `signed char %s()' function.
@item @ref{W0382} A value of unsigned short type is returned from `unsigned char %s()' function.
@item @ref{W0383} A value of signed int type is returned from `signed char %s()' function.
@item @ref{W0384} A value of signed int type is returned from `signed short %s()' function.
@item @ref{W0385} A value of unsigned int type is returned from `unsigned char %s()' function.
@item @ref{W0386} A value of unsigned int type is returned from `unsigned short %s()' function.
@item @ref{W0387} A value of signed long type is returned from `signed char %s()' function.
@item @ref{W0388} A value of signed long type is returned from `signed short %s()' function.
@item @ref{W0389} A value of signed long type is returned from `signed int %s()' function.
@item @ref{W0390} A value of unsigned long type is returned from `unsigned char %s()' function.
@item @ref{W0391} A value of unsigned long type is returned from `unsigned short %s()' function.
@item @ref{W0392} A value of unsigned long type is returned from `unsigned int %s()' function.
@item @ref{W0393} A value of signed long long type is returned from `signed char %s()' function.
@item @ref{W0394} A value of signed long long type is returned from `signed short %s()' function.
@item @ref{W0395} A value of signed long long type is returned from `signed int %s()' function.
@item @ref{W0396} A value of signed long long type is returned from `signed long %s()' function.
@item @ref{W0397} A value of unsigned long long type is returned from `unsigned char %s()' function.
@item @ref{W0398} A value of unsigned long long type is returned from `unsigned short %s()' function.
@item @ref{W0399} A value of unsigned long long type is returned from `unsigned int %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0401
@section W0401
@cindex W0401

@subsection Message body

A value of unsigned char type is returned from `signed short %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
short func(void)
{
    unsigned char a = 0;
    return a; /* W0401 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0402
@section W0402
@cindex W0402

@subsection Message body

A value of unsigned char type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    unsigned char a = 0;
    return a; /* W0402 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0403
@section W0403
@cindex W0403

@subsection Message body

A value of unsigned char type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    unsigned char a = 0;
    return a; /* W0403 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0404
@section W0404
@cindex W0404

@subsection Message body

A value of unsigned short type is returned from `signed int %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    unsigned short a = 0;
    return a; /* W0404 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0405
@section W0405
@cindex W0405

@subsection Message body

A value of unsigned short type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    unsigned short a = 0;
    return a; /* W0405 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0406
@section W0406
@cindex W0406

@subsection Message body

A value of unsigned int type is returned from `signed long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long func(void)
{
    unsigned int a = 0;
    return a; /* W0406 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0407
@section W0407
@cindex W0407

@subsection Message body

A value of unsigned char type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    unsigned char a = 0;
    return a; /* W0407 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0408
@section W0408
@cindex W0408

@subsection Message body

A value of unsigned short type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    unsigned short a = 0;
    return a; /* W0408 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0409
@section W0409
@cindex W0409

@subsection Message body

A value of unsigned int type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    unsigned int a = 0;
    return a; /* W0409 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0410} A value of unsigned long type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0410
@section W0410
@cindex W0410

@subsection Message body

A value of unsigned long type is returned from `signed long long %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long func(void)
{
    unsigned long a = 0;
    return a; /* W0410 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0401} A value of unsigned char type is returned from `signed short %s()' function.
@item @ref{W0402} A value of unsigned char type is returned from `signed int %s()' function.
@item @ref{W0403} A value of unsigned char type is returned from `signed long %s()' function.
@item @ref{W0404} A value of unsigned short type is returned from `signed int %s()' function.
@item @ref{W0405} A value of unsigned short type is returned from `signed long %s()' function.
@item @ref{W0406} A value of unsigned int type is returned from `signed long %s()' function.
@item @ref{W0407} A value of unsigned char type is returned from `signed long long %s()' function.
@item @ref{W0408} A value of unsigned short type is returned from `signed long long %s()' function.
@item @ref{W0409} A value of unsigned int type is returned from `signed long long %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0411
@section W0411
@cindex W0411

@subsection Message body

The initialization of enumeration should be only the starting, whole or not at all.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum SEASON1 { /* W0411 */
    SPRING,
    SUMMER = 4,
    AUTUMN = 8,
    WINTER
};

enum SEASON2 { /* OK */
    SPRING,
    SUMMER,
    AUTUMN,
    WINTER
};

enum SEASON3 { /* OK */
    SPRING = 0,
    SUMMER = 1,
    AUTUMN = 2,
    WINTER = 3
};

enum SEASON4 { /* OK */
    SPRING = 1,
    SUMMER,
    AUTUMN,
    WINTER
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0413
@section W0413
@cindex W0413

@subsection Message body

The body of control statement is unenclosed by curly brace `@{@}' block.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
if (x > 0)
    x++; /* W0413 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0414} Body of the controlling statement in a line is not enclosed by `@{@}'.
@end itemize

@subsection Since

1.0.0

@node W0414
@section W0414
@cindex W0414

@subsection Message body

Body of the controlling statement in a line is not enclosed by `@{@}'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
if (x > 0) x++; /* W0414 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0413} The body of control statement is unenclosed by curly brace `@{@}' block.
@end itemize

@subsection Since

1.0.0

@node W0421
@section W0421
@cindex W0421

@subsection Message body

Value of the dereferencing pointer must be NULL.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int *p)
{
    int b;

    if (p) {
        b = *p; /* OK */
    }
    else {
        b = *p; /* W0421 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1004} NULL value is assigned to the the problematic variable.
@item @ref{C1005} A value possibly be NULL is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0422
@section W0422
@cindex W0422

@subsection Message body

Value of the dereferencing pointer may be NULL.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int *p)
{
    int b;

    if (p) {
        b = *p; /* OK */
    }

    b = *p; /* W0422 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1004} NULL value is assigned to the the problematic variable.
@item @ref{C1005} A value possibly be NULL is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0423
@section W0423
@cindex W0423

@subsection Message body

Arithmetic operation is being made to the pointer which its value will be NULL.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *func(int *p)
{
    if (p) {
        return p + 1; /* OK */
    }
    else {
        return p + 1; /* W0423 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1004} NULL value is assigned to the the problematic variable.
@item @ref{C1005} A value possibly be NULL is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0424
@section W0424
@cindex W0424

@subsection Message body

Arithmetic operation is being made to the pointer which its value might be NULL.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *func(int *p)
{
    int a;

    if (p) {
        a = *(p + 1); /* OK */
    }

    return p + 1; /* W0424 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1004} NULL value is assigned to the the problematic variable.
@item @ref{C1005} A value possibly be NULL is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0425
@section W0425
@cindex W0425

@subsection Message body

There are several definitions or statements in a line.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a, b; /* W0425 */
int a; int b; /* W0425 */
struct C { int i; } c = { 0 }; c.i = a; /* W0425 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0431
@section W0431
@cindex W0431

@subsection Message body

This line begins at more left than previous lines of the same indentation level.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func()
{
    int a;
int b; /* W0431 */
    a = var();
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0432} Indentation of this line does not comply with the project's indent style.
@end itemize

@subsection Since

1.0.0

@node W0432
@section W0432
@cindex W0432

@subsection Message body

Indentation of this line does not comply with the project's indent style.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func()
{
    int a;
      int b; /* W0432 */
    a = var();
}
@end verbatim


@subsection Related message

@itemize
@item @ref{W0431} This line begins at more left than previous lines of the same indentation level.
@end itemize

@subsection Since

1.0.0

@node W0440
@section W0440
@cindex W0440

@subsection Message body

An indent of this close bracket `@}' is not correspond to the open bracket `@{'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func()
{
    if (x == 0)
    {
        if (y == 0)
        {
            ...snip...
    } /* W0440 */
        } /* W0440 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0441
@section W0441
@cindex W0441

@subsection Message body

The type of integer literal which doesn't have a suffix is not int type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i = 0x1234; /* W0441 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0442
@section W0442
@cindex W0442

@subsection Message body

A function-like macro is defined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MAX(a, b) (a < b ? b : a) /* W0442 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0443} This function-like macro might be replaced with a function.
@end itemize

@subsection Since

1.0.0

@node W0443
@section W0443
@cindex W0443

@subsection Message body

This function-like macro might be replaced with a function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(a, b) (a * b) /* W0443 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0442} A function-like macro is defined.
@end itemize

@subsection Since

1.0.0

@node W0444
@section W0444
@cindex W0444

@subsection Message body

`#'operator and `##'operator is used in a macro definition.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(a) L ## #a /* W0444 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0445} Multiple `##'operator is used in a macro definition.
@end itemize

@subsection Since

1.0.0

@node W0445
@section W0445
@cindex W0445

@subsection Message body

Multiple `##'operator is used in a macro definition.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(prefix, name, suffix) int i = prefix##name##suffix /* W0445 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0444} `#'operator and `##'operator is used in a macro definition.
@end itemize

@subsection Since

1.0.0

@node W0446
@section W0446
@cindex W0446

@subsection Message body

The result value of assignment operation is used.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;
    int b;

    a = b += 3; /* W0446 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0447
@section W0447
@cindex W0447

@subsection Message body

A comma operator is used except 'for' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = 1;
int b = 0;

int c = (b = a, a); /* W0447 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0456
@section W0456
@cindex W0456

@subsection Message body

An object or a function `%s which has external coupling is defined in a header file.

@subsection Content

Under construction.

@subsection Sample code

@file{test.h}
@verbatim
int num = 1; /* W0456 */

int func(void) /* W0456 */
{
    return num;
}
@end verbatim

@file{test.c}
@verbatim
#include "test.h"
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0457
@section W0457
@cindex W0457

@subsection Message body

The return value doesn't define explicitly in the function declaration or definition. It defined as 'int' implicitly.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
func1(void); /* W0457 */

func2(void) /* W0457 */
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0458
@section W0458
@cindex W0458

@subsection Message body

The type doesn't define explicitly in the object declaration or definition. It defined as 'int' implicitly.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
a; /* W0458 */
b = 0; /* W0458 */
extern c; /* W0458 */
static d; /* W0458 */

int func(e) /* W0458 */
{
    const f = e; /* W0458 */
    return f;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0459
@section W0459
@cindex W0459

@subsection Message body

A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;

if(a > 0) { /* W0459 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1003} The problematic variable is defined here without initializer.
@end itemize

@subsection Since

1.0.0

@node W0460
@section W0460
@cindex W0460

@subsection Message body

A value of variable `%s' wouldn't set when this expression is evaluated.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    int b;

    if (a == 0) {
        b = 1;
    }

    if (b > 0) { /* W0460 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1003} The problematic variable is defined here without initializer.
@end itemize

@subsection Since

1.0.0

@node W0461
@section W0461

@subsection Message body

A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int func1(const int *);

void func2(int a)
{
  int b;

  func1(&a); /* OK */
  func1(&b); /* W0461 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1003} The problematic variable is defined here without initializer.
@end itemize

@subsection Since

1.0.0

@node W0462
@section W0462
@cindex W0462

@subsection Message body

A pointer which the value will probably not set is used for the actual argument of the function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int func1(const int *);

int func2(int a)
{
    int b;

    if (a > 10) {
        b = a + 10;
    }

    func1(&b); /* W0462 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1003} The problematic variable is defined here without initializer.
@end itemize

@subsection Since

1.0.0

@node W0477
@section W0477
@cindex W0477

@subsection Message body

There are unpaired `[]',`()',`@{@}' in macro definition.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define BEGIN { /* W0477 */
#define END } /* W0477 */

void func()
BEGIN
    ...snip...
END
@end verbatim

@subsection Related message

@itemize
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0482} This macro defines either type specifier.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0478
@section W0478
@cindex W0478

@subsection Message body

This macro defines scraps of unrecognized codes.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MALLOC_OR_DIE(ptr, size) ptr = malloc(size); if (!ptr) exit(1); /* W0478 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0482} This macro defines either type specifier.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0479
@section W0479
@cindex W0479

@subsection Message body

This macro definition might be replaced with 'typedef' declaration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define foo unsigned int /* W0479 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0482} This macro defines either type specifier.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0480
@section W0480
@cindex W0480

@subsection Message body

This macro defines keyword of control statement or punctuator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define PLUS + /* W0480 */
#define LOOP while /* W0480 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0482} This macro defines either type specifier.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0481
@section W0481
@cindex W0481

@subsection Message body

This macro defines the block around by `@{@}'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define SETUP(a, b) /* W0481 */ \
    { \
        if (a) \
            b = 0; \
        else \
            b = 1; \
    }
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0482} This macro defines either type specifier.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0482
@section W0482
@cindex W0482

@subsection Message body

This macro defines either type specifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define COMPOSITE struct /* W0482 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0483} This macro defines the pair of storage class specifier and type specifier.
@end itemize

@subsection Since

1.0.0

@node W0483
@section W0483
@cindex W0483

@subsection Message body

This macro defines the pair of storage class specifier and type specifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define PRIVATE_FINAL static const /* W0483 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0477} There are unpaired `[]',`()',`@{@}' in macro definition.
@item @ref{W0478} This macro defines scraps of unrecognized codes.
@item @ref{W0479} This macro definition might be replaced with 'typedef' declaration.
@item @ref{W0480} This macro defines keyword of control statement or punctuator.
@item @ref{W0481} This macro defines the block around by `@{@}'.
@item @ref{W0482} This macro defines either type specifier.
@end itemize

@subsection Since

1.0.0

@node W0488
@section W0488
@cindex W0488

@subsection Message body

A function call `()', array's index operation `[]', or structure/union operation `->' or `.' are used with && or ||. It had better clear the coupling by using `()'.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
while (func(&a, &b) < 0 && i > 0) { /* W0488 */
    ...snip...
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0489} A monadic operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
@item @ref{W0490} A binary operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
@end itemize

@subsection Since

1.0.0

@node W0489
@section W0489
@cindex W0489

@subsection Message body

A monadic operator is used with `&&' or `||'. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int a, unsigned int b)
{
    unsigned int c = !a && b; /* W0489 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0488} A function call `()', array's index operation `[]', or structure/union operation `->' or `.' are used with && or ||. It had better clear the coupling by using `()'.
@item @ref{W0490} A binary operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
@end itemize

@subsection Since

1.0.0

@node W0490
@section W0490
@cindex W0490

@subsection Message body

A binary operator is used with `&&' or `||'. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int a, unsigned int b, unsigned int c)
{
    unsigned int d = a && b || c; /* W0490 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0488} A function call `()', array's index operation `[]', or structure/union operation `->' or `.' are used with && or ||. It had better clear the coupling by using `()'.
@item @ref{W0489} A monadic operator is used with `&&' or `||'. It had better clear the coupling by using `()'.
@end itemize

@subsection Since

1.0.0

@node W0491
@section W0491
@cindex W0491

@subsection Message body

The same identifier name `%s' is also used in the declaration of other namespace.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int foo;

struct foo { /* W0491 */
    int a;
    int b;
};
@end verbatim

@subsection Related message

@itemize
@item @ref{W0492} The same identifier name `%s' is also used in the member of structure/union, label, tag or normal identifier.
@end itemize

@subsection Since

1.0.0

@node W0492
@section W0492
@cindex W0492

@subsection Message body

The same identifier name `%s' is also used in the member of structure/union, label, tag or normal identifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int foo;

struct a {
    int foo; /* W0492 */
    int b;
};

void func(void)
{
    struct a a;
    int b; /* W0492 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0491} The same identifier name `%s' is also used in the declaration of other namespace.
@end itemize

@subsection Since

1.0.0

@node W0493
@section W0493
@cindex W0493

@subsection Message body

The value of structure or union is passed as the actual argument of the function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct STR {
    long a;
    long b;
};

extern int foo(struct STR s);

void func(void)
{
    struct STR s = { 0 };

    foo(s); /* W0493 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0495
@section W0495
@cindex W0495

@subsection Message body

operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int x = a % b  * c; /* W0495 */
}
@end verbatim

@subsection Related message
@itemize
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0496
@section W0496
@cindex W0496

@subsection Message body

A ternary operator is used several times. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c, int d, int e)
{
    int f = a ? b : c ? d : e; /* W0496 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0497
@section W0497
@cindex W0497

@subsection Message body

Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a << b << c; /* W0497 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0498
@section W0498
@cindex W0498

@subsection Message body

The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a - b + c; /* W0498 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0499
@section W0499
@cindex W0499

@subsection Message body

The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a << b >> c; /* W0499 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0500
@section W0500
@cindex W0500

@subsection Message body

The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a * b + c;  /* W0500 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0501
@section W0501
@cindex W0501

@subsection Message body

A ternary operator is used with binary operator. It had better clear the coupling by using `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a ? a : a + c; /* W0501 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0502} A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.
@end itemize

@subsection Since

1.0.0

@node W0502
@section W0502
@cindex W0502

@subsection Message body

A binary operator other than `+', `-', `*', `/' and `%%' appears with binary operator which has different precedence without expression grouping.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    int d = a != b << c; /* W0502 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0495} operator%% is used with other arithmetic operator. It had better clear the coupling by using `()'.
@item @ref{W0496} A ternary operator is used several times. It had better clear the coupling by using `()'.
@item @ref{W0497} Shift operator, relational operator or equivalent operator is used in several times. It had better clear the coupling by using `()'.
@item @ref{W0498} The different operator of same priority in the binary operator '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0499} The different operator of same priority in the binary operator except '+','-', '*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0500} The operator of different priority in the binary operator '+','-','*','/' is used. It had better clear the coupling by using `()'.
@item @ref{W0501} A ternary operator is used with binary operator. It had better clear the coupling by using `()'.
@end itemize

@subsection Since

1.0.0

@node W0508
@section W0508
@cindex W0508

@subsection Message body

There's a side effect at the right operand of `&&' or `||'operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
if ((a == b) && ((c = func()) == d)) /* W0508 */
@end verbatim

if @code{a==b} is true, the return value of @code{func()} is substituted for the @code{c}.

@subsection Related message

None.

@subsection Since

1.0.0

@node W0511
@section W0511
@cindex W0511

@subsection Message body

C++ style comment of `//' is used.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
// W0511
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0512
@section W0512
@cindex W0512

@subsection Message body

The result of `++' or `--' operator is used in the statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
a = b++ + --c + d++; /* W0512 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0525
@section W0525
@cindex W0525

@subsection Message body

A field named 1bit is declared by signed type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST {
    int bit:1; /* W0525 */
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0528
@section W0528
@cindex W0528

@subsection Message body

This macro defines octal constant value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO 0123 /* W0528 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0529} An octal literal is used.
@item @ref{W0530} An octal escape sequence is used in a character constant or a string literal.
@end itemize

@subsection Since

1.0.0

@node W0529
@section W0529
@cindex W0529

@subsection Message body

An octal literal is used.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO 0123

int a = 0123; /* W0529 */
int b = MACRO; /* W0529 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0528} This macro defines octal constant value.
@item @ref{W0530} An octal escape sequence is used in a character constant or a string literal.
@end itemize

@subsection Since

1.0.0

@node W0530
@section W0530
@cindex W0530

@subsection Message body

An octal escape sequence is used in a character constant or a string literal.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char *s = "\012"; /* W0530 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0528} This macro defines octal constant value.
@item @ref{W0529} An octal literal is used.
@end itemize

@subsection Since

1.0.0

@node W0532
@section W0532
@cindex W0532

@subsection Message body

'break' statement is used to exits 'case' or 'default' section, but it's not described at the end of 'case' section.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
switch (x) {
case 1:
    if (y == 0) {
        break; /* W0532 */
    }
    ...snip...
    break;
case 2:
    ...snip...
    break;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0534
@section W0534
@cindex W0534

@subsection Message body

A control variable `%s' is not initialized in this 'for' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i = 0;
int j;

for (; i < 10; i++) { /* W0534 */
}

for (j = 0; i < 20; i++) { /* W0534 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0535
@section W0535
@cindex W0535

@subsection Message body

A comma operator is used in a 'for' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i, j, k = 0;

for (i = 0, j = 0; i < 10; i++, j++, k--) { /* W0535 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0538
@section W0538
@cindex W0538

@subsection Message body

This 'default' label is not final label in this 'switch' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
switch (x) {
default: /* W0538 */
    ...snip...
case 1:
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0540
@section W0540
@cindex W0540

@subsection Message body

A function which the blank formal argument list is declared. `void' is omitted.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func() /* W0540 */
{
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0541
@section W0541
@cindex W0541

@subsection Message body

Inline assembly code should be encapsulated by macro.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define ASM_CODE asm("movl %ecx, %eax")

void foo(int arg1, int *arg2, int arg3)
{
    asm("movl %ecx, %eax"); /* W0541 */
    __asm__("movl %ecx, (%eax)"); /* W0541 */

    asm { /* W0541 */
        xorl eax, eax
    }

    ASM_CODE; /* OK */

    __asm__ volatile ( /* W0541 */
            "int $0x80"
            : "=a" (r)
              "+b" (arg1),
              "+c" (arg2),
              "+d" (arg3)
            : "a" (128)
            : "memory", "cc");
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W0542
@section W0542
@cindex W0542

@subsection Message body

There are identifiers in the part of formal argument in a function declaration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int i, char, int, char c); /* W0542 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0543
@section W0543
@cindex W0543

@subsection Message body

The identifier of formal argument in this function declaration is different from the past declaration of it.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int i1, int i2);

void func(int i2, int i1) /* W0543 */
{
    ...snip...
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0544} The identifier of formal argument in the function declaration is different from the declaration of function pointer.
@end itemize

@subsection Since

1.0.0

@node W0544
@section W0544
@cindex W0544

@subsection Message body

The identifier of formal argument in the function declaration is different from the declaration of function pointer.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int i1, int i2);
void (*p)(int i2, int i1) = &func; /* W0544 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0543} The identifier of formal argument in this function declaration is different from the past declaration of it.
@end itemize

@subsection Since

1.0.0

@node W0546
@section W0546
@cindex W0546

@subsection Message body

There is 'case' or 'default' label of switch statement in a nested block.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
switch (x) {
case 1:
    if (y > 0) {
    case 2: /* W0546 */
        break;
    }
    ...snip...
    break;
default:
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0549
@section W0549
@cindex W0549

@subsection Message body

A formal argument of macro doesn't enclosed by `()'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define ADD(a, b) a + b /* W0549 */

int x = 3 * ADD(1, 2);
@end verbatim

@code{(3 * 1) + 2 = 5} is substituted for the @code{x} instead of @code{3 * (1 + 2) = 9}.

@subsection Related message

None.

@subsection Since

1.0.0

@node W0551
@section W0551
@cindex W0551

@subsection Message body

An union type specifier is defined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
union UNI { /* W0551 */
    int a;
    short b;
    long c;
};
@end verbatim

@subsection Related message

@itemize
@item @ref{W0552} An union type object is defined.
@end itemize

@subsection Since

1.0.0

@node W0552
@section W0552
@cindex W0552

@subsection Message body

An union type object is defined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
union UNI {
    int a;
    short b;
    long c;
};

union UNI u; /* W0552 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0551} An union type specifier is defined.
@end itemize

@subsection Since

1.0.0

@node W0553
@section W0553
@cindex W0553

@subsection Message body

A pointer points to the function cast to other function pointer type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int func(void);

void (*p)(int) = (void (*)(int)) &func; /* W0553 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0554
@section W0554
@cindex W0554

@subsection Message body

An actual argument `%s' in `#pragma' is unrecognized. This `#pragma' command will be ignored.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#pragma SystemSpecificPragmaName 5 /* W0544 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0555
@section W0555
@cindex W0555

@subsection Message body

This function is called recursive with indirectly.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
int func1(int i) /* W0555 */
{
    if (i < 10) {
        return i + 1;
    }
    else {
        return func3(i);
    }
}
@end verbatim

@file{test2.c}
@verbatim
int func2(int i) /* W0555 */
{
    return func1(i) + 2;
}
@end verbatim

@file{test3.c}
@verbatim
int func3(int i) /* W0555 */
{
    return func2(i) + 3;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0556} The function which includes this call is called recursively.
@end itemize

@subsection Since

1.0.0

@node W0556
@section W0556
@cindex W0556

@subsection Message body

The function which includes this call is called recursively.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int i)
{
    if (i == 0) {
        return 0;
    }
    else {
        return func(i - 1); /* W0556 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0555} This function is called recursive with indirectly.
@end itemize

@subsection Since

1.0.0

@node W0559
@section W0559
@cindex W0559

@subsection Message body

The operand of `!' operator is the expression of bit operation or arithmetic operation.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b)
{
    if (!(a || b)) {
        return 0;
    }
    else {
        return !(a & b); /* W0559 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0559} The operand of `!' operator is the expression of bit operation or arithmetic operation.
@end itemize

@subsection Since

1.0.0

@node W0560
@section W0560
@cindex W0560

@subsection Message body

The operand of `~' operator is boolean type expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b)
{
    return ~((a < b) && (b > 0)); /* W0560 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0560} The operand of `~' operator is boolean type expression.
@end itemize

@subsection Since

1.0.0

@node W0561
@section W0561
@cindex W0561

@subsection Message body

The meaning of `*p++' is `*(p++)'. It is not `(*p)++'. `*' operator is verbose.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
*p++; /* W0561 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0562
@section W0562
@cindex W0562

@subsection Message body

There are verbose `@{@}' in the initializer.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int ng[3][2] = { { {1, 2}, { 3, 4}, { 5, 6 } } }; /* W0562 */

int ok[3][2] = { { 1, 2 }, { 3, 4 }, { 5, 6 } }; /* OK */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0563
@section W0563
@cindex W0563

@subsection Message body

If it jumps from outside of this block to `%s' label,the local variable will not be initialized.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b)
{
    if (a == 0) {
        if (b != 0) {
            goto ERR;
        }
    }
    else {
        int c = 0;
    ERR:  /* W0563 */
        b = c;
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0564} If this 'goto' statement jumps to `%s' label,local variable will not be initialized.
@end itemize

@subsection Since

1.0.0

@node W0564
@section W0564
@cindex W0564

@subsection Message body

If this 'goto' statement jumps to `%s' label,local variable will not be initialized.

@subsection Content

Under construction.

@subsection Sample code
@verbatim
void func(int a, int b)
{
    if (a == 0) {
        int c = 0;
    RETRY:
        b = c;
    }

    if (b != 0) {
        goto RETRY; /* W0564 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0563} If it jumps from outside of this block to `%s' label,the local variable will not be initialized.
@end itemize

@subsection Since

1.0.0

@node W0565
@section W0565
@cindex W0565

@subsection Message body

A volatile integer type cast to volatile pointer type and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int a = 0xFFFFU;
volatile unsigned int *b = (volatile unsigned int *) a; /* W0565 */
unsigned int c = (unsigned int) b; /* W0565 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0566} A volatile integer type cast to function pointer type and vice versa.
@item @ref{W0567} A volatile integer type cast to pointer to object and vice versa.
@end itemize

@subsection Since

1.0.0

@node W0566
@section W0566
@cindex W0566

@subsection Message body

A volatile integer type cast to function pointer type and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int addr = 0xFFFFFFFFU;
void (*p)(int, long) = (void (*)(int, long)) addr; /* W0566 */
int i = (int) p; /* W0566 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0565} A volatile integer type cast to volatile pointer type and vice versa.
@item @ref{W0567} A volatile integer type cast to pointer to object and vice versa.
@end itemize

@subsection Since

1.0.0

@node W0567
@section W0567
@cindex W0567

@subsection Message body

A volatile integer type cast to pointer to object and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int addr = 0xFFFFFFFFU;
void (*p)(int, long) = (void (*)(int, long)) addr; /* W0567 */
int i = (int) p; /* W0567 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0565} A volatile integer type cast to volatile pointer type and vice versa.
@item @ref{W0566} A volatile integer type cast to function pointer type and vice versa.
@end itemize

@subsection Since

1.0.0

@node W0568
@section W0568
@cindex W0568

@subsection Message body

The result of left shift operation against the signed constant expression value is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a = 0x7FFFFFFF << 1; /* W0568 */
int b = -5 << 1; /* W0568 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0569} The result of left shift operation against the signed expression value is undefined.
@item @ref{W0570} This signed left shift operation may make undefined value.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0569
@section W0569
@cindex W0569

@subsection Message body

The result of left shift operation against the signed expression value is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    if (a >= 0x40000000) {
        return a << 1; /* W0569 */
    }

    if (a < 0) {
        return a << 1; /* W0569 */
    }

    return a << 1;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0568} The result of left shift operation against the signed constant expression value is undefined.
@item @ref{W0570} This signed left shift operation may make undefined value.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0570
@section W0570
@cindex W0570

@subsection Message body

This signed left shift operation may make undefined value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    if (a >= 0x10000000) {
        return a << 1; /* W0570 */
    }

    if (a < 10) {
        return a << 1; /* W0570 */
    }

    return a << 1;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0568} The result of left shift operation against the signed constant expression value is undefined.
@item @ref{W0569} The result of left shift operation against the signed expression value is undefined.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0571
@section W0571
@cindex W0571

@subsection Message body

The result of right shift operation against the signed data is a possibility the both logical shift and arithmetic shift by implementation.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    return a >> 3; /* W0571 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0572} Bitwise operation of signed value causes implementation-defined behavior.
@end itemize

@subsection Since

1.0.0

@node W0572
@section W0572
@cindex W0572

@subsection Message body

Bitwise operation of signed value causes implementation-defined behavior.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(short a)
{
    short b;

    b = a >> 8; /* W0572 */
    b <<= 1; /* W0572 */
    b = a & 15; /* W0572 */
    b = a | 15; /* W0572 */
    b = a ^ 15; /* W0572 */
    b = ~a; /* W0572 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0571} The result of right shift operation against the signed data is a possibility the both logical shift and arithmetic shift by implementation.
@end itemize

@subsection Since

1.0.0

@node W0573
@section W0573
@cindex W0573

@subsection Message body

A `-' character in scanset in `[]' is implementation defined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char c;
scanf("%[a-z]", &c); /* W0573 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W0574
@section W0574
@cindex W0574

@subsection Message body

The character except for basic source character is used in the character constant.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const char c = '$'; /* W0574 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0575} The character except for basic source character is used in the string literal.
@item @ref{W0576} The character except for basic source character is used in the comment of source file `%s'.
@item @ref{W0577} The character except for basic source character is used in preprocessing directive of source file `%s'.
@end itemize

@subsection Since

1.0.0

@node W0575
@section W0575
@cindex W0575

@subsection Message body

The character except for basic source character is used in the string literal.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const char *str = "@$"; /* W0575 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0574} The character except for basic source character is used in the character constant.
@item @ref{W0576} The character except for basic source character is used in the comment of source file `%s'.
@item @ref{W0577} The character except for basic source character is used in preprocessing directive of source file `%s'.
@end itemize

@subsection Since

1.0.0

@node W0576
@section W0576
@cindex W0576

@subsection Message body

The character except for basic source character is used in the comment of source file `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* $ W0576 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0574} The character except for basic source character is used in the character constant.
@item @ref{W0575} The character except for basic source character is used in the string literal.
@item @ref{W0577} The character except for basic source character is used in preprocessing directive of source file `%s'.
@end itemize

@subsection Since

1.0.0

@node W0577
@section W0577
@cindex W0577

@subsection Message body

The character except for basic source character is used in preprocessing directive of source file `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO $ /* W0577 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0574} The character except for basic source character is used in the character constant.
@item @ref{W0575} The character except for basic source character is used in the string literal.
@item @ref{W0576} The character except for basic source character is used in the comment of source file `%s'.
@end itemize

@subsection Since

1.0.0

@node W0578
@section W0578
@cindex W0578

@subsection Message body

A generic integer value of the compound expression typed `%s' is implicitly converted into a new value of bigger type `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    long b = a * a; /* W0578 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0579
@section W0579
@cindex W0579

@subsection Message body

A generic integer value of the compound expression typed `%s' is explicitly converted into a new value of bigger type `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    long b = (long) (a * a); /* W0579 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W0580
@section W0580
@cindex W0580

@subsection Message body

An address of local static variable is substituted for a pointer which has a wider scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *p;

void func(void)
{
    static int i = 0;

    p = &i; /* W0580 */
}
@end verbatim


@subsection Related message

None.

@subsection Since

1.0.0

@node W0581
@section W0581
@cindex W0581

@subsection Message body

The number or type of actual argument is different from the past.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0581 */
    default:
        return foo(b, c); /* W0581 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0582} The number or type of actual argument is different from the function prototype declaration at the following.
@item @ref{W0583} The number or type of actual argument is different from the function declaration at the following.
@item @ref{W0584} The type of %s actual argument is different from the type of formal argument in function definition.
@end itemize

@subsection Since

1.0.0

@node W0582
@section W0582
@cindex W0582

@subsection Message body

The number or type of actual argument is different from the function prototype declaration at the following.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0582 */
    default:
        return foo(b, c); /* W0582 */
    }
}

extern int foo(int, short, long);
@end verbatim

@subsection Related message

@itemize
@item @ref{W0581} The number or type of actual argument is different from the past.
@item @ref{W0583} The number or type of actual argument is different from the function declaration at the following.
@item @ref{W0584} The type of %s actual argument is different from the type of formal argument in function definition.
@end itemize

@subsection Since

1.0.0

@node W0583
@section W0583
@cindex W0583

@subsection Message body

The number or type of actual argument is different from the function declaration at the following.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0583 */
    default:
        return foo(b, c); /* W0583 */
    }
}

int foo(int a, short b, long c)
{
    return a + b + c;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0581} The number or type of actual argument is different from the past.
@item @ref{W0582} The number or type of actual argument is different from the function prototype declaration at the following.
@item @ref{W0584} The type of %s actual argument is different from the type of formal argument in function definition.
@end itemize

@subsection Since

1.0.0

@node W0584
@section W0584
@cindex W0584

@subsection Message body

The type of %s actual argument is different from the type of formal argument in function definition.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func1(a, b)
long a;
double b;
{
    ...snip...
}

void func2(void)
{
    int a = 0;
    long b = 0;

    func1(a, b); /* W0584 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0581} The number or type of actual argument is different from the past.
@item @ref{W0582} The number or type of actual argument is different from the function prototype declaration at the following.
@item @ref{W0583} The number or type of actual argument is different from the function declaration at the following.
@end itemize

@subsection Since

1.0.0

@node W0585
@section W0585
@cindex W0585

@subsection Message body

A control variable `%s' doesn't appear increment expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i, j;

for (i = j = 0; i < 10; j++) { /* W0585 */
    i++;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0586
@section W0586
@cindex W0586

@subsection Message body

A typedef `%s' is declared in more than one place.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
typedef int *INT_PTR; /* W0586 */

void func1(INT_PTR)
{
    ...snip...
}
@end verbatim

@file{test2.c}
@verbatim
typedef int *INT_PTR; /* W0586 */

void func2(INT_PTR)
{
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0589
@section W0589
@cindex W0589

@subsection Message body

An object `%s' is only referenced by function `%s' in the defined translation unit.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
void func1(void) /* W0589 & W0591 */
{
    ...snip...
}

void func2(void)
{
    func1();
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim


@subsection Related message

None.

@subsection Since

1.0.0

@node W0591
@section W0591
@cindex W0591

@subsection Message body

A function `%s' is only referenced by the defined translation unit.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
void func1(void) /* W0589 & W0591 */
{
    ...snip...
}

void func2(void)
{
    func1();
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0593
@section W0593
@cindex W0593

@subsection Message body

An object `%s' is only referenced by the defined translation unit.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
int a = 100; /* W0593 */

void func1(void)
{
    a += 1;
}

void func2(void)
{
    func1();
    a += 2;
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim


@subsection Related message

None.

@subsection Since

1.0.0

@node W0597
@section W0597
@cindex W0597

@subsection Message body

`%s' is modified more than once between the side-effects completion point. The evaluation order is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    a = b * a++; /* W0597 */
    a = bar(&a) * a++; /* W0597 */
    b = bar(&a) * (a++ + --a); /* W0597, W0599 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0598} `%s' might be modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0599} `%s' is modified and referenced between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0600} `%s' is modified and might be referenced between the side-effects completion point. The evaluation order is undefined.
@end itemize

@subsection Since

1.2.0

@node W0598
@section W0598
@cindex W0598

@subsection Message body

`%s' might be modified more than once between the side-effects completion point. The evaluation order is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    b = bar(&a) * a++; /* W0598 */
    b = bar(&a) + bar(&a); /* W0598 */
    b = bar(&a) + baz(&a); /* W0600 */
    b = baz(&a) + baz(&a);
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0597} `%s' is modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0599} `%s' is modified and referenced between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0600} `%s' is modified and might be referenced between the side-effects completion point. The evaluation order is undefined.
@end itemize

@subsection Since

1.2.0

@node W0599
@section W0599
@cindex W0599

@subsection Message body

`%s' is modified and referenced between the side-effects completion point. The evaluation order is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void bar(int, int, int);

void foo(int a, int b, int *c)
{
    b = (a + 1) + a++; /* W0599 */
    b = c[a] + c[++a]; /* W0599 */
    bar(a, a++, c[a]); /* W0599 */
    bar(a, a, c[a++]); /* W0599 */
    a = a + b;
    c[a] = a++ + b; /* W0599 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0597} `%s' is modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0598} `%s' might be modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0600} `%s' is modified and might be referenced between the side-effects completion point. The evaluation order is undefined.
@end itemize

@subsection Since

1.2.0

@node W0600
@section W0600
@cindex W0600

@subsection Message body

`%s' is modified and might be referenced between the side-effects completion point. The evaluation order is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    b = bar(&a) * a; /* W0600 */
    b = baz(&a) * a;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0597} `%s' is modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0598} `%s' might be modified more than once between the side-effects completion point. The evaluation order is undefined.
@item @ref{W0599} `%s' is modified and referenced between the side-effects completion point. The evaluation order is undefined.
@end itemize

@subsection Since

1.2.0

@node W0605
@section W0605
@cindex W0605

@subsection Message body

Multiple break-statements appear to break the same iteration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
while (n > 0) {
    if (n == 1) {
        break;
    }

    if (n == 2) {
        break; /* W0605 */
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0606
@section W0606
@cindex W0606

@subsection Message body

An union has a member which type is floating-point.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
union UNI { /* W0606 */
    float a;
    int b;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0607
@section W0607
@cindex W0607

@subsection Message body

An integer expression which the value which the value is minus converted to unsigned type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    if (a < 0) {
        unsigned int b = (unsigned int) a; /* W0607 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0608} An integer expression which the value might be minus converted to unsigned type.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.8.0

@node W0608
@section W0608
@cindex W0608

@subsection Message body

An integer expression which the value might be minus converted to unsigned type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void fuu(int a)
{
    unsigned char b;

    if (a < 256) {
        b = (unsigned char) a; /* W0608 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0607} An integer expression which the value which the value is minus converted to unsigned type.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.8.0

@node W0609
@section W0609
@cindex W0609

@subsection Message body

This logical expression always makes true.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    if (a < 0) {
        if (a != 0) { /* W0609 */
            ...snip...
        }
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0610} This logical expression always makes false.
@item @ref{W0611} The value of this 'for' control expression is always true.
@item @ref{W0612} The value of this 'if' conditional expression is always true.
@item @ref{W0613} This controlling expression always makes false.
@item @ref{W0614} The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
@end itemize

@subsection Since

1.0.0

@node W0610
@section W0610
@cindex W0610

@subsection Message body

This logical expression always makes false.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    if (a < 0) {
        if (a == 0) { /* W0610 */
        }
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0609} This logical expression always makes true.
@item @ref{W0611} The value of this 'for' control expression is always true.
@item @ref{W0612} The value of this 'if' conditional expression is always true.
@item @ref{W0613} This controlling expression always makes false.
@item @ref{W0614} The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
@end itemize

@subsection Since

1.0.0

@node W0611
@section W0611
@cindex W0611

@subsection Message body

The value of this 'for' control expression is always true.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    if ( a > 0 ) {
        while (a != 0) { /* W0611 */
            ...snip...
        }
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0609} This logical expression always makes true.
@item @ref{W0610} This logical expression always makes false.
@item @ref{W0612} The value of this 'if' conditional expression is always true.
@item @ref{W0613} This controlling expression always makes false.
@item @ref{W0614} The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
@end itemize

@subsection Since

1.0.0

@node W0612
@section W0612
@cindex W0612

@subsection Message body

The value of this 'if' conditional expression is always true.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i;

for (i = 0; i < 10; i++) {
    if (i < 20) { /* W0612 */
        ...snip...
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0609} This logical expression always makes true.
@item @ref{W0610} This logical expression always makes false.
@item @ref{W0611} The value of this 'for' control expression is always true.
@item @ref{W0613} This controlling expression always makes false.
@item @ref{W0614} The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
@end itemize

@subsection Since

1.0.0

@node W0613
@section W0613
@cindex W0613

@subsection Message body

This controlling expression always makes false.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i;

for (i = 0; i < 10; i++) {
    if (i > 10) { /* W0613 */
        ...snip...
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0609} This logical expression always makes true.
@item @ref{W0610} This logical expression always makes false.
@item @ref{W0611} The value of this 'for' control expression is always true.
@item @ref{W0612} The value of this 'if' conditional expression is always true.
@item @ref{W0614} The value of this "do-while" control expression is always false. The body of repetition statement executed only once.
@end itemize

@subsection Since

1.0.0

@node W0614
@section W0614
@cindex W0614

@subsection Message body

The value of this \"do-while\" control expression is always false. The body of repetition statement executed only once.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    if (a == 0) {
        do {
        } while (a > 0); /* W0614 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0609} This logical expression always makes true.
@item @ref{W0610} This logical expression always makes false.
@item @ref{W0611} The value of this 'for' control expression is always true.
@item @ref{W0612} The value of this 'if' conditional expression is always true.
@item @ref{W0613} This controlling expression always makes false.
@end itemize

@subsection Since

1.0.0

@node W0622
@section W0622
@cindex W0622

@subsection Message body

A function is declared in the block scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func1(void)
{
    extern int func2(void); /* W0622 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0623
@section W0623
@cindex W0623

@subsection Message body

An external coupling object is declared in the block scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    extern int i; /* W0623 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0624
@section W0624
@cindex W0624

@subsection Message body

There is '#define' or '#undef' in a block.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO 0

int foo(void)
{
#if defined(MACRO)
#undef MACRO    /* W0624 */
#define MACRO 1 /* W0624 */
#endif

    return MACRO;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0625
@section W0625
@cindex W0625

@subsection Message body

`%s' is using in the declaration or definition of external coupling. But its 'typedef' doesn't declare in the header file.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
typedef int *INT_PTR; /* W0625 */

extern INT_PTR func(void);

INT_PTR func(void)
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.8.0

@node W0626
@section W0626
@cindex W0626

@subsection Message body

A wide character or wide string literal is used.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const wchar_t a = L'あ'; /* W0626 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0627
@section W0627
@cindex W0627

@subsection Message body

There is a dead letter (only `;') in the following other code.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
if (0); /* W0627 */
{
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0628
@section W0628
@cindex W0628

@subsection Message body

A function `%s' is defined, but this is not used in this project.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
int func1(void)
{
    return 0;
}

void func2(void) /* W0628 */
{
    ...snip...
}
@end verbatim

@file{test2.c}
@verbatim
extern int func1(void);

int main(void)
{
    return func1();
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0629} `%s()' has internal-linkage, but it is never called in this translation-unit.
@end itemize

@subsection Since

1.0.0

@node W0629
@section W0629
@cindex W0629

@subsection Message body

`%s()' has internal-linkage, but it is never called in this translation-unit.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int func1(void) /* W0629 */
{
    return 1;
}

int func2(void)
{
    return 1;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0628} A function `%s' is defined, but this is not used in this project.
@end itemize

@subsection Since

1.0.0

@node W0632
@section W0632
@cindex W0632

@subsection Message body

Using ' or " characters in `@code{#include <%s>}' directive makes undefined behavior.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#include <NG'_header.h> /* W0632 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0633} Using ' character in `#include "%s"' directive makes undefined behavior.
@item @ref{W0634} `\' is used in `#include' line. `/' is recommended for the path delimiter.
@end itemize

@subsection Since

1.8.0

@node W0633
@section W0633
@cindex W0633

@subsection Message body

Using ' character in `@code{#include "%s"}' directive makes undefined behavior.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#include "NG'_header.h" /* W0633 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0632} Using ' or " characters in `#include <%s>' directive makes undefined behavior.
@item @ref{W0634} `\' is used in `#include' line. `/' is recommended for the path delimiter.
@end itemize

@subsection Since

1.8.0

@node W0634
@section W0634
@cindex W0634

@subsection Message body

`\' is used in `#include' line. `/' is recommended for the path delimiter.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#include "..\ng\header.h" /* W0634 */
#include "..\\ng\\header.h" /* W0634 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0632} Using ' or " characters in `#include <%s>' directive makes undefined behavior.
@item @ref{W0633} Using ' character in `#include "%s"' directive makes undefined behavior.
@end itemize

@subsection Since

1.8.0

@node W0635
@section W0635
@cindex W0635

@subsection Message body

The type doesn't match with %sth conversion specifier and the corresponding actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a)
{
    printf("Apple %f\n", a); /* W0635 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0636} An actual argument doesn't exist correspond to %sth conversion specifier.
@item @ref{W0637} There is more actual argument than the number of conversion specifier in function call.
@item @ref{W0638} This function call requiring at least one actual argument.
@item @ref{W0639} %sth conversion specifier doesn't match with corresponding type of actual argument.
@item @ref{W0640} The actual argument of scanf function have to pass the object pointer to store the data.
@end itemize

@subsection Since

1.0.0

@node W0636
@section W0636
@cindex W0636

@subsection Message body

An actual argument doesn't exist correspond to %sth conversion specifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b, int c)
{
    printf("Banana %d, %d, %d\n", a, b); /* W0636 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0635} The type doesn't match with %sth conversion specifier and the corresponding actual argument.
@item @ref{W0637} There is more actual argument than the number of conversion specifier in function call.
@item @ref{W0638} This function call requiring at least one actual argument.
@item @ref{W0639} %sth conversion specifier doesn't match with corresponding type of actual argument.
@item @ref{W0640} The actual argument of scanf function have to pass the object pointer to store the data.
@end itemize

@subsection Since

1.0.0

@node W0637
@section W0637
@cindex W0637

@subsection Message body

There is more actual argument than the number of conversion specifier in function call.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b)
{
    printf("Orange %d\n", a, b); /* W0637 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0635} The type doesn't match with %sth conversion specifier and the corresponding actual argument.
@item @ref{W0636} An actual argument doesn't exist correspond to %sth conversion specifier.
@item @ref{W0638} This function call requiring at least one actual argument.
@item @ref{W0639} %sth conversion specifier doesn't match with corresponding type of actual argument.
@item @ref{W0640} The actual argument of scanf function have to pass the object pointer to store the data.
@end itemize

@subsection Since

1.0.0

@node W0638
@section W0638
@cindex W0638

@subsection Message body

This function call requiring at least one actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
printf(); /* W0638 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0635} The type doesn't match with %sth conversion specifier and the corresponding actual argument.
@item @ref{W0636} An actual argument doesn't exist correspond to %sth conversion specifier.
@item @ref{W0637} There is more actual argument than the number of conversion specifier in function call.
@item @ref{W0639} %sth conversion specifier doesn't match with corresponding type of actual argument.
@item @ref{W0640} The actual argument of scanf function have to pass the object pointer to store the data.
@end itemize

@subsection Since

1.0.0

@node W0639
@section W0639
@cindex W0639

@subsection Message body

%sth conversion specifier doesn't match with corresponding type of actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;

scanf("%f",  &a); /* W0639 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0635} The type doesn't match with %sth conversion specifier and the corresponding actual argument.
@item @ref{W0636} An actual argument doesn't exist correspond to %sth conversion specifier.
@item @ref{W0637} There is more actual argument than the number of conversion specifier in function call.
@item @ref{W0638} This function call requiring at least one actual argument.
@item @ref{W0640} The actual argument of scanf function have to pass the object pointer to store the data.
@end itemize

@subsection Since

1.0.0

@node W0640
@section W0640
@cindex W0640

@subsection Message body

%sth conversion specifier doesn't match with corresponding type of actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;

fscanf(stdin, "%d", a); /* W0640 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0635} The type doesn't match with %sth conversion specifier and the corresponding actual argument.
@item @ref{W0636} An actual argument doesn't exist correspond to %sth conversion specifier.
@item @ref{W0637} There is more actual argument than the number of conversion specifier in function call.
@item @ref{W0638} This function call requiring at least one actual argument.
@item @ref{W0639} %sth conversion specifier doesn't match with corresponding type of actual argument.
@end itemize

@subsection Since

1.0.0

@node W0641
@section W0641
@cindex W0641

@subsection Message body

Floating-point number type cast to pointer to object and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int *foo(const float f)
{
    return (int *) f; /* W0641 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0642
@section W0642
@cindex W0642

@subsection Message body

Address derivation from the object declared as `register' is prohibited.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    register int a[3];

    int *p1 = a; /* W0642 */
    int *p2 = &a[1]; /* W0642 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0643} This string literal constituted by a macro is illegal form unenclosed by `"'. `#'operator may apply to actual argument which has '\' at the end.
@item @ref{W0644} A value in void statement is going to use. 'void' statement doesn't have a value.
@item @ref{W0645} 'void' type cannot use in the type of formal argument.
@item @ref{W0646} A normal string literal and a wide string literal are contiguous.
@end itemize

@subsection Since

1.8.0

@node W0643
@section W0643
@cindex W0643

@subsection Message body

This string literal constituted by a macro is illegal form unenclosed by `\"'. `#'operator may apply to actual argument which has '\' at the end.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(x) #x
const char *str = MACRO(foo\); /* W0643 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0642} Address derivation from the object declared as `register' is prohibited.
@item @ref{W0644} A value in void statement is going to use. 'void' statement doesn't have a value.
@item @ref{W0645} 'void' type cannot use in the type of formal argument.
@item @ref{W0646} A normal string literal and a wide string literal are contiguous.
@end itemize

@subsection Since

1.16.0

@node W0644
@section W0644
@cindex W0644

@subsection Message body

A value in void statement is going to use. 'void' statement doesn't have a value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(void);

int bar(void)
{
    return (int) foo(); /* W0644 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0642} Address derivation from the object declared as `register' is prohibited.
@item @ref{W0643} This string literal constituted by a macro is illegal form unenclosed by `"'. `#'operator may apply to actual argument which has '\' at the end.
@item @ref{W0645} 'void' type cannot use in the type of formal argument.
@item @ref{W0646} A normal string literal and a wide string literal are contiguous.
@end itemize

@subsection Since

1.18.0

@node W0645
@section W0645
@cindex W0645

@subsection Message body

`void' cannot be used as the parameter type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func(a) /* W0645 */
void a;
{
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0642} Address derivation from the object declared as `register' is prohibited.
@item @ref{W0643} This string literal constituted by a macro is illegal form unenclosed by `"'. `#'operator may apply to actual argument which has '\' at the end.
@item @ref{W0644} A value in void statement is going to use. 'void' statement doesn't have a value.
@item @ref{W0646} A normal string literal and a wide string literal are contiguous.
@end itemize

@subsection Since

1.14.0

@node W0646
@section W0646
@cindex W0646

@subsection Message body

A normal string literal and a wide string literal are contiguous.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static const char *str = "foo" L"bar"; /* W0646 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0642} Address derivation from the object declared as `register' is prohibited.
@item @ref{W0643} This string literal constituted by a macro is illegal form unenclosed by `"'. `#'operator may apply to actual argument which has '\' at the end.
@item @ref{W0644} A value in void statement is going to use. 'void' statement doesn't have a value.
@item @ref{W0645} 'void' type cannot use in the type of formal argument.
@end itemize

@subsection Since

1.16.0

@node W0649
@section W0649
@cindex W0649

@subsection Message body

A right operand value of shift operand is negative constant value. This result is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int foo(int i)
{
    return i << -1; /* W0649 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0650} A value of the right operand in a shift expression is bigger than the bit size of the left operand type `%s'. This result is undefined.
@end itemize

@subsection Since

1.18.0

@node W0650
@section W0650
@cindex W0650

@subsection Message body

A value of the right operand in a shift expression is bigger than the bit size of the left operand type `%s'. This result is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int foo(unsigned int i)
{
    return i << 32; /* W0650 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0649} A right operand value of shift operand is negative constant value. This result is undefined.
@end itemize

@subsection Since

1.18.0

@node W0653
@section W0653

@subsection Message body

The initial value of an array, structure or union is not enclosed by `@{@}'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST {
    int i;
};

int a[3] = 0; /* W0653 */
struct ST s = 0; /* W0653 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0654} The initializer of structure or union must the value of the same structure type or union type.
@end itemize

@subsection Since

1.0.0

@node W0654
@section W0654
@cindex W0654

@subsection Message body

The initializer of structure or union must the value of the same structure type or union type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct A {
    int i;
};

struct B {
    int j;
};

struct A a = { 0 };
struct B b = a; /* W0654 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0653} The initial value of an array, structure or union is not enclosed by `@{@}'.
@end itemize

@subsection Since

1.0.0

@node W0655
@section W0655
@cindex W0655

@subsection Message body

This is bit field statement which the size is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST {
    unsigned int a:2;
    unsigned int b:4;
};

void func(void)
{
    struct ST s = { 0 };
    int i = sizeof(s.a); /* W0655 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0656
@section W0656
@cindex W0656

@subsection Message body

%sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int count)
{
    printf("There are %Ld apples\n", count); /* W0656 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0657
@section W0657
@cindex W0657

@subsection Message body

An invalid flag is used in %sth conversion specifier of `i'  or 'd'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int count)
{
    printf("There are %Ld apples\n", count); /* W0657 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0658
@section W0658
@cindex W0658

@subsection Message body

An invalid flag is used in %sth conversion specifier of `o'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int count)
{
    printf("There are %Lo apples\n", count); /* W0658 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0659
@section W0659
@cindex W0659

@subsection Message body

An invalid flag is used in %sth conversion specifier of `u'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int count)
{
    printf("There are %Lu apples\n", count); /* W0659 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0660
@section W0660
@cindex W0660

@subsection Message body

An invalid flag is used in %sth conversion specifier of `x'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int count)
{
    printf("There are %Lx apples\n", count); /* W0660 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0661
@section W0661
@cindex W0661

@subsection Message body

An invalid flag is used in %sth conversion specifier of `X'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int count)
{
    printf("There are %LX apples\n", count); /* W0661 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0662
@section W0662
@cindex W0662

@subsection Message body

An invalid flag is used in %sth conversion specifier of `f'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double count)
{
    printf("There are %lf apples\n", count); /* W0662 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0663
@section W0663
@cindex W0663

@subsection Message body

An invalid flag is used in %sth conversion specifier of `e'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double count)
{
    printf("There are %le apples\n", count); /* W0663 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0664
@section W0664
@cindex W0664

@subsection Message body

An invalid flag is used in %sth conversion specifier of `E'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double count)
{
    printf("There are %lE apples\n", count); /* W0664 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0665
@section W0665
@cindex W0665

@subsection Message body

An invalid flag is used in %sth conversion specifier of `g'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double count)
{
    printf("There are %lg apples\n", count); /* W0665 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0666
@section W0666
@cindex W0666

@subsection Message body

An invalid flag is used in %sth conversion specifier of `G'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double count)
{
    printf("There are %lG apples\n", count); /* W0666 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0667
@section W0667
@cindex W0667

@subsection Message body

An invalid flag is used in %sth conversion specifier of `c'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(char count)
{
    printf("There are %hc apples\n", count); /* W0667 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0668
@section W0668
@cindex W0668

@subsection Message body

An invalid flag is used in %sth conversion specifier of `%%'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double percent)
{
    printf("There is %f%l% apple juice\n", percent); /* W0668 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0669
@section W0669
@cindex W0669

@subsection Message body

An invalid flag is used in %sth conversion specifier of `s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(char *s)
{
    printf("There are %hs apples\n", s); /* W0669 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0670
@section W0670
@cindex W0670

@subsection Message body

An invalid flag is used in %sth conversion specifier of `n'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int n;

    printf("There are %Ln apples\n", &n); /* W0670 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0671
@section W0671
@cindex W0671

@subsection Message body

An invalid flag is used in %sth conversion specifier of `p'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(char *p)
{
    printf("p points to %lp\n", p); /* W0671 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0672
@section W0672
@cindex W0672

@subsection Message body

An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    printf("%0", &a); /* W0672 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0673
@section W0673
@cindex W0673

@subsection Message body

%sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%y", &a); /* W0673 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0674
@section W0674
@cindex W0674

@subsection Message body

An invalid flag is used in %sth conversion specifier of `d/i/n'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%Ld", &a); /* W0674 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0675
@section W0675
@cindex W0675

@subsection Message body

An invalid flag is used in %sth conversion specifier of `o'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%Lo", &a); /* W0675 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0676
@section W0676
@cindex W0676

@subsection Message body

An invalid flag is used in %sth conversion specifier of `u'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%Lu", &a); /* W0676 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0677
@section W0677
@cindex W0677

@subsection Message body

An invalid flag is used in %sth conversion specifier of `x/X.'

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%Lx", &a); /* W0677 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0678
@section W0678
@cindex W0678

@subsection Message body

An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    double a;

    scanf("%lle", &a); /* W0678 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0679
@section W0679
@cindex W0679

@subsection Message body

An invalid flag is used in %sth conversion specifier of `s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    char a[256];

    scanf("%lls", a); /* W0679 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0680
@section W0680
@cindex W0680

@subsection Message body

An invalid flag is used in %sth conversion specifier of `p'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    void *a;

    scanf("%lp", &a); /* W0680 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0681
@section W0681
@cindex W0681

@subsection Message body

An invalid flag is used in %sth conversion specifier of `%%'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    int a;

    scanf("%d%l%", &a); /* W0681 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize


@subsection Since

1.0.0

@node W0682
@section W0682
@cindex W0682

@subsection Message body

An invalid flag is used in %sth conversion specifier of `['.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    char buf[256];

    scanf("%L[0-9]", buf); /* W0682 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0683
@section W0683
@cindex W0683

@subsection Message body

An invalid flag is used in %sth conversion specifier of `c'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    char a;

    scanf("%Lc", &a); /* W0683 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0684
@section W0684
@cindex W0684

@subsection Message body

An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(void)
{
    long a;

    scanf("%l", &a); /* W0684 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.0.0

@node W0685
@section W0685
@cindex W0685

@subsection Message body

A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char c;
scanf("%[z-a]", &c); /* W0685 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0686} The same characters are described in scanset (characters enclosed by `[]').
@end itemize

@subsection Since

1.6.0

@node W0686
@section W0686
@cindex W0686

@subsection Message body

The same characters are described in scanset (characters enclosed by `[]').

@subsection Content

Under construction.

@subsection Sample code

@verbatim
char c;
scanf("%[abcda]", &c); /* W0686 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0655} This is bit field statement which the size is undefined.
@item @ref{W0656} %sth conversion specifier in scanf, fscanf or sscanf is not supported by ISO C standards.
@item @ref{W0657} An invalid flag is used in %sth conversion specifier of `i'  or 'd'.
@item @ref{W0658} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0659} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0660} An invalid flag is used in %sth conversion specifier of `x'.
@item @ref{W0661} An invalid flag is used in %sth conversion specifier of `X'.
@item @ref{W0662} An invalid flag is used in %sth conversion specifier of `f'.
@item @ref{W0663} An invalid flag is used in %sth conversion specifier of `e'.
@item @ref{W0664} An invalid flag is used in %sth conversion specifier of `E'.
@item @ref{W0665} An invalid flag is used in %sth conversion specifier of `g'.
@item @ref{W0666} An invalid flag is used in %sth conversion specifier of `G'.
@item @ref{W0667} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0668} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0669} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0670} An invalid flag is used in %sth conversion specifier of `n'.
@item @ref{W0671} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0672} An invalid flag is used in %sth conversion specifier in scanf, fscanf, sscanf.
@item @ref{W0673} %sth conversion specifier in printf, fprintf or sprintf is not supported by ISO C standards.
@item @ref{W0674} An invalid flag is used in %sth conversion specifier of `d/i/n'.
@item @ref{W0675} An invalid flag is used in %sth conversion specifier of `o'.
@item @ref{W0676} An invalid flag is used in %sth conversion specifier of `u'.
@item @ref{W0677} An invalid flag is used in %sth conversion specifier of `x/X'.
@item @ref{W0678} An invalid flag is used in %sth conversion specifier of `e/E/f/g/G'.
@item @ref{W0679} An invalid flag is used in %sth conversion specifier of `s'.
@item @ref{W0680} An invalid flag is used in %sth conversion specifier of `p'.
@item @ref{W0681} An invalid flag is used in %sth conversion specifier of `%%'.
@item @ref{W0682} An invalid flag is used in %sth conversion specifier of `['.
@item @ref{W0683} An invalid flag is used in %sth conversion specifier of `c'.
@item @ref{W0684} An invalid flag is used in %sth conversion specifier in printf, fprintf, sprintf.
@item @ref{W0685} A character preceding the `-' in scanset o `[]' is bigger than a character following the `-'.
@end itemize

@subsection Since

1.6.0

@node W0687
@section W0687
@cindex W0687

@subsection Message body

#undef is using to delete #defined operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#undef defined /* W0687 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0688} There is no line number in 1 to 32767 ranges after #line directive.
@item @ref{W0689} #line directive syntax doesn't match `#line integer constant \"string\"'.
@item @ref{W0690} No line number after #line directive.
@item @ref{W0691} The result of `##' operator is not valid preprocessing token.
@end itemize

@subsection Since

1.4.0

@node W0688
@section W0688
@cindex W0688

@subsection Message body

There is no line number in 1 to 32767 ranges after #line directive.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#line 35000 "test.c" /* W0688 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0687} #undef is using to delete #defined operator.
@item @ref{W0689} #line directive syntax doesn't match `#line integer constant \"string\"'.
@item @ref{W0690} No line number after #line directive.
@item @ref{W0691} The result of `##' operator is not valid preprocessing token.
@end itemize

@subsection Since

1.2.0

@node W0689
@section W0689
@cindex W0689

@subsection Message body

#line directive syntax doesn't match `#line integer constant \"string\"'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#line 35 * 100 /* W0689 */
#line 35 * 100 "test.c" /* W0689 */
#line 35 L"あいう.c" /* W0689 */
#line __FILE__ 35 /* W0689 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0687} #undef is using to delete #defined operator.
@item @ref{W0688} There is no line number in 1 to 32767 ranges after #line directive.
@item @ref{W0690} No line number after #line directive.
@item @ref{W0691} The result of `##' operator is not valid preprocessing token.
@end itemize

@subsection Since

1.2.0

@node W0690
@section W0690
@cindex W0690

@subsection Message body

No line number after #line directive.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#line LINE1000 /* W0690 */
#line __FILE__ 35 /* W0690 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0687} #undef is using to delete #defined operator.
@item @ref{W0688} There is no line number in 1 to 32767 ranges after #line directive.
@item @ref{W0689} #line directive syntax doesn't match `#line integer constant \"string\"'.
@item @ref{W0691} The result of `##' operator is not valid preprocessing token.
@end itemize

@subsection Since

1.2.0

@node W0691
@section W0691
@cindex W0691

@subsection Message body

The result of `##' operator is not valid preprocessing token.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(a, b) a ## b

double d = (double) MACRO(-, 123); /* W0691 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0687} #undef is using to delete #defined operator.
@item @ref{W0688} There is no line number in 1 to 32767 ranges after #line directive.
@item @ref{W0689} #line directive syntax doesn't match `#line integer constant \"string\"'.
@item @ref{W0690} No line number after #line directive.
@end itemize

@subsection Since

1.16.0

@node W0692
@section W0692
@cindex W0692

@subsection Message body

A function-like macro `%s' doesn't given an actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO(a) #a

const char *s = (char *) MACRO(); /* W0692 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0693} A function-like macro is called by actual argument which its definition is smaller.
@end itemize

@subsection Since

1.16.0

@node W0693
@section W0693
@cindex W0693

@subsection Message body

A function-like macro is called by actual argument which its definition is smaller.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0692} A function-like macro `%s' doesn't given an actual argument.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W0694
@section W0694
@cindex W0694

@subsection Message body

'assert' macro is inhibited to call the function named `assert'. This result is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#undef assert
extern void assert(int);

void foo(void)
{
    assert("should not be reached" == ""); /* W0694 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W0695
@section W0695
@cindex W0695

@subsection Message body

If #undef the 'assert' macro, and enable to call its name function, the result is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#undef assert /* W0695 */
extern void assert(int a);
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0696
@section W0696
@cindex W0696

@subsection Message body

This macro using in `#if...' is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO (1)

#if MACRO == 1
    ...snip...
#endif

#undef MACRO

#if MACRO == 2 /* W0696 */
    ...snip...
#endif
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0697
@section W0697
@cindex W0697

@subsection Message body

There is a path with exits with an implicit `return;' statement in a function `%s' which has a return value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int value) /* W0697 */
{
    if (value == 0) {
        return 0;
    }
    /* No return statement at the end of this function. */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0698} A `return;' statement is found in a function `%s' which has a return value.
@item @ref{W0699} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no expression to set the value to 'return' statement.
@item @ref{W0700} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no 'return' statement to return value.
@end itemize

@subsection Since

1.14.0

@node W0698
@section W0698
@cindex W0698

@subsection Message body

A `return;' statement is found in a function `%s' which has a return value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    return; /* W0698 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0698} A `return;' statement is found in a function `%s' which has a return value.
@item @ref{W0699} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no expression to set the value to 'return' statement.
@item @ref{W0700} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no 'return' statement to return value.
@end itemize

@subsection Since

1.4.0

@node W0699
@section W0699
@cindex W0699

@subsection Message body

The return value of function `%s()' is unspecified. The return value is implicitly int. There is no expression to set the value to 'return' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern func(void)
{
    return; /* W0699 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0697} There is a path with exits with an implicit `return;' statement in a function `%s' which has a return value.
@item @ref{W0698} A `return;' statement is found in a function `%s' which has a return value.
@item @ref{W0700} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no 'return' statement to return value.
@end itemize

@subsection Since

1.4.0

@node W0700
@section W0700
@cindex W0700

@subsection Message body

The return value of function `%s()' is unspecified. The return value is implicitly int. There is no 'return' statement to return value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern func(void) /* W0700 */
{
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0697} There is a path with exits with an implicit `return;' statement in a function `%s' which has a return value.
@item @ref{W0698} A `return;' statement is found in a function `%s' which has a return value.
@item @ref{W0699} The return value of function `%s()' is unspecified. The return value is implicitly int. There is no expression to set the value to 'return' statement.
@end itemize


@subsection Since

1.14.0

@node W0703
@section W0703
@cindex W0703

@subsection Message body

The tag `%s' hides the declaration of same identifier which has wider scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
union FOO {
    ...snip...
};

void func(void)
{
    struct FOO { /* W0703 */
        ...snip...
    };
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0704} This `%s' declaration hides the declaration of same identifier which has wider scope.
@end itemize

@subsection Since

1.0.0

@node W0704
@section W0704
@cindex W0704

@subsection Message body

This `%s' declaration hides the declaration of same identifier which has wider scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a;

void func(void)
{
    double a; /* W0704 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0703} The tag `%s' hides the declaration of same identifier which has wider scope.
@end itemize

@subsection Since

1.0.0

@node W0705
@section W0705
@cindex W0705

@subsection Message body

This non-constant array subscript may cause out-of-range access.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int a)
{
    int buf[10];

    if (a < 10) {
        buf[a] = 0;
    }

    ...snip...

    buf[a] = 5; /* W0705 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0707
@section W0707
@cindex W0707

@subsection Message body

This constant array subscript must cause out-of-range access.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int a[5];

int foo(void)
{
    int i = a[5]; /* W0707 */
    return i;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.18.0

@node W0708
@section W0708
@cindex W0708

@subsection Message body

A value of control variable `%s' in 'for' statement is changed in the body of repetition.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int i, j;

for (i = j = 0; i < 10; j++) {
    i++; /* W0708 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0711
@section W0711
@cindex W0711

@subsection Message body

Right operand of relational operator is a substantive 'boolean' expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a + b) > (c > d); /* W0711 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0712} Left operand of relational operator is a substantive 'boolean' expression.
@item @ref{W0713} Both sides of relational operator is substantive 'boolean' expressions.
@end itemize

@subsection Since

1.8.0

@node W0712
@section W0712
@cindex W0712

@subsection Message body

Left operand of relational operator is a substantive 'boolean' expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) > (c + d); /* W0712 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0711} Right operand of relational operator is a substantive 'boolean' expression.
@item @ref{W0713} Both sides of relational operator is substantive 'boolean' expressions.
@end itemize

@subsection Since

1.8.0

@node W0713
@section W0713
@cindex W0713

@subsection Message body

Both sides of relational operator is substantive 'boolean' expressions.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) > (c > d); /* W0713 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0711} Right operand of relational operator is a substantive 'boolean' expression.
@item @ref{W0712} Left operand of relational operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.8.0

@node W0714
@section W0714
@cindex W0714

@subsection Message body

Both sides of `&' operator is substantive 'boolean' expressions.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) & (c > d); /* W0714 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0715} Both sides of `|' operator is substantive 'boolean' expressions.
@item @ref{W0716} A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0717} A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0718} A bit operator or right side operand of arithmetic operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.8.0

@node W0715
@section W0715
@cindex W0715

@subsection Message body

Both sides of `|' operator is substantive 'boolean' expressions.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) | (c > d); /* W0715 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0714} Both sides of `&' operator is substantive 'boolean' expressions.
@item @ref{W0716} A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0717} A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0718} A bit operator or right side operand of arithmetic operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.8.0

@node W0716
@section W0716
@cindex W0716

@subsection Message body

A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.

@subsection Content


Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) + (c > d); /* W0716 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0714} Both sides of `&' operator is substantive 'boolean' expressions.
@item @ref{W0715} Both sides of `|' operator is substantive 'boolean' expressions.
@item @ref{W0717} A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0718} A bit operator or right side operand of arithmetic operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.10.0

@node W0717
@section W0717
@cindex W0717

@subsection Message body

A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c)
{
    return (a > b) + c; /* W0717 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0714} Both sides of `&' operator is substantive 'boolean' expressions.
@item @ref{W0715} Both sides of `|' operator is substantive 'boolean' expressions.
@item @ref{W0716} A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0717} A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.10.0

@node W0718
@section W0718
@cindex W0718

@subsection Message body

A bit operator or right side operand of arithmetic operator is a substantive 'boolean' expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a, int b, int c)
{
    return a + (b > c);  /* W0718 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0714} Both sides of `&' operator is substantive 'boolean' expressions.
@item @ref{W0715} Both sides of `|' operator is substantive 'boolean' expressions.
@item @ref{W0716} A bit operator or both sides operand of arithmetic operator is a substantive 'boolean' expression.
@item @ref{W0717} A bit operator or left side operand of arithmetic operator is a substantive 'boolean' expression.
@end itemize

@subsection Since

1.10.0

@node W0719
@section W0719
@cindex W0719

@subsection Message body

A value of the right operand in a shift expression is bigger than the bit size of the left operand underlying type `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int foo(char c)
{
    return c << 31; /* W0719 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0720
@section W0720
@cindex W0720

@subsection Message body

The value with floating-point type doesn't fit in the range of converted type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
signed char sc1 = (signed char) 127.5; /* OK */
signed char sc2 = (signed char) 128.5; /* W0720 */

signed char sc3 = (signed char) -128.5; /* OK */
signed char sc4 = (signed char) -129.5; /* W0720 */
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.4.0

@node W0721
@section W0721
@cindex W0721

@subsection Message body

This volatile integer type doesn't have enough size to keep pointer value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int *p)
{
    /* when short is 16 bit long and pointer is 32 bit long */
    unsigned short us = (unsigned short) p; /* W0721 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0722
@section W0722
@cindex W0722

@subsection Message body

A value of signed statement is overflow.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    /* when int is 32 bit long */
    if (a < 0) {
        return a + 1; /* OK */
    }
    else if (a < 2147483647) {
        return a + 1; /* OK */
    }

    return a + 1; /* W0722 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0723} A value of signed statement might be overflow.
@end itemize

@subsection Since

1.4.0

@node W0723
@section W0723
@cindex W0723

@subsection Message body

A value of signed statement might be overflow.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int a)
{
    /* when int is 32 bit long */
    if (a < 0) {
        return a + 1; /* OK */
    }
    else if (a < 2000000000) {
        return a + 1; /* OK */
    }

    return a + 1; /* W0723 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0722} A value of signed statement is overflow.
@end itemize

@subsection Since

1.4.0

@node W0724
@section W0724
@cindex W0724

@subsection Message body

An unrecognized preprocessing directive is ignored by conditional include directive.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W0726
@section W0726
@cindex W0726

@subsection Message body

A function `%s()' which return value is declared as qualified void type, `return expression;' is found.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const void func(int a)
{
    if (a == 0) {
        return 0; /* W0726 */
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0727
@section W0727
@cindex W0727

@subsection Message body

The value not part of the enumeration type is used.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Fruits {
    APPLE = 1,
    BANANA,
    ORANGE
};

enum Fruits fruit = 5; /* W0727 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0728} Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.
@item @ref{W0729} An enumeration literal of the other enumeration type is substituted for enumeration type object.
@item @ref{W0730} A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.
@item @ref{W0731} The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.
@end itemize

@subsection Since

1.4.0

@node W0728
@section W0728
@cindex W0728

@subsection Message body

Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

extern void func1(enum Color);

void func2(void)
{
    func1(ORANGE); /* W0728 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0727} The value not part of the enumeration type is used.
@item @ref{W0729} An enumeration literal of the other enumeration type is substituted for enumeration type object.
@item @ref{W0730} A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.
@item @ref{W0731} The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.
@end itemize

@subsection Since

1.4.0

@node W0729
@section W0729
@cindex W0729

@subsection Message body

An enumeration literal of the other enumeration type is substituted for enumeration type object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

void func(void)
{
    enum Color c;

    c = ORANGE; /* W0729 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0727} The value not part of the enumeration type is used.
@item @ref{W0728} Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.
@item @ref{W0730} A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.
@item @ref{W0731} The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.
@end itemize

@subsection Since

1.4.0

@node W0730
@section W0730
@cindex W0730

@subsection Message body

A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

enum Color func(void)
{
    return ORANGE; /* W0730 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0727} The value not part of the enumeration type is used.
@item @ref{W0728} Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.
@item @ref{W0729} An enumeration literal of the other enumeration type is substituted for enumeration type object.
@item @ref{W0731} The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.
@end itemize

@subsection Since

1.4.0

@node W0731
@section W0731
@cindex W0731

@subsection Message body

The value of `%s' in 'case' label of 'switch' statement doesn't belong enumeration type of the control statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE, GRAPE };

int func(enum Color c)
{
    switch (c) {
    case RED:
        return 1;
    case GRAPE: /* W0731 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0727} The value not part of the enumeration type is used.
@item @ref{W0728} Other enumeration literal of enumeration type is passed to enumeration literal of formal argument as actual argument.
@item @ref{W0729} An enumeration literal of the other enumeration type is substituted for enumeration type object.
@item @ref{W0730} A function declared return value to enumeration type returned an enumeration literal of the other enumeration type.
@end itemize

@subsection Since

1.4.0

@node W0732
@section W0732
@cindex W0732

@subsection Message body

Both operand of `&&'operator is bit operator or arithmetic operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func(unsigned int a, unsigned int b,unsigned int c, unsigned int d)
{
    int r;
    r = (a + b) && (c - d); /* W0732 */
    r = (a * b) && (c / d); /* W0732 */

    r = (a << b) && (c << d); /* W0732 */
    r = (a >> b) && (c >> d); /* W0732 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0733} Both operand of `||'operator is bit operator or arithmetic operator.
@item @ref{W0734} A left operand of logical operator is bit operator or arithmetic operator.
@item @ref{W0735} A right operand of logical operator is the expression of bit operator or arithmetic operator.
@end itemize

@subsection Since

1.12.0

@node W0733
@section W0733
@cindex W0733

@subsection Message body

Both operand of `||'operator is bit operator or arithmetic operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func(unsigned int a, unsigned int b,unsigned int c, unsigned int d)
{
    int r;
    r = (a + b) || (c - d); /* W0733 */
    r = (a * b) || (c / d); /* W0733 */

    r = (a << b) || (c << d); /* W0733 */
    r = (a >> b) || (c >> d); /* W0733 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0732} Both operand of `&&'operator is bit operator or arithmetic operator.
@item @ref{W0734} A left operand of logical operator is bit operator or arithmetic operator.
@item @ref{W0735} A right operand of logical operator is the expression of bit operator or arithmetic operator.
@end itemize

@subsection Since

1.12.0

@node W0734
@section W0734
@cindex W0734

@subsection Message body

A left operand of logical operator is bit operator or arithmetic operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func(unsigned int a, unsigned int b, unsigned int c)
{
    int r;
    r = (a + b) && c; /* W0734 */
    r = (a - b) && c; /* W0734 */

    r = (a << b) || c; /* W0734 */
    r = (a >> b) || c; /* W0734 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0732} Both operand of `&&'operator is bit operator or arithmetic operator.
@item @ref{W0733} Both operand of `||'operator is bit operator or arithmetic operator.
@item @ref{W0735} A right operand of logical operator is the expression of bit operator or arithmetic operator.
@end itemize

@subsection Since

1.12.0

@node W0735
@section W0735
@cindex W0735

@subsection Message body

A right operand of logical operator is the expression of bit operator or arithmetic operator.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void func(unsigned int a, unsigned int b, unsigned int c)
{
    int r;
    r = a && (b + c); /* W0735 */
    r = a && (b - c); /* W0735 */

    r = a || (b >> c); /* W0735 */
    r = a || (b << c); /* W0735 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0732} Both operand of `&&'operator is bit operator or arithmetic operator.
@item @ref{W0733} Both operand of `||'operator is bit operator or arithmetic operator.
@item @ref{W0734} A left operand of logical operator is bit operator or arithmetic operator.
@end itemize

@subsection Since

1.12.0

@node W0736
@section W0736
@cindex W0736

@subsection Message body

A static variable `%s' which declared in file scope is read and write in one function only.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int a = 10; /* W0736 */

int func1(void)
{
    return 0;
}

int func2(void)
{
    return ++a;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0737
@section W0737
@cindex W0737

@subsection Message body

The content of `enum %s' is unknown. The enumeration tag is declared without define the content.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern enum Foo foo; /* W0737 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0738
@section W0738
@cindex W0738

@subsection Message body

An implicit type conversion from positive integer constant expression to smaller unsigned type. The value is rounded.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* when char is 8 bit long */
const unsigned char uc1 = 255; /* OK */
const unsigned char uc2 = 256; /* W0738 */

/* when int is 32 bit long */
const unsigned int ui1 = 4294967295; /* OK */
const unsigned int ui2 = 4294967296; /* W0738 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0739
@section W0739
@cindex W0739

@subsection Message body

The result of unsigned subtraction in constant expression is minus.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
const unsigned int ui1 = 3U - 3U; /* OK */
const unsigned int ui2 = 3U - 5U; /* W0739 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0740} The result of unsigned addition in constant expression beyond the maximum.
@item @ref{W0741} The result of unsigned multiplication in constant expression beyond the maximum.
@end itemize

@subsection Since

1.4.0

@node W0740
@section W0740
@cindex W0740

@subsection Message body

The result of unsigned addition in constant expression beyond the maximum.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* when int is 32 bit long */
const unsigned int ui1 = 4294967294U + 1U; /* OK */
const unsigned int ui2 = 4294967295U + 1U; /* W0740 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0739} The result of unsigned subtraction in constant expression is minus.
@item @ref{W0741} The result of unsigned multiplication in constant expression beyond the maximum.
@end itemize

@subsection Since

1.4.0

@node W0741
@section W0741
@cindex W0741

@subsection Message body

The result of unsigned multiplication in constant expression beyond the maximum.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* when int is 32 bit long */
const unsigned int ui1 = 2000000000U * 2U; /* OK */
const unsigned int ui2 = 3000000000U * 2U; /* W0741 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0739} The result of unsigned subtraction in constant expression is minus.
@item @ref{W0740} The result of unsigned addition in constant expression beyond the maximum.
@end itemize

@subsection Since

1.4.0

@node W0742
@section W0742
@cindex W0742

@subsection Message body

A negative integer constant expression converted to unsigned type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO (50)

unsigned int ui;

ui = MACRO - 100; /* W0742 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0743
@section W0743
@cindex W0743

@subsection Message body

The value of integer constant expression beyond the range of might be expressed with converted signed type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* when char is 8 bit long */
const signed char sc1 = 127; /* OK */
const signed char sc2 = 128; /* W0743 */

/* when int is 32 bit long */
const int si1 = 2147483647; /* OK */
const int si2 = 2147483648; /* W0743 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0744
@section W0744
@cindex W0744

@subsection Message body

The value of this control expression is constant value to be false. This control statement is not run.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define MACRO1 (0)
#define MACRO2 (1)

if (MACRO1 == MACRO2) { /* W0744 */
    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0745
@section W0745
@cindex W0745

@subsection Message body

This non-constant array subscript may cause out-of-range access.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(unsigned int a)
{
    int buf[10];

    if (a > 5 && a < 10) {
        buf[a + 5] = 0; /* W0745 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W0747
@section W0747
@cindex W0747

@subsection Message body

An implicit type conversion from signed short to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(short a)
{
    signed char b = a; /* W0747 */
    foo(a); /* W0747 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0748
@section W0748
@cindex W0748

@subsection Message body

An implicit type conversion from unsigned short to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(unsigned short a)
{
      unsigned char b = a; /* W0748 */
      foo(a); /* W0748 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0749
@section W0749
@cindex W0749

@subsection Message body

An implicit type conversion from signed int to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(int a)
{
    signed char b = a; /* W0749 */
    foo(a); /* W0749 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0750
@section W0750
@cindex W0750

@subsection Message body

An implicit type conversion from signed int to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(int a)
{
    short b = a; /* W0750 */
    foo(a); /* W0750 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0751
@section W0751
@cindex W0751

@subsection Message body

An implicit type conversion from unsigned int to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(unsigned int a)
{
    unsigned char b = a; /* W0751 */
    foo(a); /* W0751 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0752
@section W0752
@cindex W0752

@subsection Message body

An implicit type conversion from unsigned int to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(unsigned int a)
{
    unsigned short b = a; /* W0752 */
    foo(a); /* W0752 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0753
@section W0753
@cindex W0753

@subsection Message body

An implicit type conversion from signed long to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(long a)
{
    signed char b = a; /* W0753 */
    foo(a); /* W0753 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0754
@section W0754
@cindex W0754

@subsection Message body

An implicit type conversion from signed long to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(long a)
{
    short b = a; /* W0754 */
    foo(a); /* W0754 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0755
@section W0755
@cindex W0755

@subsection Message body

An implicit type conversion from signed long to signed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(long a)
{
    int b = a; /* W0755 */
    foo(a); /* W0755 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0756
@section W0756
@cindex W0756

@subsection Message body

An implicit type conversion from unsigned long to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(unsigned long a)
{
    unsigned char b = a; /* W0756 */
    foo(a); /* W0756 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0757
@section W0757
@cindex W0757

@subsection Message body

An implicit type conversion from unsigned long to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(unsigned long a)
{
    unsigned short b = a; /* W0757 */
    foo(a); /* W0757 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0758
@section W0758
@cindex W0758

@subsection Message body

An implicit type conversion from unsigned long to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(unsigned long a)
{
    unsigned int b = a; /* W0758 */
    foo(a); /* W0758 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0759
@section W0759
@cindex W0759

@subsection Message body

An implicit type conversion from signed long long to signed char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(signed char a);

void bar(long long a)
{
    signed char b = a; /* W0759 */
    foo(a); /* W0759 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0760
@section W0760
@cindex W0760

@subsection Message body

An implicit type conversion from signed long long to signed short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(short a);

void bar(long long a)
{
    short b = a; /* W0760 */
    foo(a); /* W0760 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0761
@section W0761
@cindex W0761

@subsection Message body

An implicit type conversion from signed long long to singed int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int a);

void bar(long long a)
{
    int b = a; /* W0761 */
    foo(a); /* W0761 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0762
@section W0762
@cindex W0762

@subsection Message body

An implicit type conversion from signed long long to signed long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(long a);

void bar(long long a)
{
    long b = a; /* W0762 */
    foo(a); /* W0762 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0763
@section W0763
@cindex W0763

@subsection Message body

An implicit type conversion from unsigned long long to unsigned char.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned char a);

void bar(unsigned long long a)
{
    unsigned char b = a; /* W0763 */
    foo(a); /* W0763 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0764
@section W0764
@cindex W0764

@subsection Message body

An implicit type conversion from unsigned long long to unsigned short.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned short a);

void bar(unsigned long long a)
{
    unsigned short b = a; /* W0764 */
    foo(a); /* W0764 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0765
@section W0765
@cindex W0765

@subsection Message body

An implicit type conversion from unsigned long long to unsigned int.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned int a);

void bar(unsigned long long a)
{
    unsigned int b = a; /* W0765 */
    foo(a); /* W0765 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0766} An implicit type conversion from unsigned long long to unsigned long.
@end itemize

@subsection Since

1.0.0

@node W0766
@section W0766
@cindex W0766

@subsection Message body

An implicit type conversion from unsigned long long to unsigned long.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(unsigned long a);

void bar(unsigned long long a)
{
    unsigned long b = a; /* W0766 */
    foo(a); /* W0766 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0747} An implicit type conversion from signed short to signed char.
@item @ref{W0748} An implicit type conversion from unsigned short to unsigned char.
@item @ref{W0749} An implicit type conversion from signed int to signed char.
@item @ref{W0750} An implicit type conversion from signed int to signed short.
@item @ref{W0751} An implicit type conversion from unsigned int to unsigned char.
@item @ref{W0752} An implicit type conversion from unsigned int to unsigned short.
@item @ref{W0753} An implicit type conversion from signed long to signed char.
@item @ref{W0754} An implicit type conversion from signed long to signed short.
@item @ref{W0755} An implicit type conversion from signed long to signed int.
@item @ref{W0756} An implicit type conversion from unsigned long to unsigned char.
@item @ref{W0757} An implicit type conversion from unsigned long to unsigned short.
@item @ref{W0758} An implicit type conversion from unsigned long to unsigned int.
@item @ref{W0759} An implicit type conversion from signed long long to signed char.
@item @ref{W0760} An implicit type conversion from signed long long to signed short.
@item @ref{W0761} An implicit type conversion from signed long long to singed int.
@item @ref{W0762} An implicit type conversion from signed long long to signed long.
@item @ref{W0763} An implicit type conversion from unsigned long long to unsigned char.
@item @ref{W0764} An implicit type conversion from unsigned long long to unsigned short.
@item @ref{W0765} An implicit type conversion from unsigned long long to unsigned int.
@end itemize

@subsection Since

1.0.0

@node W0767
@section W0767
@cindex W0767

@subsection Message body

An implicit type conversion from double to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(double a)
{
    float b = a; /* W0767 */
    foo(a); /* W0767 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0768} An implicit type conversion from long double to float.
@item @ref{W0769} An implicit type conversion from long double to double.
@end itemize

@subsection Since

1.0.0

@node W0768
@section W0768
@cindex W0768

@subsection Message body

An implicit type conversion from long double to float.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(float a);

void bar(long double a)
{
    float b = a; /* W0768 */
    foo(a); /* W0768 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0767} An implicit type conversion from double to float.
@item @ref{W0769} An implicit type conversion from long double to double.
@end itemize

@subsection Since

1.0.0

@node W0769
@section W0769
@cindex W0769

@subsection Message body

An implicit type conversion from long double to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(double a);

void bar(long double a)
{
    double b = a; /* W0769 */
    foo(a); /* W0769 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0767} An implicit type conversion from double to float.
@item @ref{W0768} An implicit type conversion from long double to float.
@end itemize

@subsection Since

1.0.0

@node W0770
@section W0770
@cindex W0770

@subsection Message body

A declaration of identifier `%s' which has external coupling exists more than one.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.h}
@verbatim
extern int func(void); /* W0770 */
@end verbatim

@file{test2.h}
@verbatim
extern int func(void); /* W0770 */
@end verbatim

@file{test.c}
@verbatim
#include "test1.h"
#include "test2.h"

int func(void)
{
    return 0;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0771} A global identifier `%s' is declared in more than one file.
@end itemize

@subsection Since

1.0.0

@node W0771
@section W0771
@cindex W0771

@subsection Message body

A global identifier `%s' is declared in more than one file.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.h}
@verbatim
extern int func(void); /* W0771 */
extern int a; /* W0771 */
@end verbatim

@file{test2.h}
@verbatim
extern int func(void); /* W0771 */
extern int a; /* W0771 */
@end verbatim

@file{test.c}
@verbatim
#include "test1.h"
#include "test2.h"
@end verbatim

@subsection Related message

@itemize
@item @ref{W0770} A declaration of identifier `%s' which has external coupling exists more than one.
@end itemize

@subsection Since

1.0.0

@node W0774
@section W0774
@cindex W0774

@subsection Message body

A value of double type is returned from `float %s()'function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern double foo(void);

float bar(void)
{
    return foo(); /* W0774 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0775} A value of long double type is returned from `float %s()' function.
@item @ref{W0776} A value of long double type is returned from `double %s()'function.
@end itemize

@subsection Since

1.0.0

@node W0775
@section W0775
@cindex W0775

@subsection Message body

A value of long double type is returned from `float %s()' function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern long double foo(void);

float bar(void)
{
    return foo(); /* W0775 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0774} A value of double type is returned from `float %s()'function.
@item @ref{W0776} A value of long double type is returned from `double %s()'function.
@end itemize

@subsection Since

1.0.0

@node W0776
@section W0776
@cindex W0776

@subsection Message body

A value of long double type is returned from `double %s()'function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern long double foo(void);

double bar(void)
{
    return foo(); /* W0776 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0774} A value of double type is returned from `float %s()'function.
@item @ref{W0775} A value of long double type is returned from `float %s()' function.
@end itemize

@subsection Since

1.0.0

@node W0777
@section W0777
@cindex W0777

@subsection Message body

An implicit type conversion from compound expression of float to double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(float a, float b)
{
    double c = a + b; /* W0777 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0778} An implicit type conversion from compound expression of float to long double.
@item @ref{W0779} An implicit type conversion from compound expression of to long double.
@end itemize

@subsection Since

1.0.0

@node W0778
@section W0778
@cindex W0778

@subsection Message body

An implicit type conversion from compound expression of float to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(float a, float b)
{
    long double c = a + b; /* W0778 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0777} An implicit type conversion from compound expression of float to double.
@item @ref{W0779} An implicit type conversion from compound expression of to long double.
@end itemize

@subsection Since

1.0.0

@node W0779
@section W0779
@cindex W0779

@subsection Message body

An implicit type conversion from compound expression of to long double.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double a, double b)
{
    long double c = a + b; /* W0779 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0777} An implicit type conversion from compound expression of float to double.
@item @ref{W0778} An implicit type conversion from compound expression of float to long double.
@end itemize

@subsection Since

1.0.0

@node W0780
@section W0780
@cindex W0780

@subsection Message body

Unsigned left shift operator `<<' in constant expression truncate non-zero high-order bit.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int foo(void)
{
    return 0x08000000U << 5; /* W0780 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0781
@section W0781
@cindex W0781

@subsection Message body

This 'switch' statement have only one path. It's verbose.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int foo(const int i)
{
    if (i > 5) {
        switch (i) { /* W0781 */
        case 0:
            return 1;
        case 5:
            return 2;
        default:
            return 3;
        }
    }

    switch (i) { /* OK */
    case 0:
        return 4;
    default:
        switch (i) { /* W0781 */
        case 10:
            return 5;
        default:
            return 6;
        }
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W0783
@section W0783
@cindex W0783

@subsection Message body

Cast is being made including the pointer point to incomplete type. This program is not portable.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern struct Foo *gp;

void foo(int *p)
{
    gp = (struct Foo *) p; /* W0783 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0784
@section W0784
@cindex W0784

@subsection Message body

The nonstandard escape sequence is used.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W0785
@section W0785
@cindex W0785

@subsection Message body

This declaration of `%s' is different from a former declaration

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct AAA {
    int a;
};

union AAA { /* W0785 */
    long a;
    int b;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0786
@section W0786
@cindex W0786

@subsection Message body

A bit field which having the type of except 'int', 'signed int' or 'unsigned int' doesn't support in ISO C standards

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST { /* W0786 */
    unsigned int a:3;
    unsigned long b:1;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0787
@section W0787
@cindex W0787

@subsection Message body

A type of `%s' is different from the past declaration in the different scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func1(void)
{
    extern int num;
    extern void func3(void);
}

void func2(void)
{
    extern double num; /* W0787 */
    extern void func3(int); /* W0787 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0788} A type of `%s' is different from the past declaration in the same scope.
@item @ref{W0789} A type of `%s' is different from the past declaration in the wider scope.
@end itemize

@subsection Since

1.6.0

@node W0788
@section W0788
@cindex W0788

@subsection Message body

A type of `%s' is different from the past declaration in the same scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int func(void);

void func(void) /* W0788 */
{
    typedef int num;
    double num; /* W0788 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0787} A type of `%s' is different from the past declaration in the different scope.
@item @ref{W0789} A type of `%s' is different from the past declaration in the wider scope.
@end itemize

@subsection Since

1.6.0

@node W0789
@section W0789
@cindex W0789

@subsection Message body

A type of `%s' is different from the past declaration in the wider scope.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int num = 0;
extern int func1(void);

void func2(void)
{
    extern double num; /* W0789 */
    extern void func1(void); /* W0789 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0788} A type of `%s' is different from the past declaration in the same scope.
@item @ref{W0789} A type of `%s' is different from the past declaration in the wider scope.
@end itemize

@subsection Since

1.6.0

@node W0790
@section W0790
@cindex W0790

@subsection Message body

An global object or a function `%s' is declared in more than one file.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    return 0;
}

int a = 0;

int func(void) /* W0790 */
{
    return 1;
}

int a = 1; /* W0790 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0791} An global object or a function `%s' is declared in more than one file.
@end itemize

@subsection Since

1.0.0

@node W0791
@section W0791
@cindex W0791

@subsection Message body

An global object or a function `%s' is declared in more than one file.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
int func(void) /* W0791 */
{
    return 0;
}

int a = 0; /* W0791 */
@end verbatim

@file{test2.c}
@verbatim
int func(void) /* W0791 */
{
    return 1;
}

int a = 1; /* W0791 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0790} An global object or a function `%s' is declared in more than one file.
@end itemize

@subsection Since

1.0.0

@node W0792
@section W0792
@cindex W0792

@subsection Message body

A floating point type object cast to function pointer and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int (*foo(const float f))(void)
{
    return (int (*)(void)) f; /* W0792 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0793
@section W0793
@cindex W0793

@subsection Message body

A function pointer cast to pointer to point an object and vice versa.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
typedef int (*funptr_t)(void);

funptr_t foo(float *p)
{
    return (funptr_t) p; /* W0793 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0794
@section W0794
@cindex W0794

@subsection Message body

Left shift operation of signed value causes implementation-defined behavior.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(int i)
{
    return i << 1; /* W0794 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0795
@section W0795
@cindex W0795

@subsection Message body

The number of an actual argument in function call is smaller than the number of a formal argument in the function prototype declaration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int, int, int);

static void bar(void)
{
    foo(1, 2); /* W0795 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0796} The number of an actual argument in function call is bigger than the number of a formal argument in the function prototype declaration.
@item @ref{W0797} The number of an actual argument in function call is different from the number of a formal argument in the function declaration.
@end itemize

@subsection Since

1.0.0

@node W0796
@section W0796
@cindex W0796

@subsection Message body

The number of an actual argument in function call is bigger than the number of a formal argument in the function prototype declaration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern void foo(int, int);

static void bar(void)
{
    foo(1, 2, 3); /* W0796 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0795} The number of an actual argument in function call is smaller than the number of a formal argument in the function prototype declaration.
@item @ref{W0797} The number of an actual argument in function call is different from the number of a formal argument in the function declaration.
@end itemize

@subsection Since

1.0.0

@node W0797
@section W0797
@cindex W0797

@subsection Message body

The number of an actual argument in function call is different from the number of a formal argument in the function declaration.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int foo(int, int);

static int bar(void)
{
    int a = foo(1); /* W0795 */
    int b = foo(1, 2);
    int c = foo(1, 2, 3); /* W0795 */
}

static int foo(int a, int b)
{
    return a + b;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0795} The number of an actual argument in function call is smaller than the number of a formal argument in the function prototype declaration.
@item @ref{W0796} The number of an actual argument in function call is bigger than the number of a formal argument in the function prototype declaration.
@end itemize

@subsection Since

1.0.0

@node W0798
@section W0798
@cindex W0798

@subsection Message body

Must not use the value with incomplete union object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern union UN *p;

void func(void)
{
    int i = 0;

    if (p) {
        i = p->i; /* W0798 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0799} Must not use the value with incomplete structure object.
@item @ref{W0800} `%s' is incomplete type which doesn't have a linkage.This is undefined.
@end itemize

@subsection Since

1.0.0

@node W0799
@section W0799
@cindex W0799

@subsection Message body

Must not use the value with incomplete structure object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern struct ST *p;

void func(void)
{
    int i = 0;

    if (p) {
        i = p->i; /* W0799 */
    }
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0798} Must not use the value with incomplete union object.
@item @ref{W0800} `%s' is incomplete type which doesn't have a linkage.This is undefined.
@end itemize

@subsection Since

1.0.0

@node W0800
@section W0800
@cindex W0800

@subsection Message body

`%s' is incomplete type which doesn't have a linkage.This is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a[]; /* W0800 */
struct ST s = { 0 }; /* W0800 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0798} Must not use the value with incomplete union object.
@item @ref{W0799} Must not use the value with incomplete structure object.
@end itemize

@subsection Since

1.0.0

@node W0801
@section W0801
@cindex W0801

@subsection Message body

This structure  or union doesn't have a named member.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct foo { /* W0801 */
};

struct bar { /* W0801 */
    int;
    int :1;
    long;
    double;
};
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W0802
@section W0802
@cindex W0802

@subsection Message body

A form of after `#include' preprocessing directive is not <file name> nor \"file name\".

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
#include fruits.h /* W0802 */

#define MACRO 1
#include MACRO /* W0802 */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W0803
@section W0803
@cindex W0803

@subsection Message body

A preprocessing directive is described in actual argument of function-like macro.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W0804
@section W0804
@cindex W0804

@subsection Message body

The 'defined' syntax is not `defined (identifier)' nor `defined identifier'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#if defined "MACRO" /* W0804 */
#endif
@end verbatim

@subsection Related message

@itemize
@item @ref{W0805} An identifier to be actual argument doesn't find in `defined'.
@end itemize

@subsection Since

1.0.0

@node W0805
@section W0805
@cindex W0805

@subsection Message body

An identifier to be actual argument doesn't find in `defined'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#if defined "foo" /* W0805 */
int i = 0;
#endif
@end verbatim

@subsection Related message

@itemize
@item @ref{W0804} The 'defined' syntax is not `defined (identifier)' nor `defined identifier'.
@end itemize

@subsection Since

1.16.0

@node W0806
@section W0806
@cindex W0806

@subsection Message body

It is trying to define a macro named `defined'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define defined !defined /* W0806 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0807} It is trying to delete pre-defined macro `%s'.
@item @ref{W0808} It is trying to redefine pre-defined macro `%s'.
@end itemize

@subsection Since

1.4.0

@node W0807
@section W0807
@cindex W0807

@subsection Message body

It is trying to delete pre-defined macro `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#undef __STDC_VERSION__ /* W0807 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0806} It is trying to define a macro named `defined'.
@item @ref{W0808} It is trying to redefine pre-defined macro `%s'.
@end itemize

@subsection Since

1.6.0

@node W0808
@section W0808
@cindex W0808

@subsection Message body

It is trying to redefine pre-defined macro `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define __FILE__ "test.c" /* W0808 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0806} It is trying to define a macro named `defined'.
@item @ref{W0807} It is trying to delete pre-defined macro `%s'.
@end itemize

@subsection Since

1.6.0

@node W0809
@section W0809
@cindex W0809

@subsection Message body

An identifier `%s' is reserved by the library.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int __value; /* W0809 */
int _VAL = 10; /* W0809 */
static void _func(void); /* W0809 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W0810
@section W0810
@cindex W0810

@subsection Message body

`@{@}' is required to clarify this structure of `if-if-else' statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int foo(int i, int j) {
    if (i < 0) /* W0810 */
        if (j > 0) {
            return 0;
        }
    else {
        return 1;
    }

    if (i > 0) /* W0810 */
        if (j < 0) {
            return 2;
        }
        else {
            return 3;
        }

    return 4;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W0811
@section W0811
@cindex W0811

@subsection Message body

The `defined' token which the expanded result of this macro doesn't allowed.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define COND defined(FOO)

#if COND /* W0811 */
int i = 0;
#endif
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W0827
@section W0827
@cindex W0827

@subsection Message body

An initial value of nested structure's element doesn't enclosed in curly brace `@{@}'.


@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST {
    int i;
    int j;
};

struct ST a[2] = { 10, 20, 30, 40 }; /* W0827 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0828} An initial value of nested array's element doesn't enclosed in curly brace `@{ @}'.
@end itemize

@subsection Since

1.0.0

@node W0828
@section W0828
@cindex W0828

@subsection Message body

An initial value of nested array's element doesn't enclosed in curly brace `@{@}'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a[3][2] = { {1, 2}, {3, 4}, {5, 6} };
int b[3][2] = { 1, 2, 3, 4, 5, 6 }; /* W0828 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0827} An initial value of nested structure's element doesn't enclosed in curly brace `@{ @}'.
@end itemize

@subsection Since

1.0.0

@node W0830
@section W0830
@cindex W0830

@subsection Message body

There is comma `,' at the end of the enumerator list.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { Red, Green, Blue, }; /* W0830 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W0831
@section W0831
@cindex W0831

@subsection Message body

This is language extension for inline assembly. It will be ignored between #asm and #endasm.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0832} An inline assembly syntax is using. This is the language extension. This code will be ignored.
@end itemize

@subsection Since

1.0.0

@node W0832
@section W0832
@cindex W0832

@subsection Message body

An inline assembly syntax is using. This is the language extension. This code will be ignored.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define ASM_CODE asm("movl %ecx, %eax")

void foo(int arg1, int *arg2, int arg3)
{
    asm("movl %ecx, %eax"); /* W0832 */
    __asm__("movl %ecx, (%eax)"); /* W0832 */

    asm { /* W0832 */
        xorl eax, eax
    }

    ASM_CODE; /* W0832 */

    __asm__ volatile ( /* W0832 */
            "int $0x80"
            : "=a" (r)
              "+b" (arg1),
              "+c" (arg2),
              "+d" (arg3)
            : "a" (128)
            : "memory", "cc");
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0831} This is language extension for inline assembly. It will be ignored between #asm and #endasm.
@end itemize

@subsection Since

1.8.0

@node W0833
@section W0833
@cindex W0833

@subsection Message body

A suffix 'LL' is using.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
long long ll = 123LL; /* W0833 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0834} A long long type is using.
@end itemize

@subsection Since

1.18.0

@node W0834
@section W0834
@cindex W0834

@subsection Message body

A long long type is using.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern long long ll; /* W0834 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0833} A suffix 'LL' is using.
@end itemize

@subsection Since

1.18.0

@node W0835
@section W0835
@cindex W0835

@subsection Message body

A macro which receives variable argument is defined.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W0947
@section W0947
@cindex W0947

@subsection Message body

String literal is specified directly.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
func("Apple, Banana, Chocolate"); /* W0947 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0948} Character constant %s is specified directly.
@item @ref{W0949} A value `%s' is used directly for size definition of bit field.
@item @ref{W0950} Integer constant `%s' is specified directly as an array size.
@end itemize

@subsection Since

1.0.0

@node W0948
@section W0948
@cindex W0948

@subsection Message body

Character constant %s is specified directly.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
func('a'); /* W0948 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0947} String literal is specified directly.
@item @ref{W0949} A value `%s' is used directly for size definition of bit field.
@item @ref{W0950} Integer constant `%s' is specified directly as an array size.
@end itemize

@subsection Since

1.0.0

@node W0949
@section W0949
@cindex W0949

@subsection Message body

A value `%s' is used directly for size definition of bit field.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST {
    unsigned int a:1;
    unsigned int a:2; /* W0949 */
    unsigned int a:3; /* W0949 */
};
@end verbatim

@subsection Related message

@itemize
@item @ref{W0947} String literal is specified directly.
@item @ref{W0948} Character constant %s is specified directly.
@item @ref{W0950} Integer constant `%s' is specified directly as an array size.
@end itemize

@subsection Since

1.0.0

@node W0950
@section W0950
@cindex W0950

@subsection Message body

Integer constant `%s' is specified directly as an array size.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a[10]; /* W0950 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0947} String literal is specified directly.
@item @ref{W0948} Character constant %s is specified directly.
@item @ref{W0949} A value `%s' is used directly for size definition of bit field.
@end itemize

@subsection Since

1.0.0

@node W1026
@section W1026
@cindex W1026

@subsection Message body

%sth actual argument is not object type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern struct st s;
extern void foo(struct st);

void bar(void)
{
    foo(s); /* W1026 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W1027
@section W1027
@cindex W1027

@subsection Message body

A base type of array is function type. This is meaningless.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int (fun_tbl[20])(void); /* W1027 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1028} A base type of array is an array with unknown size. Incomplete type of array will not build.
@item @ref{W1029} A base type of array is an obscure structure or union. Incomplete type of array will not build.
@end itemize

@subsection Since

1.0.0

@node W1028
@section W1028
@cindex W1028

@subsection Message body

A base type of array is an array with unknown size. Incomplete type of array will not build.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int a[4][]; /* W1028 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1027} A base type of array is function type. This is meaningless.
@item @ref{W1029} A base type of array is an obscure structure or union. Incomplete type of array will not build.
@end itemize

@subsection Since

1.0.0

@node W1029
@section W1029
@cindex W1029

@subsection Message body

A base type of array is an obscure structure or union. Incomplete type of array will not build.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
struct ST a[5]; /* W1029 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1027} A base type of array is function type. This is meaningless.
@item @ref{W1028} A base type of array is an array with unknown size. Incomplete type of array will not build.
@end itemize

@subsection Since

1.0.0

@node W1030
@section W1030
@cindex W1030

@subsection Message body

A label `%s' is used more than two times in this function.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(int a, int b)
{
    if (a == 0) {
        int c = 0;
RETRY:
        b = 10;
    }

    if (b != 0) {
        goto RETRY;
    }
RETRY: /* W1030 */
    b = 1;

    ...snip...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.6.0

@node W1031
@section W1031
@cindex W1031

@subsection Message body

An Object `%s' is declared both external coupling and internal coupling. This action is undefined.

@subsection Content

Under construction.

@subsection Sample code

@file{test.h}
@verbatim
extern int a;
@end verbatim

@file{test.c}
@verbatim
#include "test.h"

static int a; /* W1031 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W1032
@section W1032
@cindex W1032

@subsection Message body

A tentative definition of variable '%s' which has internal linkage must not incomplete type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static struct ST a[3]; /* W1032 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W1033
@section W1033
@cindex W1033

@subsection Message body

A 'volatile' or 'const' qualifier is used for the type of function return value. This action is undefined.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern const int func1(int); /* W1033 */

const int func2(int i) /* W1033 */
{
    return i + 1;
}

const int *func3(int i) /* OK */
{
    static int j;

    j = i;
    return &j;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.4.0

@node W1034
@section W1034
@cindex W1034

@subsection Message body

It is declared at function `%s()' with static storage class specifier in block scope. This usage is meaningless.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int func(void)
{
    static int func1(void); /* W1034 */
    extern int func2(void);
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W1035
@section W1035
@cindex W1035

@subsection Message body

`%s' declared typedef. It cannot be redeclared inside an inner scope without using explicit type.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1036} `%s' declared typedef. It cannot be redeclared as a member of structure or union without using explicit type.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W1036
@section W1036
@cindex W1036

@subsection Message body

`%s' declared typedef. It cannot be redeclared as a member of structure or union without using explicit type.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1035} `%s' declared typedef. It cannot be redeclared inside an inner scope without using explicit type.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W1037
@section W1037
@cindex W1037

@subsection Message body

`%s' which has external coupling is declared more than one, this is incompatible.

@subsection Content

Under construction.

@subsection Sample code

@file{test1.c}
@verbatim
extern void func(void); /* W1037 */
extern int a; /* W1037 */
@end verbatim

@file{test2.c}
@verbatim
extern int func(int); /* W1037 */
extern long a; /* W1037 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W1039
@section W1039
@cindex W1039

@subsection Message body

`ll' is used in %sth conversion specifier.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int printf(const char *, ...);

void foo(long long ll)
{
    printf("%lld", ll); /* W1039 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W1040
@section W1040
@cindex W1040

@subsection Message body

An unrecognizable string is described after preprocessing directive.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define TEST

#ifdef TEST
#if defined(CASE_1)
int i = 1;
#elif defined(CASE_2)
int i = 2;
#endif CASE /* W1040 */
#else
int i = 0;
#endif TEST /* W1040 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1041} `%s' is not official preprocessing directive of ISO C standards.
@item @ref{W1042} 'sizeof' operator is using in preprocessing directive. This is the language extension.
@end itemize

@subsection Since

1.16.0

@node W1041
@section W1041
@cindex W1041

@subsection Message body

`%s' is not official preprocessing directive of ISO C standards.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#compiler_specific_extension 1 2.3 "4" /* W1041 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1040} An unrecognizable string is described after preprocessing directive.
@item @ref{W1042} 'sizeof' operator is using in preprocessing directive. This is the language extension.
@end itemize

@subsection Since

1.16.0

@node W1042
@section W1042
@cindex W1042

@subsection Message body

'sizeof' operator is using in preprocessing directive. This is the language extension.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1040} An unrecognizable string is described after preprocessing directive.
@item @ref{W1041} `%s' is not official preprocessing directive of ISO C standards.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W1043
@section W1043
@cindex W1043

@subsection Message body

`@@ address' is not supported ISO C standards. It will be considered as language extension.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1045} This `@@ word' syntax will be ignored.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W1045
@section W1045
@cindex W1045

@subsection Message body

This `@@ word' syntax will be ignored.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

@itemize
@item @ref{W1043} `@@ address' is not supported ISO C standards. It will be considered as language extension.
@end itemize

@subsection Since

After 2.0.0 (planned)

@node W1046
@section W1046
@cindex W1046

@subsection Message body

A space character is ignored between `\' and line feed.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
#define FOO(a, b)   /* OK */    \
    (               /* W1046 */ \ 
        (a) + (b)   /* W1046 */ \	
    )
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W1047
@section W1047
@cindex W1047

@subsection Message body

The struct, union or array's initializer is not literal.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int foo(int i, int j)
{
    int a[] = { 0, i, j }; /* W1047 */
    return a[1];
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W1048
@section W1048
@cindex W1048

@subsection Message body

The multi byte string literal is an implementation defined value.

@subsection Content

@b{This message will be supported after AdLint 2.0.0}

Under construction.

@subsection Sample code

@verbatim
/* will be added */
@end verbatim

@subsection Related message

None.

@subsection Since

After 2.0.0 (planned)

@node W1049
@section W1049
@cindex W1049

@subsection Message body

The result of conversion to signed integer type in integer expression might not be expressed by a signed type.

@subsection Content

Under construction.

@subsection Sample code

example 1
@verbatim
void func1(signed int si)
{
    signed char sc = (signed char) si + 10; /* W1049 */
}
@end verbatim

example 2
@verbatim
void func(unsigned int ui)
{
    unsigned int a = ui * ui;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@item @ref{W1051} The result of unsigned arithmetic expression typed `%s' is going around 0 by overflow.
@item @ref{W1052} The result of unsigned arithmetic expression typed `%s' can be going around by overflow.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W1050
@section W1050
@cindex W1050

@subsection Message body

The result of conversion to signed integer type in integer expression is not express by a signed type.

@subsection Content

Under construction.

@subsection Sample code

example 1
@verbatim
void func(signed int si)
{
    signed char sc = 0;

    if (si > 127) {
        sc = (signed char) si + 1; /* W1050 */
    }
}
@end verbatim

example 2
@verbatim
void func(unsigned int ui)
{
    unsigned int a = ui * ui;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1051} The result of unsigned arithmetic expression typed `%s' is going around 0 by overflow.
@item @ref{W1052} The result of unsigned arithmetic expression typed `%s' can be going around by overflow.
@item @ref{C1000} Warning above is detected in the following context.
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

1.0.0

@node W1051
@section W1051
@cindex W1051

@subsection Message body

The result of unsigned arithmetic expression typed `%s' is going around 0 by overflow.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(unsigned int ui)
{
    if (ui > 0xEFFFFFFFU) {
        return ui + 0x10000000U; /* W1051 */
    }

    return 0U;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@item @ref{W1052} The result of unsigned arithmetic expression typed `%s' can be going around by overflow.
@end itemize

@subsection Since

1.0.0

@node W1052
@section W1052
@cindex W1052

@subsection Message body

The result of unsigned arithmetic expression typed `%s' can be going around by overflow.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
unsigned int func(unsigned int a, unsigned int b)
{
    if (a > 0xEFFFFFFFU && b < 0x20000000U) {
        return a + b; /* W1052 */
    }

    return 0U;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@item @ref{W1051} The result of unsigned arithmetic expression typed `%s' is going around 0 by overflow.
@end itemize

@subsection Since

1.0.0

@node W1053
@section W1053
@cindex W1053

@subsection Message body

A numeric constants is passed to an actual argument which formal argument is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(enum Color);

void func2(void)
{
    func1(4); /* W1053 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1054
@section W1054
@cindex W1054

@subsection Message body

A non enumeration type expression is substituted for the enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern enum Color col;

void func2(void)
{
    col = 4; /* W1054 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1055
@section W1055
@cindex W1055

@subsection Message body

A non enumeration type expression is returned from the function which return value is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

enum Color func(void)
{
    return 4; /* W1055 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1056
@section W1056
@cindex W1056

@subsection Message body

An object of actual argument is different enumeration type which formal argument is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN= 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

extern void func1(enum Color);

void func2(enum Season ssn)
{
    func1(ssn); /* W1056 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1057
@section W1057
@cindex W1057

@subsection Message body

An enumeration value is substituted for different enumeration type object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

extern enum Color col;

void func(enum Season ssn)
{
    col = ssn; /* W1057 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1058
@section W1058
@cindex W1058

@subsection Message body

A different enumeration type of value is returned from a function which return value is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED  = 1, GREEN = 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

enum Color func(enum Season ssn)
{
    return ssn; /* W1058 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1059
@section W1059
@cindex W1059

@subsection Message body

An enumeration value is passed to actual argument which formal argument is not enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(int num);

void func2(enum Color col)
{
    func1(col); /* W1059 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1060
@section W1060
@cindex W1060

@subsection Message body

An enumeration value is returned from a function which return value is not enumeration type .

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

int func2(enum Color col)
{
    return col; /* W1060 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1061
@section W1061
@cindex W1061

@subsection Message body

Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(enum Color);

void func2(int num)
{
    func1(num); /* W1061 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1062
@section W1062
@cindex W1062

@subsection Message body

Non constant expression is substituted for the enumeration type object.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern enum Color col;

void func(int num)
{
    col = num + 1; /* W1062 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1063
@section W1063
@cindex W1063

@subsection Message body

The return value returned from enumeration type function to non constant expression.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

enum Color func(int num)
{
    return num / 2; /* W1063 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.6.0

@node W1064
@section W1064
@cindex W1064

@subsection Message body

A integer constant is used in switch statement where case label is enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };

int func(enum Color c)
{
    switch (c) {
    case RED: /* OK */
        return 1;
    case 1: /* W1064 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1065} A value of different enumeration type is used in switch statement  where case label is an enumeration type.
@end itemize

@subsection Since

1.4.0

@node W1065
@section W1065
@cindex W1065

@subsection Message body

A value of different enumeration type is used in switch statement  where case label is an enumeration type.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE, GRAPE };

int func(enum Color c)
{
    switch (c) {
    case RED: /* OK */
        return 1;
    case ORANGE: /* W1065 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1053} A numeric constants is passed to an actual argument which formal argument is enumeration type.
@item @ref{W1054} A non enumeration type expression is substituted for the enumeration type.
@item @ref{W1055} A non enumeration type expression is returned from the function which return value is enumeration type.
@item @ref{W1056} An object of actual argument is different enumeration type which formal argument is enumeration type.
@item @ref{W1057} An enumeration value is substituted for different enumeration type object.
@item @ref{W1058} A different enumeration type of value is returned from a function which return value is enumeration type.
@item @ref{W1059} An enumeration value is passed to actual argument which formal argument is not enumeration type.
@item @ref{W1060} An enumeration value is returned from a function which return value is not enumeration type .
@item @ref{W1061} Non constant expression of non enumeration type is passed to actual argument which formal argument is enumeration type.
@item @ref{W1062} Non constant expression is substituted for the enumeration type object.
@item @ref{W1063} The return value returned from enumeration type function to non constant expression.
@item @ref{W1064} A integer constant is used in switch statement where case label is enumeration type.
@end itemize

@subsection Since

1.4.0

@node W1066
@section W1066
@cindex W1066

@subsection Message body

A value of the `float' typed compound expression is explicitly converted into a `double' value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(float a)
{
    double b = (double) (a * a);
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1067} A value of the `float' typed compound expression is explicitly converted into a `long double' value.
@item @ref{W1068} A value of the `double' typed compound expression is explicitly converted into a `long double' value.
@end itemize

@subsection Since

1.14.0

@node W1067
@section W1067
@cindex W1067

@subsection Message body

A value of the `float' typed compound expression is explicitly converted into a `long double' value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(float a)
{
    long double b = (long double) (a * a);
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1066} A value of the `float' typed compound expression is explicitly converted into a `double' value.
@item @ref{W1068} A value of the `double' typed compound expression is explicitly converted into a `long double' value.
@end itemize

@subsection Since

1.14.0

@node W1068
@section W1068
@cindex W1068

@subsection Message body

A value of the `double' typed compound expression is explicitly converted into a `long double' value.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void func(double a)
{
    long double b = (long double) (a * a);
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W1066} A value of the `float' typed compound expression is explicitly converted into a `double' value.
@item @ref{W1067} A value of the `float' typed compound expression is explicitly converted into a `long double' value.
@end itemize

@subsection Since

1.14.0

@node W1069
@section W1069
@cindex W1069

@subsection Message body

No trailing `else' clause is found in this `if-else-if' statements chain.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int func(int i)
{
    if (i == 2) { /* W1069 */
        return 0;
    }
    else if (i == 4) {
        return 1;
    }
    return 2;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.14.0

@node W1070
@section W1070
@cindex W1070

@subsection Message body

This `switch' statement can be translated into `if-else' statement because there are only 2 execution paths.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
switch (x) {
case 1:
    ...
    break;
default:
    ...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.14.0

@node W1071
@section W1071
@cindex W1071

@subsection Message body

Function `%s' has multiple termination points.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
void foo(int i) /* W1071 */
{
    if (i == 0) {
        return;
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.18.0

@node W1072
@section W1072
@cindex W1072

@subsection Message body

`A `goto' statement is found.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int func(int i)
{
    if (i == 1) {
        goto Label1; /* W1072 */
    }

    goto Label2; /* W1072 */

Label1:
    i = 10;
Label2:
    i = 20;
    return i;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.14.0

@node W1073
@section W1073
@cindex W1073

@subsection Message body

Return value of the function `%s' is discarded.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int bar(void);
static void foo(void)
{
    int i;
    int j;
    for (i = 0, bar(); i < 10; i++) { /* W1073 */
        j = bar(); /* OK */
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W1074
@section W1074
@cindex W1074

@subsection Message body

Side-effects in `sizeof' operand will not be recorded because the operand will not be executed actually.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int foo(void)
{
    int i = 0;

    if (sizeof(i++) == 4) { /* W1074 */
        return 0;
    }
    else {
        return 1;
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W1075
@section W1075
@cindex W1075

@subsection Message body

This declaration has no `static' storage-class-specifier while the declaring object has internal-linkage.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int func(void);
int func(void) /* W1075 */
{
    ...
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W1076
@section W1076
@cindex W1076

@subsection Message body

`%s' has internal-linkage without any prototype declarations.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
static int func(void) /* W1076 */
{
    return 0;
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W1077
@section W1077
@cindex W1077

@subsection Message body

Declaring array object without a size.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int a[]; /* W1077 */
@end verbatim

@subsection Related message

None.

@subsection Since

1.16.0

@node W9001
@section W9001

@subsection Message body

Control never reaches to this statement.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
extern int all_possible_values_of_int(void);
extern unsigned int zero_if_succeeded(void);

void func(void)
{
    int i = all_possible_values_of_int();

    if (i < 0) {
        unsigned int ui = zero_if_succeeded();

        if (ui > 0) {
            return;
        }

        /* "ui" is equal to zero at this point */

        /* Always be true?  No, it'll be false all the time */
        if (i < ui) {
            return; /* W9001: Control never reaches here! */
        }
        /*
         * ISO standard says;
         *   Usual Arithmetic Conversion performed before evaluating
         *   the expression "i < ui".
         * Usual Arithmetic Conversion makes "i < ui" into
         * "(unsigned int) i < ui" and then the value of "i" which
         * is less than 0 will be converted into a new value which
         * is greater than 0 because of the wrap-around.
         * So, the expression ("a value greater than 0" < 0) makes
         * always false.
         */
    }
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.0.0

@node W9002
@section W9002
@cindex W9002

@subsection Message body

There is no line feed character at the end of file.

@subsection Content

Under construction.

@subsection Sample code

Under construction.

@subsection Related message

None.

@subsection Since

1.0.0

@node W9003
@section W9003
@cindex W9003

@subsection Message body

An object typed `%s' is implicitly converted into an object of type `%s'.

@subsection Content

This message indicates that an implicit conversion from or to an object of the
non-standard type will occur.

@subsection Sample code

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruit { APPLE, BANANA, ORANGE };

extern void foo(enum Color);

static void bar(void)
{
    int i = RED; /* W9003 */
    foo(ORANGE); /* W9003 */
}
@end verbatim

@subsection Related message

None.

@subsection Since

1.12.0

@node C0001
@section C0001
@cindex C0001

@subsection Message body

A warning is detected as a pair of this identifier `%s'.

@subsection Content

Under construction.

@subsection Sample code

@verbatim
int very_long_long_long_long_long_long_long_identifier_1 = 0; /* C0001 */
int very_long_long_long_long_long_long_long_identifier_2 = 1; /* W0052 */
@end verbatim

@subsection Related message

@itemize
@item @ref{W0051} An external identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in linker property.
@item @ref{W0052} An identifier `%s' cannot distinguish other identifier name from the range of number of characters defined in compile property.
@end itemize

@subsection Since

1.0.0

@node C1000
@section C1000
@cindex C1000

@subsection Message body

Warning above is detected in the following context.

@subsection Content

This message indicates that the above @ref{W0093,W0093}, @ref{W0096,W0096},
@ref{W0097,W0097}, @ref{W0115,W0115}, @ref{W0116,W0116}, @ref{W0421,W0421},
@ref{W0422,W0422}, @ref{W0423,W0423}, @ref{W0424,W0424}, @ref{W0459,W0459},
@ref{W0460,W0460}, @ref{W0461,W0461}, @ref{W0462,W0462}, @ref{W0568,W0568},
@ref{W0569,W0569}, @ref{W0570,W0570}, @ref{W0607,W0607}, @ref{W0608,W0608},
@ref{W0705,W0705}, @ref{W0707,W0707}, @ref{W0720,W0720}, @ref{W0745,W0745},
@ref{W1049,W1049} and @ref{W1050,W1050} warnings are detected in the context
described by the following messages.

@subsection Sample code

@verbatim
 1: int foo(int i)
 2: {
 3:     int j; /* C1003 */
 4: 
 5:     if (i < 0) { /* C1001 */
 6:         if (i < -10) { /* C1002 */
 7:             j = 2;
 8:         }
 9:         else if (i < -5) { /* C1002 */
10:             j = 3;
11:         }
12:     }
13:     else {
14:         j = 1;
15:     }
16: 
17:     return j; /* W0460 */
18: }

a.c:17:12:warning:c_builtin:W0460:UNC:X99:A value of variable `j' wouldn't set when this expression is evaluated.
:::context:c_builtin:C1000:INF:X99:Warning above is detected in the following context.
a.c:3:9:context:c_builtin:C1003:INF:X99:The problematic variable is defined here without initializer.
a.c:5:11:context:c_builtin:C1001:INF:X99:This controlling-expression is evaluated to be true.
a.c:6:15:context:c_builtin:C1002:INF:X99:This controlling-expression is evaluated to be false.
a.c:9:20:context:c_builtin:C1002:INF:X99:This controlling-expression is evaluated to be false.
@end verbatim

@subsection Related message

@itemize
@item @ref{C1001} This controlling-expression is evaluated to be true.
@item @ref{C1002} This controlling-expression is evaluated to be false.
@item @ref{C1003} The problematic variable is defined here without initializer.
@item @ref{C1004} NULL value is assigned to the the problematic variable.
@item @ref{C1005} A value possibly be NULL is assigned to the problematic variable.
@item @ref{C1006} New value is assigned to the problematic variable.
@end itemize

@subsection Since

3.2.0

@node C1001
@section C1001
@cindex C1001

@subsection Message body

This controlling-expression is evaluated to be true.

@subsection Content

This message indicates that the controlling-expression was evaluated as true in
the context of detecting @ref{W0093,W0093}, @ref{W0096,W0096},
@ref{W0097,W0097}, @ref{W0115,W0115}, @ref{W0116,W0116}, @ref{W0421,W0421},
@ref{W0422,W0422}, @ref{W0423,W0423}, @ref{W0424,W0424}, @ref{W0459,W0459},
@ref{W0460,W0460}, @ref{W0461,W0461}, @ref{W0462,W0462}, @ref{W0568,W0568},
@ref{W0569,W0569}, @ref{W0570,W0570}, @ref{W0607,W0607}, @ref{W0608,W0608},
@ref{W0705,W0705}, @ref{W0707,W0707}, @ref{W0720,W0720}, @ref{W0745,W0745},
@ref{W1049,W1049} and @ref{W1050,W1050} warnings.

@subsection Sample code

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0093} This expression may cause division-by-zero.
@item @ref{W0096} It divided by a constant expression which definitely zero.
@item @ref{W0097} This expression must cause division-by-zero.
@item @ref{W0115} Unsigned left shift operator `<<' drop the high-order bit.
@item @ref{W0116} Unsigned left shift operator `<<' can be drop high-order bit.
@item @ref{W0421} Value of the dereferencing pointer must be NULL.
@item @ref{W0422} Value of the dereferencing pointer may be NULL.
@item @ref{W0423} Arithmetic operation is being made to the pointer which its value will be NULL.
@item @ref{W0424} Arithmetic operation is being made to the pointer which its value might be NULL.
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@item @ref{W0568} The result of left shift operation against the signed constant expression value is undefined.
@item @ref{W0569} The result of left shift operation against the signed expression value is undefined.
@item @ref{W0570} This signed left shift operation may make undefined value.
@item @ref{W0607} An integer expression which the value which the value is minus converted to unsigned type.
@item @ref{W0608} An integer expression which the value might be minus converted to unsigned type.
@item @ref{W0705} This non-constant array subscript may cause out-of-range access.
@item @ref{W0707} This constant array subscript must cause out-of-range access.
@item @ref{W0720} The value with floating-point type doesn't fit in the range of converted type.
@item @ref{W0745} This non-constant array subscript may cause out-of-range access.
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@end itemize

@subsection Since

3.2.0

@node C1002
@section C1002
@cindex C1002

@subsection Message body

This controlling-expression is evaluated to be false.

@subsection Content

This message indicates that the controlling-expression was evaluated as false
in the context of detecting @ref{W0093,W0093}, @ref{W0096,W0096},
@ref{W0097,W0097}, @ref{W0115,W0115}, @ref{W0116,W0116}, @ref{W0421,W0421},
@ref{W0422,W0422}, @ref{W0423,W0423}, @ref{W0424,W0424}, @ref{W0459,W0459},
@ref{W0460,W0460}, @ref{W0461,W0461}, @ref{W0462,W0462}, @ref{W0568,W0568},
@ref{W0569,W0569}, @ref{W0570,W0570}, @ref{W0607,W0607}, @ref{W0608,W0608},
@ref{W0705,W0705}, @ref{W0707,W0707}, @ref{W0720,W0720}, @ref{W0745,W0745},
@ref{W1049,W1049} and @ref{W1050,W1050} warnings.

@subsection Sample code

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0093} This expression may cause division-by-zero.
@item @ref{W0096} It divided by a constant expression which definitely zero.
@item @ref{W0097} This expression must cause division-by-zero.
@item @ref{W0115} Unsigned left shift operator `<<' drop the high-order bit.
@item @ref{W0116} Unsigned left shift operator `<<' can be drop high-order bit.
@item @ref{W0421} Value of the dereferencing pointer must be NULL.
@item @ref{W0422} Value of the dereferencing pointer may be NULL.
@item @ref{W0423} Arithmetic operation is being made to the pointer which its value will be NULL.
@item @ref{W0424} Arithmetic operation is being made to the pointer which its value might be NULL.
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@item @ref{W0568} The result of left shift operation against the signed constant expression value is undefined.
@item @ref{W0569} The result of left shift operation against the signed expression value is undefined.
@item @ref{W0570} This signed left shift operation may make undefined value.
@item @ref{W0607} An integer expression which the value which the value is minus converted to unsigned type.
@item @ref{W0608} An integer expression which the value might be minus converted to unsigned type.
@item @ref{W0705} This non-constant array subscript may cause out-of-range access.
@item @ref{W0707} This constant array subscript must cause out-of-range access.
@item @ref{W0720} The value with floating-point type doesn't fit in the range of converted type.
@item @ref{W0745} This non-constant array subscript may cause out-of-range access.
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@end itemize

@subsection Since

3.2.0

@node C1003
@section C1003
@cindex C1003

@subsection Message body

The problematic variable is defined here without initializer.

@subsection Content

This message indicates where the problematic variable is defined in the context
of detecting @ref{W0459,W0459}, @ref{W0460,W0460}, @ref{W0461,W0461} and
@ref{W0462,W0462} warnings.

@subsection Sample code

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0459} A value of variable `%s' doesn't set when this expression is evaluated. This program is danger.
@item @ref{W0460} A value of variable `%s' wouldn't set when this expression is evaluated.
@item @ref{W0461} A pointer which points the undetermined variable is used for the actual argument of the function. This program is danger.
@item @ref{W0462} A pointer which the value will probably not set is used for the actual argument of the function.
@end itemize

@subsection Since

3.2.0

@node C1004
@section C1004
@cindex C1004

@subsection Message body

NULL value is assigned to the the problematic variable.

@subsection Content

This message indicates where the NULL value was assigned to the problematic
variable in the context of detecting @ref{W0421,W0421}, @ref{W0422,W0422},
@ref{W0423,W0423} and @ref{W0424,W0424} warnings.

@subsection Sample code

@verbatim
extern int *bar(void);
extern int *baz(void);

void foo(int i)
{
    int *p = NULL; /* C1004 */

    if (i < 0) { /* C1002 */
        p = bar();
        if (!p) {
            return;
        }
    }
    else {
        p = baz(); /* C1005 */
    }

    *p += 2; /* W0422 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0421} Value of the dereferencing pointer must be NULL.
@item @ref{W0422} Value of the dereferencing pointer may be NULL.
@item @ref{W0423} Arithmetic operation is being made to the pointer which its value will be NULL.
@item @ref{W0424} Arithmetic operation is being made to the pointer which its value might be NULL.
@end itemize

@subsection Since

3.2.0

@node C1005
@section C1005
@cindex C1005

@subsection Message body

A value possibly be NULL is assigned to the problematic variable.

@subsection Content

This message indicates where the value possibly be NULL was assigned to the
problematic variable in the context of detecting @ref{W0421,W0421},
@ref{W0422,W0422}, @ref{W0423,W0423} and @ref{W0424,W0424} warnings.

@subsection Sample code

@verbatim
extern int *bar(void);
extern int *baz(void);

void foo(int i)
{
    int *p = NULL; /* C1004 */

    if (i < 0) { /* C1002 */
        p = bar();
        if (!p) {
            return;
        }
    }
    else {
        p = baz(); /* C1005 */
    }

    *p += 2; /* W0422 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0421} Value of the dereferencing pointer must be NULL.
@item @ref{W0422} Value of the dereferencing pointer may be NULL.
@item @ref{W0423} Arithmetic operation is being made to the pointer which its value will be NULL.
@item @ref{W0424} Arithmetic operation is being made to the pointer which its value might be NULL.
@end itemize

@subsection Since

3.2.0

@node C1006
@section C1006
@cindex C1006

@subsection Message body

New value is assigned to the problematic variable.

@subsection Content

This message indicates where a value was assigned to the problematic variable
in the context of detecting @ref{W0093,W0093}, @ref{W0096,W0096},
@ref{W0097,W0097}, @ref{W0115,W0115}, @ref{W0116,W0116}, @ref{W0568,W0568},
@ref{W0569,W0569}, @ref{W0570,W0570}, @ref{W0607,W0607}, @ref{W0608,W0608},
@ref{W0705,W0705}, @ref{W0707,W0707}, @ref{W0720,W0720}, @ref{W0745,W0745},
@ref{W1049,W1049} and @ref{W1050,W1050} warnings.

@subsection Sample code

@verbatim
int foo(int i)
{
    int j = 0; /* C1006 */

    if (i < 0) { /* C1002 */
        j = -i;
    }
    else if (i > 0) { /* C1002 */
        j = i;
    }

    return 5 / j; /* W0093 */
}
@end verbatim

@subsection Related message

@itemize
@item @ref{W0093} This expression may cause division-by-zero.
@item @ref{W0096} It divided by a constant expression which definitely zero.
@item @ref{W0097} This expression must cause division-by-zero.
@item @ref{W0115} Unsigned left shift operator `<<' drop the high-order bit.
@item @ref{W0116} Unsigned left shift operator `<<' can be drop high-order bit.
@item @ref{W0568} The result of left shift operation against the signed constant expression value is undefined.
@item @ref{W0569} The result of left shift operation against the signed expression value is undefined.
@item @ref{W0570} This signed left shift operation may make undefined value.
@item @ref{W0607} An integer expression which the value which the value is minus converted to unsigned type.
@item @ref{W0608} An integer expression which the value might be minus converted to unsigned type.
@item @ref{W0705} This non-constant array subscript may cause out-of-range access.
@item @ref{W0707} This constant array subscript must cause out-of-range access.
@item @ref{W0720} The value with floating-point type doesn't fit in the range of converted type.
@item @ref{W0745} This non-constant array subscript may cause out-of-range access.
@item @ref{W1049} The result of conversion to signed integer type in integer expression might not be expressed by a signed type.
@item @ref{W1050} The result of conversion to signed integer type in integer expression is not express by a signed type.
@end itemize

@subsection Since

3.2.0


@node Metrics
@chapter Metrics List

@menu
* FL_STMT::Number of statements
* FL_FUNC::Number of functions
* FN_STMT::Number of statements
* FN_UNRC::Number of unreached statements
* FN_LINE::Number of lines
* FN_PARA::Number of parameters
* FN_UNUV::Number of not use /not reuse variables
* FN_CSUB::Location number of call function
* FN_CALL::Location number of called from function
* FN_GOTO::Number of goto statement
* FN_RETN::Number of return point in a function
* FN_UELS::Number of 'if' statement unless 'else'
* FN_NEST::Maximum number of nest of control flow graph
* FN_PATH::Presumed  number of static path
* FN_CYCM::Cyclomatic complexity
@end menu

@node FL_STMT
@section FL_STMT
@cindex FL_STMT

@subsection Metric name
Number of statements

@subsection Content

The number which it recognized as statements by syntax rule in a file.

@subsection Sample code

@verbatim
int foo(int a)
{
    int i = 0;  /* A declaration is not a statement */

    if (a > 0) {  /* An if-else-statement makes FL_STMT += 1 */
        i = a + 1;  /* An expression-statement makes FL_STMT += 1 */
    }
    else {
        ;  /* An empty expression-statement makes FL_STMT += 1 */
    }

    return i;  /* A jump-statement makes FL_STMT += 1 */
}

/* Now, FL_STMT == 4 */

void bar(int a)
{
    struct {  /* A declaration is not a statement */
        int i;
    } s;

    /* A for-statement which has 2 expression-statements (`s.i=0;' and `s.i<a;') makes FL_STMT += 3 */
    for (s.i = 0; s.i < a; s.i++) {
        switch (s.i % 3) {  /* A switch-statement makes FL_STMT += 1 */
        case 0:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("A\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        case 1:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("B\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        case 2:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("C\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        }
    }
}

/* Finally, FL_STMT == 17 */
@end verbatim

@example
MET,FL_STMT,test.c,17
@end example

@subsection Since

1.0.0

@node FL_FUNC
@section FL_FUNC
@cindex FL_FUNC

@subsection Metric name
Number of functions

@subsection Content

The number of function which defined in a file.

@subsection Sample code

@verbatim
void foo(void) {}  /* A function-definition makes FL_FUNC += 1 */

static void bar(void) {}  /* A function-definition makes FL_FUNC += 1 */

extern void baz(void);  /* A declaration is not a function-definition */

int qux(a, b)  /* An old style function-definition makes FL_FUNC += 1 */
    int a, b;
{
    return a + b;
}

/* FL_FUNC == 3 */
@end verbatim

@example
MET,FL_FUNC,test.c,3
@end example

@subsection Since

1.0.0

@node FN_STMT
@section FN_STMT
@cindex FN_STMT

@subsection Metric name
Number of statements

@subsection Content

The number which it recognized as statements by syntax rule in a function.

@subsection Sample code

@verbatim
int foo(int a)
{
    int i = 0;  /* A declaration is not a statement */

    if (a > 0) {  /* An if-else-statement makes foo's FN_STMT += 1 */
        i = a + 1;  /* An expression-statement makes foo's FN_STMT += 1 */
    }
    else {
        ;  /* An empty expression-statement makes foo's FN_STMT += 1 */
    }

    return i;  /* A jump-statement makes foo's FN_STMT += 1 */

    /* foo's FN_STMT == 4 */
}

void bar(int a)
{
    struct {  /* A declaration is not a statement */
        int i;
    } s;

    /* A for-statement which has 2 expression-statements (`s.i=0;' and * `s.i<a;') makes bar's FN_STMT += 3 */
    for (s.i = 0; s.i < a; s.i++) {
        switch (s.i % 3) {  /* A switch-statement makes bar's FN_STMT += 1 */
        case 0:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("A\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        case 1:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("B\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        case 2:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("C\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        }
    }

    /* bar's FN_STMT == 13 */
}
@end verbatim

@example
MET,FN_STMT,foo,int foo(int),test.c,1,5,4
MET,FN_STMT,bar,void bar(int),test.c,14,6,13
@end example

@subsection Since

1.0.0

@node FN_UNRC
@section FN_UNRC
@cindex FN_UNRC

@subsection Metric name
Number of unreached statements

@subsection Content

The number of statements which it not run in any condition.

@subsection Sample code

@verbatim
#include <stdlib.h>

int foo(int i)
{
    unsigned int ui;

    if (i < 0) {
        switch (i) {
        case -3:
            ui = 0;
            break;
        /* Control never reaches to this "case 3:" clause because "i" is less than 0 at this point */
        case 3:      /* This label is part of an unreachable labeled-statement, but it makes foo's FN_UNRC += 1 */
            ui = 1;  /* An unreachable labeled expression-statement makes FN_UNRC += 1 */
            break;   /* An unreachable jump-statement makes FN_UNRC += 1 */
        default:
            ui = 0;
        }

        /* "ui" is equal to 0 at this point */

        /*
         * The usual-arithmetic-conversion makes "i < ui" into "(unsigned int) i < ui".
         * Then, the value of "i" which is less than 0 will be converted into the new value which is greater than 0
         * because of the wrap-around.
         * So, "(value which is greater than 0) < 0" makes false at all times.
         */
        if (i < ui) {
            exit(0);  /* An unreachable expression-statement makes FN_UNRC += 1 */
        }
    }
    else {
        /* "i" is greater than or equal to 0 at this point */

        abort();  /* The abort() standard function terminates this execution path */
    }

    /* "i" is less than 0 at this point */

    if (i == 3) {   /* "(value which is less than 0) == 3" makes false at all times */
        return -1;  /* An unreachable jump-statement makes FN_UNRC += 1 */
    }

    return 0;

    /* foo's FN_UNRC == 5 */
}
@end verbatim

@example
MET,FN_UNRC,foo,int foo(int),test.c,3,5,5
@end example

@subsection Since

1.0.0

@node FN_LINE
@section FN_LINE
@cindex FN_LINE

@subsection Metric name
Number of lines

@subsection Content

Physical lines from the beginning of a line to the end of a line in a function definition.

@subsection Sample code

@verbatim
int foo(void)  /* foo's function definition starts here */
{
    return 0;
}  /* foo's function definition ends here */

/* foo's FN_LINE == 3 */

int
bar  /* bar's function definition starts here */
(void)
{
    return 0;
}  /* bar's function definition ends here */

/* bar's FN_LINE == 5 */

int
baz  /* baz's old style function definition starts here */
(a)
int a;
{
    return 0;
}  /* baz's old style function definition ends here */

/* baz's FN_LINE == 6 */
@end verbatim

@example
MET,FN_LINE,foo,int foo(void),test.c,1,5,3
MET,FN_LINE,bar,int bar(void),test.c,8,1,5
MET,FN_LINE,baz,int baz(int),test.c,17,1,6
@end example

@subsection Since

1.0.0

@node FN_PARA
@section FN_PARA
@cindex FN_PARA

@subsection Metric name
Number of parameters

@subsection Content

The number of formal arguments in the argument list of function declaration.

@subsection Sample code

@verbatim
int foo(int a, long b, char *p)
{
    return 0;
}
/* foo's FN_PARA == 3 */

int bar(a, b, p)  /* An old style function definition */
    long b;  /* A type-specifier of "a" is omitted */
    char *p;
{
    return 0;
}
/* bar's FN_PARA == 3 */
@end verbatim

@example
MET,FN_PARA,foo,"int foo(int,long,char *)",test.c,1,5,3
MET,FN_PARA,bar,"int bar(int,long,char *)",test.c,6,5,3
@end example

@subsection Since

1.0.0

@node FN_UNUV
@section FN_UNUV
@cindex FN_UNUV

@subsection Metric name

Number of not use /not reuse variables

@subsection Content

The number of not used function and variables which assigned the value.

@subsection Sample code

@verbatim
void foo(int i, int j)  /* A useless declaration of "j" makes FN_UNUV += 1 */
{
    int a;
    int b;
    int c = 0;  /* A useless declaration of "c" makes FN_UNUV += 1 */

    if (i < 0) {
        a = -i;
    }
    else {
        a = i;
    }

    b = a * 2;  /* A useless assignment to "b" makes FN_UNUV += 1 */
    printf("%d\n", a);

    /* foo's FN_UNUV == 3 */
}
@end verbatim

@example
MET,FN_UNUV,foo,"void foo(int,int)",test.c,1,6,3
@end example

@subsection Since

1.0.0

@node FN_CSUB
@section FN_CSUB
@cindex FN_CSUB

@subsection Metric name
Location number of call function

@subsection Content

The number of calling other function in a function,

@subsection Sample code

@verbatim
extern int foo(int);

static int bar(int);

int baz(int i)
{
    int j = foo(i);  /* A function-call-expression makes baz's FN_CSUB += 1 */

    return foo(bar(j)); /* 2 function-call-expressions makes baz's FN_CSUB += 2 */

    /* baz's FN_CSUB == 3 */
}
@end verbatim

@example
MET,FN_CSUB,baz,int baz(int),test.c,5,5,3
@end example

@subsection Since

1.0.0

@node FN_CALL
@section FN_CALL

@subsection Metric name
Location number of called from function

@subsection Content

The number of called from other function of the project.

@subsection Sample code

@file{test1.c}
@verbatim
int foo(int i) { return i + 1; }

int bar(int i)
{
    return foo(i) + 1;  /* A function-call-expression makes foo's FN_CALL += 1 */
}
@end verbatim

@file{test2.c}
@verbatim
extern int bar(int);

static void baz(void)
{
    int i = bar(0);  /* A function-call-expression makes bar's FN_CALL += 1 and foo's FN_CALL += 1 */
}
@end verbatim

@file{project-name.met.csv}
@example
MET,FN_CALL,foo,int foo(int),test1.c,1,5,2
MET,FN_CALL,bar,int bar(int),test1.c,3,5,1
MET,FN_CALL,baz,void baz(void),test2.c,3,13,0
@end example

@subsection Since

1.0.0

@node FN_GOTO
@section FN_GOTO
@cindex FN_GOTO

@subsection Metric name
Number of @code{goto} statement

@subsection Content

The number of @code{goto} statement in a function.

@subsection Sample code

@verbatim
int foo(int i)
{
    switch (i) {
    case 0:
        goto ZERO;  /* A goto-statement makes foo's FN_GOTO += 1 */
    case 1:
        goto ONE;   /* A goto-statement makes foo's FN_GOTO += 1 */
    default:
        return 0;
    }

ZERO:
    return 1;

ONE:
    return 2;

    /* foo's FN_GOTO == 2 */
}
@end verbatim

@example
MET,FN_GOTO,foo,int foo(int),test.c,1,5,2
@end example

@subsection Since

1.0.0

@node FN_RETN
@section FN_RETN
@cindex FN_RETN

@subsection Metric name
Number of return point in a function

@subsection Content

The number of executable return-statements and implicit return-statements
at the end of a function.

@subsection Sample code

@verbatim
void foo(int i)
{
    if (i < 0) {
        return;  /* A return-statement makes foo's FN_RETN += 1 */
    }

    if (i >= 10) {
        return;  /* A return-statement makes foo's FN_RETN += 1 */
    }
    else {
        for (; i < 10; i++) {
          printf("%d\n", i);
        }
    }

    /* An implicit return from the function whose return type is void makes foo's FN_RETN * += 1 */

    /* foo's FN_RETN == 3 */
}

int bar(int i)
{
    if (i < 0) {
        return -1;  /* A return-statement makes bar's FN_RETN += 1 */
    }

    if (i >= 10) {
        return -1;  /* A return-statement makes bar's FN_RETN += 1 */
    }
    else {
        for (; i < 10; i++) {
          printf("%d\n", i);
        }
    }

    return 0;  /* A return-statement makes bar's FN_RETN += 1 */

    /* bar's FN_RETN == 3 */
}
@end verbatim

@example
MET,FN_RETN,foo,void foo(int),test.c,1,6,3
MET,FN_RETN,bar,int bar(int),test.c,20,5,3
@end example

@subsection Since

1.0.0

@node FN_UELS
@section FN_UELS
@cindex FN_UELS

@subsection Metric name
Number of if-statement without else-clause

@subsection Content

The number of if-statements which have no explicit else-clause.

@subsection Sample code

@verbatim
int foo(int i)
{
    int j;

    if (i < 0) {
        return -1;
    }
    else {
        j = i + 1;
    }

    if (j % 2) {
        return -1;
    }
    /* A standalone if-statement does nothing to the FN_UELS metric */

    if (i == 2) {
        return 0;
    }
    else if (i == 4) {
        return 1;
    }
    /* An implicit else clause makes foo's FN_UELS += 1 */

    return 5;

    /* foo's FN_UELS == 1 */
}
@end verbatim

@example
MET,FN_UELS,foo,int foo(int),test.c,1,5,1
@end example

@subsection Since

1.0.0

@node FN_NEST
@section FN_NEST
@cindex FN_NEST

@subsection Metric name
Maximum number of nest of control flow graph

@subsection Content

The deepest nesting of control structure in a function.

@subsection Sample code

@verbatim
void foo(int i)
{
    /* Nesting level == 0 */

    if (i < 0) {
        /* Nesting level == 1 */

        switch (i) {
            /* Nesting level == 2 */
        case -1:
            return;
        case -2:
            puts("A\n");
            break;
        }

        /* Nesting level == 1 */
    }
    else {
        /* Nesting level == 1 */
        int j;
        int k;

        for (j = 0; j < i; j++) {
            /* Nesting level == 2 */

            for (k = 0; k < 10; k++) {
                /* Nesting level == 3 */

                if (j == k) {
                    /* Nesting level == 4 */
                    puts("B\n");
                }
            }
        }
    }

    /* foo's FN_NEST == 4 */
}
@end verbatim

@example
MET,FN_NEST,foo,void foo(int),test.c,1,6,4
@end example

@subsection Since

1.0.0

@node FN_PATH
@section FN_PATH
@cindex FN_PATH

@subsection Metric name
Presumed  number of static path

@subsection Content

The number of possible execute paths in a function.

@subsection Sample code

@verbatim
static int foo(int i)
{
    /* A */
    if (i == 0) {
        /* B */
        i = 0;
    }
    else {
        /* C */
        i = 1;
    }
    /* D */
    return i;

    /* Possible execute paths A->B->D and A->C->D makes foo's FN_PATH = 2 */
}

static int bar(int i)
{
    /* A */
    if (i == 0) {
        /* B */
        i = 0;
    }
    /* C */
    if (i == 1) {
        /* D */
        i = 1;
    }
    /* E */
    if (i == 2) {
        /* F */
        i = 2;
    }
    /* G */
    return i;

    /* Possible execute paths
         A->B->C->D->E->F->G,
         A->B->C->D->E->G,
         A->B->C->E->F->G,
         A->B->C->E->G,
         A->C->D->E->F->G,
         A->C->D->E->G,
         A->C->E->F->G,
         A->C->E->G
       makes bar's FN_PATH = 8 */
}

static int baz(int i)
{
    /* A */
    switch (i) {
    case 0:
        /* B */
        if (rand()) {
            /* C */
            i = 0;
        }
        else {
            /* D */
            i = 0;
        }
        /* E */
        i = 0;
        break;
    default:
        /* F */
        if (rand()) {
            /* G */
            i = 1;
        }
        else {
            /* H */
            i = 1;
        }
        /* I */
        i = 1;
        break;
    }
    /* J */
    return i;

    /* Possible execute paths
         A->B->C->E->J,
         A->B->D->E->J,
         A->F->G->I->J,
         A->F->H->I->J
       makes baz's FN_PATH = 4 */
}

static int qux(int i)
{
    /* A */
    while (i < 5) {
        /* B */
        if (i == 0) {
            /* C */
            return 0;
        }
        /* D */
        if (i == 1) {
            /* E */
            return 1;
        }
    }
    /* F */
    if (i == 2) {
        /* G */
        return 2;
    }
    /* H */
    return 3;

    /* Possible execute paths
         A->B->C,
         A->B->D->E,
         A->B->D->F->G,
         A->B->D->F->H,
         A->F->G,
         A->F->H
       makes qux's FN_PATH = 6 */
}
@end verbatim

@example
MET,FN_PATH,foo,int foo(int),test.c,1,12,2
MET,FN_PATH,bar,int bar(int),test.c,18,12,8
MET,FN_PATH,baz,int baz(int),test.c,42,12,4
MET,FN_PATH,qux,int qux(int),test.c,80,12,6
@end example

@subsection Since

1.0.0

@node FN_CYCM
@section FN_CYCM
@cindex FN_CYCM

@subsection Metric name
Cyclomatic complexity

@subsection Content

The number of linearly independent paths through a program's source code.
It was developed by McCabe.

@*
calculating formula is
@verb{.(the number of edges of the graph) - (the number of nodes of the graph) + 2.}.
It equals the number of branch in a function + 1.

@subsection Sample code

@verbatim
static int foo(int i)
{
    if (i == 0) {  /* Complexity += 1 */
        i = 0;
    }
    else {  /* An else branch does not grow the complexity */
        i = 1;
    }
    return i;

    /* foo's FN_CYCM == 2 */
}

static int bar(int i)
{
    if (i == 0) {  /* Complexity += 1 */
        i = 0;
    }
    if (i == 1) {  /* Complexity += 1 */
        i = 1;
    }
    if (i == 2) {  /* Complexity += 1 */
        i = 2;
    }
    return i;

    /* bar's FN_CYCM == 4 */
}

static int baz(int i)
{
    switch (i) {
    case 0:  /* Complexity += 1 */
        if (rand()) {  /* Complexity += 1 */
            i = 0;
        }
        else {  /* An else branch does not grow the complexity */
            i = 0;
        }
        i = 0;
        break;
    default:  /* A default clause does not grow the complexity */
        if (rand()) {  /* Complexity += 1 */
            i = 1;
        }
        else {  /* An else branch does not grow the complexity */
            i = 1;
        }
        i = 1;
        break;
    }
    return i;

    /* baz's FN_CYCM == 4 */
}

static int qux(int i)
{
    while (i < 5) {  /* An iteration does not grow the complexity */
        if (i == 0) {  /* Complexity += 1 */
            return 0;
        }
        if (i == 1) {  /* Complexity += 1 */
            return 1;
        }
    }
    if (i == 2) {  /* Complexity += 1 */
        return 2;
    }
    return 3;

    /* qux's FN_CYCM == 4 */
}
@end verbatim

@example
MET,FN_CYCM,foo,int foo(int),test.c,1,12,2
MET,FN_CYCM,bar,int bar(int),test.c,13,12,4
MET,FN_CYCM,baz,int baz(int),test.c,28,12,4
MET,FN_CYCM,qux,int qux(int),test.c,54,12,4
@end example


@subsection Since

1.0.0

@node CodeStructures
@chapter Code structure list
@menu
* VER::Version records
* DCL(T)::Type declaration records
* DCL(V)::Global variable declaration records
* DCL(F)::Function declaration records
* DEF(V)::Variable definition records
* DEF(F)::Function definition records
* DEF(M)::Macro definition records
* DEF(L)::Label definition records
* INI::Initialize records
* ASN::Assignment records
* DEP(I)::Include records
* DEP(C)::Caller records
* DEP(X)::Dependency records
* LIT::Literal records
* PRE::Preprocess records
@end menu

@node VER
@section VER
@cindex VER

@subsection Code structure information name
Version Records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Ver_Sample,output example of Version Records.}

@subsection Since

1.0.0

@node DCL(T)
@section DCL(T)
@cindex DCL(T)

@subsection Code structure information name
Type declaration records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dcl_Sample,output example of Type declaration records}.

@subsection Since

1.0.0

@node DCL(V)
@section DCL(V)
@cindex DCL(V)

@subsection Code structure information name
Variable declaration records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dcl_Sample,output example of Variable declaration records}.

@subsection Since

1.0.0

@node DCL(F)
@section DCL(F)
@cindex DCL(F)

@subsection Code structure information name
Function declaration records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dcl_Sample,output example of Function declaration records}.

@subsection Since

1.0.0

@node DEF(V)
@section DEF(V)
@cindex DEF(V)

@subsection Code structure information name
Variable definition records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Def_Sample,output example of Variable definition records}.

@subsection Since

1.0.0

@node DEF(F)
@section DEF(F)
@cindex DEF(F)

@subsection Code structure information name
Function definition records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Def_Sample,output example of Function definition records}.

@subsection Since

1.0.0

@node DEF(M)
@section DEF(M)
@cindex DEF(M)

@subsection Code structure information name
Macro definition records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Def_Sample,Macro definition records}.

@subsection Since

1.0.0

@node DEF(L)
@section DEF(L)
@cindex DEF(L)

@subsection Code structure information name
Label definition records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Def_Sample,output example of Lael definition records}.

@subsection Since

1.0.0

@node INI
@section INI
@cindex INI

@subsection Code structure information name
Initialize records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Ini_Sample,output example of  Initialize records}.

@subsection Since

1.0.0

@node ASN
@section ASN
@cindex ASN

@subsection Code structure information name
Assignment records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Asn_Sample,output example of Assignment records}.

@subsection Since

1.0.0

@node DEP(I)
@section DEP(I)
@cindex DEP(I)

@subsection Code structure information name
Include record

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dep_Sample,output example of include records}.

@subsection Since

1.0.0

@node DEP(C)
@section DEP(C)
@cindex DEP(C)

@subsection Code structure information name
Caller function records

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dep_Sample, output example of caller records}.

@subsection Since

1.0.0

@node DEP(X)
@section DEP(X)
@cindex DEP(X)

@subsection Code structure information name
...

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Dep_Sample,output example of Dependency records}.

@subsection Since

1.0.0

@node LIT
@section LIT
@cindex LIT

@subsection Code structure information name
...

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Lit_Sample, output example of Literal records}.

@subsection Since

1.0.0

@node PRE
@section PRE
@cindex PRE

@subsection Code structure information name
...

@subsection Content
Under construction.

@subsection Sample code
Refer to @ref{Output_Metrics_Pre_Sample, output example of preprocessed records}.


@subsection Since

1.0.0

@node Appendix
@appendix Appendix

@anchor{Screen Shot}
@section Screen shot

@subsection Collaboration with Adqua

Static analysis result of AdLint can use measure the source quality by processing @uref{http://www.ogis-ri.co.jp/product/b-08-000001A6.html, Adqua}.
(Adqua supports only Japanese)

@image{adlint_on_adqua,,,,png}

@subsection Collaboration with Vim - text editor
Adlint p

The format of AdLint's warning message is same as the standard compiler, so it's easy to collaborate with text editor.
It will be able to check easily the code quality during development.

@image{adlint_on_vim_en,,,,png}

@subsection Collaborate with Eclipse - integrated development environment
The format of AdLint's warning message is same as the standard compiler, so it's easy to collaborate with integrated development environment.
It will be able to check easily the code quality during development.

@image{adlint_on_eclipse_en,,,,png}

@anchor{Traits Sample}
@section Sample of traits file
@verbatiminclude samples/adlint_traits.yml

@anchor{GNUmakefile Sample}
@section Sample of analysis order of @file{GNUmakefile}
@verbatiminclude samples/GNUmakefile

@node Index
@unnumbered Index
@printindex cp

@bye

@c vim:sw=2:sts=2:et:tw=79:fo+=mM:
