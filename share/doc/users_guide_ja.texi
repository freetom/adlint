\input texinfo
@setfilename users_guide_ja.info
@documentlanguage ja
@documentencoding utf-8
@settitle AdLint 3.2.12 利用者ガイド

@copying
Copyright (C) 2010-2014, OGIS-RI Co.,Ltd.
@end copying

@titlepage
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top 導入
@end ifnottex

@unnumberedsec AdLint とは

AdLint は、オープンソースのソースコード静的解析ツールです。

AdLint は、ソースコード中の安全性や移植性に欠ける部分について警告メッセージを出
力し、また、同時にさまざまな品質メトリクスを測定することができます。

活用事例の一部は、付録の@ref{Screen Shot, スクリーンショット}でご確認いただけま
す。

AdLint は、(現時点では) ANSI C89 / ISO C90 / 一部 ISO C99 規格に準拠した C 言語
のソースコードを解析することができます。

AdLint は @uref{http://www.ruby-lang.org/, Ruby} で実装されているため、Windows、
Mac OS X、GNU/Linux、FreeBSD など Ruby がサポートする全てのプラットフォームで利
用することができます。

@unnumberedsec ライセンス
Copyright (C) 2010-2014, OGIS-RI Co.,Ltd.

AdLint is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AdLint is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with AdLint.  If not, see <@uref{http://www.gnu.org/licenses/}>.

@unnumberedsec 目次
@menu
* インストール:Installation.
* サンプルセッション:Sample Session.
* コマンド仕様:Command.
* 入力仕様:Input.
* 出力仕様:Output.
* メッセージ一覧:Messages.
* メトリクス一覧:Metrics.
* コード情報一覧:CodeStructures.
* 付録:Appendix.
* 索引:Index.
@end menu


@node Installation
@chapter インストール

@menu
* 動作要件:Requirements.
* ハードウェア環境:Hardware Environment.
* MS Windows 環境へのインストール手順:Install On Windows.
* Unix 環境へのインストール手順:Install On Unix.
* 動作テストと AdLint の試用:Evaluation.
@end menu

@node Requirements
@section 動作要件

AdLint の使用には、Ruby バージョン 1.9.3-p0 以降のインストールが必要です。

また、@ref{AdLintize Command, @command{adlintize}} コマンドによって作成する解析
自動化 @file{GNUmakefile} を使用するために、GNU Make バージョン 3 以降のインス
トールをお勧めします。


@node Hardware Environment
@section ハードウェア環境

推奨ハードウェア環境は、解析対象ソフトウェアの規模により一概には規定できません
が、参考情報として AdLint のテスト環境と実際に計測した解析時間を紹介します。

@subsection MS Windows

MS Windows XP (SP3) 上でのテストは Intel Core i5 3.33GHz (660)、物理メモリ 2 GB
の環境で行っています。

この環境で Ruby 1.9.3-p0 (ビルド対象の総物理行数 62 万行) を解析した場合、下記
の解析時間を要しました。

@itemize
@item すべてシリアルに解析 --- 約 7.9 時間
@item シングルモジュール解析を 3 並走させて解析 --- 約 3.7 時間
@end itemize

@subsection GNU/Linux

Fedora 14 上でのテストは Intel Core2 Duo 2.20GHz (E4500)、物理メモリ 3.4 GB の
環境で行っています。

この環境で Ruby 1.9.3-p0 (ビルド対象の総物理行数 62 万行) を解析した場合、下記
の解析時間を要しました。

@itemize
@item すべてシリアルに解析 --- 約 6.5 時間
@item シングルモジュール解析を 2 並走させて解析 --- 約 4.2 時間
@end itemize


@node Install On Windows
@section MS Windows 環境へのインストール手順

@anchor{install_rubyinstaller}
@subsection Ruby のインストール

@uref{http://rubyinstaller.org/, RubyInstaller for Windows} の
@uref{http://rubyinstaller.org/downloads/, ダウンロードページ}から 1.9.3-p0 以
降のバージョンの RubyInstaller を入手します。

RubyInstaller を実行し、インストーラの指示に従い Ruby をインストールします。

@anchor{install_devkit}
@subsection DEVELOPMENT KIT (DevKit) のインストール

@uref{http://www.gnu.org/software/make/make.html, GNU Make} を含む DEVELOPMENT
KIT (DevKit) のインストールを推奨します。

@uref{http://rubyinstaller.org/, RubyInstaller for Windows} で配布されている
DEVELOPMENT KIT (DevKit) を@uref{http://rubyinstaller.org/downloads/, ダウンロ
ードページ}から入手します。

@file{DevKit-*.exe} を実行すると、DEVELOPMENT KIT が指定したディレクトリに展開
されます。

@subsection @code{PATH} 環境変数の設定

@ref{install_rubyinstaller, Ruby のインストール} でインストールした Ruby ディレ
クトリ中の @file{bin}、@ref{install_devkit, DEVELOPMENT KIT (DevKit) のインスト
ール} で展開した DevKit ディレクトリ中の @file{bin}、@file{mingw\bin} を
@code{PATH} 環境変数に追加してください。

@subsection AdLint のインストール

コマンドプロンプトを起動し、下記のコマンドにより AdLint の最新バージョンをダウ
ンロードしインストールします。

@verbatim
> gem install adlint --no-rdoc --no-ri
@end verbatim

HTTP プロキシを使用する場合は、下記のように @command{gem} コマンドに
@option{--http-proxy http://ユーザ:パスワード@@プロキシホスト:ポート番号} を指
定します。

@verbatim
> gem install adlint --no-rdoc --no-ri --http-proxy http://user:passwd@proxy:3128
@end verbatim

@node Install On Unix
@section Unix 環境へのインストール手順

@uref{http://pub.cozmixng.org/~the-rwiki/rw-cgi.rb?cmd=view;name=Ruby+Install+Guide,
Ruby インストールガイド} に従い、Ruby インタプリタをインストールします。

その後、下記のコマンドにより AdLint の最新バージョンをダウンロードしインストー
ルします。
@verbatim
% gem install adlint
@end verbatim
または、
@verbatim
% sudo gem install adlint
@end verbatim

HTTP プロキシを使用する場合は、@command{gem} コマンドに @option{--http-proxy
http://ユーザ:パスワード@@プロキシホスト:ポート番号} を指定します。

@node Evaluation
@section 動作テストと AdLint の試用

AdLint には小さなサンプルの C 言語プロジェクトが付属しています。
下記の手順で、@code{intro_demo} プロジェクトを用いて AdLint の動作テストを行っ
てください。

@code{intro_demo} プロジェクトをユーザのワークスペースへコピーします。
@verbatim
% cp -r `adlint --prefix`/share/demo/intro_demo .
@end verbatim

@ref{AdLintize Command, @command{adlintize}} コマンドにより、静的解析のための設
定ファイルを生成します。
@verbatim
% cd intro_demo
% adlintize
@end verbatim

下記のファイルが出力されます。

@itemize
@item @file{GNUmakefile} --- 解析手順が記述された GNU Make 用のメイクファイル
@item @file{adlint_traits.yml} --- AdLint 解析動作をカスタマイズする特性ファイ
ル
@item @file{adlint_pinit.h} --- プロジェクト固有のイニシャルヘッダファイル
@item @file{adlint_cinit.h} --- コンパイラ固有のイニシャルヘッダファイル
@item @file{adlint_all.sh} --- 解析手順が記述されたシェルスクリプト
@item @file{adlint_all.bat} --- 解析手順が記述された MS Windows 用バッチファイ
ル
@item @file{adlint_files.txt} --- シェルスクリプトとバッチファイルで使用する解
析対象ファイルのリスト
@end itemize

GNU Make バージョン 3 以降がインストール済みの場合、下記のコマンドにより解析す
ることができます。
@verbatim
% make verbose-all
adlint --verbose -t adlint_traits.yml -o . intro_demo.c
                  intro_demo.c [fin] |============================| 0.401s
                    intro_demo [fin] |============================| 0.029s
  1.125s user, 0.765s system, 00:00:01.89 total
@end verbatim

GNU Make をインストールしていない場合は、下記のように直接 @ref{AdLint Command,
@command{adlint}} コマンドを使用してください。
@verbatim
% adlint -v -t adlint_traits.yml -l adlint_files.txt
                  intro_demo.c [fin] |============================| 0.401s
                    intro_demo [fin] |============================| 0.029s
  1.125s user, 0.765s system, 00:00:01.89 total
@end verbatim

解析処理が正常に終了すると、下記のファイルが出力されます。

@itemize
@item @file{intro_demo.i} --- プリプロセス済みソースファイル
@item @file{intro_demo.c.met.csv} --- シングルモジュール解析結果のコード情報と
メトリクス情報
@item @file{intro_demo.c.msg.csv} --- シングルモジュール解析結果の警告メッセー
ジ
@item @file{intro_demo.met.csv} --- クロスモジュール解析結果のメトリクス情報
@item @file{intro_demo.msg.csv} --- クロスモジュール解析結果の警告メッセージ
@end itemize

@file{intro_demo.c.msg.csv} の内容は、「いくつかの文に制御が到達しないこと」と
「いくつかの文でゼロによる除算が発生すること」などを示しているはずです。


@node Sample Session
@chapter サンプルセッション

@menu
* GNU Screen の解析:Analyzing Screen.
* distmake を用いた高速な分散並列解析:Dist Analyzing Screen.
@end menu

@node Analyzing Screen
@section GNU Screen の解析

@subsection プロジェクトの準備
@uref{ftp://ftp.gnu.org/gnu/screen/screen-4.0.3.tar.gz} をダウンロードし、適当
なディレクトリに展開します。
@verbatim
% wget ftp://ftp.gnu.org/gnu/screen/screen-4.0.3.tar.gz
Length: 840602 (821K) [application/x-tar]
Saving to: `screen-4.0.3.tar.gz'

100%[======================================>] 840,602     --.-K/s   in 0.1s

2011-09-28 11:41:55 (6.18 MB/s) - `screen-4.0.3.tar.gz' saved [840602/840602]

% tar xzf screen-4.0.3.tar.gz
% ls -F
screen-4.0.3/   screen-4.0.3.tar.gz
@end verbatim

@anchor{screen_exam}
@subsection プロジェクトの調査
GNU Screen を実際にビルドすることで、解析を実行する環境でどのようにビルドされる
かを確認します。
@verbatim
% cd screen-4.0.3
% ./configure
this is screen version 4.0.3
checking for prefix by checking for screen... /usr/bin/screen
checking for gcc... gcc
checking for C compiler default output... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
...snip...
configure: creating ./config.status
config.status: creating Makefile
config.status: creating doc/Makefile
config.status: creating config.h
config.status: executing default commands

Now please check the pathnames in the Makefile and in the user
configuration section in config.h.
Then type 'make' to make screen. Good luck.

% make 2>&1 | tee make.log
CPP="gcc -E " srcdir=. sh ./osdef.sh
AWK=gawk CC="gcc -g -O2" srcdir=. sh ./comm.sh
AWK=gawk srcdir=. sh ./term.sh
gcc -c -I. -I.    -g -O2 screen.c
gcc -c -I. -I.    -g -O2 ansi.c
gcc -c -I. -I.    -g -O2 fileio.c
gcc -c -I. -I.    -g -O2 mark.c
gcc -c -I. -I.    -g -O2 misc.c
gcc -c -I. -I.    -g -O2 resize.c
gcc -c -I. -I.    -g -O2 socket.c
gcc -c -I. -I.    -g -O2 search.c
sh ./tty.sh tty.c
gcc -c -I. -I.    -g -O2 tty.c
gcc -c -I. -I.    -g -O2 term.c
gcc -c -I. -I.    -g -O2 window.c
gcc -c -I. -I.    -g -O2 utmp.c
gcc -c -I. -I.    -g -O2 loadav.c
gcc -c -I. -I.    -g -O2 putenv.c
gcc -c -I. -I.    -g -O2 help.c
gcc -c -I. -I.    -g -O2 termcap.c
gcc -c -I. -I.    -g -O2 input.c
gcc -c -I. -I.    -g -O2 attacher.c
gcc -c -I. -I.    -g -O2 pty.c
gcc -c -I. -I.    -g -O2 process.c
gcc -c -I. -I.    -g -O2 display.c
gcc -c -I. -I.    -g -O2 comm.c
gcc -c -I. -I.    -g -O2 kmapdef.c
gcc -c -I. -I.    -g -O2 acls.c
gcc -c -I. -I.    -g -O2 braille.c
gcc -c -I. -I.    -g -O2 braille_tsi.c
gcc -c -I. -I.    -g -O2 logfile.c
gcc -c -I. -I.    -g -O2 layer.c
gcc -c -I. -I.    -g -O2 sched.c
gcc -c -I. -I.    -g -O2 teln.c
gcc -c -I. -I.    -g -O2 nethack.c
gcc -c -I. -I.    -g -O2 encoding.c
gcc  -o screen screen.o ansi.o fileio.o mark.o misc.o resize.o socket.o
search.o tty.o term.o window.o utmp.o loadav.o putenv.o help.o termcap.o
input.o attacher.o pty.o process.o display.o comm.o kmapdef.o acls.o braille.o
braille_tsi.o logfile.o layer.o sched.o teln.o nethack.o encoding.o -lcurses
-lcrypt
@end verbatim

@anchor{screen_prepare}
@subsection 静的解析の準備
@ref{AdLintize Command, @command{adlintize}} コマンドを使い、静的解析に必要なフ
ァイルの雛形を作成し、対象プロジェクトに応じて設定ファイルを編集します。


プロジェクトのビルドに使用したコンピュータ環境、コンパイラ環境を調査します。
@verbatim
% uname -mo
i686 GNU/Linux
% gcc --version
gcc (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
@end verbatim

@ref{AdLintize Command, @command{adlintize}} コマンドがサポートするプリセットの
ビルド環境を表示し、プロジェクトのビルド環境に近いものを選択します。
このセッションでは i686 アーキテクチャ上の GNU/Linux で GCC 4.5.1 を使用してい
るので、@code{i686-linux-gcc_4.5.1} を選択することになります。
@verbatim
% adlintize -L
i686-linux-gcc_4.5.1
i686-cygwin-gcc_4.3.4
i686-mingw-gcc_4.5.2
x86_64-ubuntu_12.04-gcc_4.6.3
@end verbatim

@ref{AdLintize Command, @command{adlintize}} コマンドで静的解析に必要なファイル
の雛形を生成します。
@verbatim
% adlintize -e i686-linux-gcc_4.5.1 -o adlint
% cd adlint
% ls
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

@ref{screen_exam, プロジェクトの調査}で作成した @file{make.log} ファイルと
@ref{AdLintize Command, @command{adlintize}} コマンドが生成した
@file{GNUmakefile} 中の @code{SOURCES} 値を比較して、静的解析の対象ソースファイ
ルの過不足を修正します。
@verbatim
% cp GNUmakefile GNUmakefile.orig
% vi GNUmakefile
% diff -u GNUmakefile.orig GNUmakefile
--- GNUmakefile.orig    2011-09-28 13:36:24.328078206 +0900
+++ GNUmakefile 2011-09-28 13:36:37.573902006 +0900
@@ -29,8 +29,6 @@
   putenv.c \
   fileio.c \
   kmapdef.c \
-  terminfo/checktc.c \
-  terminfo/tetris.c \
   search.c \
   input.c \
   ansi.c \
@end verbatim

次に、@ref{screen_exam, プロジェクトの調査}で作成した @file{make.log} ファイル
中でコンパイラに指定されたオプションから、プロジェクト固有のインクルードパスを
洗い出し @file{adlint_traits.yml} ファイルに追記します。
@verbatim
% cp adlint_traits.yml adlint_traits.yml.orig
% vi adlint_traits.yml
% diff -u adlint_traits.yml.orig adlint_traits.yml
--- adlint_traits.yml.orig      2011-09-28 13:40:10.748222288 +0900
+++ adlint_traits.yml   2011-09-28 13:40:24.105054386 +0900
@@ -25,6 +25,7 @@
   #     - "../include/bar"
   #     - "/opt/baz/include"
   include_path:
+    - ".."

   # Pathname of the project specific initial header file.
   # This header file is automatically included above the first line of the
@end verbatim

@subsection 静的解析の実行

@ref{screen_prepare, 静的解析の準備}で作成した @file{GNUmakefile} を使い、静的
解析を実行します。
@verbatim
% make --version
GNU Make 3.82
Built for i386-redhat-linux-gnu
Copyright (C) 2010  Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

% make verbose-all
adlint --verbose -t adlint_traits.yml -o . ../braille.c ../acls.c ../putenv.c
../fileio.c ../kmapdef.c ../search.c ../input.c ../ansi.c ../pty.c ../layer.c
../termcap.c ../loadav.c ../comm.c ../screen.c ../term.c ../teln.c ../socket.c
../encoding.c ../utmp.c ../logfile.c ../display.c ../misc.c ../attacher.c
../help.c ../tty.c ../nethack.c ../braille_tsi.c ../sched.c ../process.c
../window.c ../mark.c ../resize.c
                  ../braille.c [fin] |============================| 7.999s
                     ../acls.c [fin] |============================| 12.152s
                   ../putenv.c [fin] |============================| 0.203s
                   ../fileio.c [fin] |============================| 13.013s
...snip...
                   ../window.c [fin] |============================| 22.388s
                     ../mark.c [fin] |============================| 14.827s
                   ../resize.c [fin] |============================| 18.964s
                  screen-4.0.3 [fin] |============================| 58.346s
  771.510s user, 2.370s system, 00:12:53.87 total

% ls *.{i,msg.csv,met.csv,log}
acls.c.log             kmapdef.c.log      sched.c.log
acls.c.met.csv         kmapdef.c.met.csv  sched.c.met.csv
acls.c.msg.csv         kmapdef.c.msg.csv  sched.c.msg.csv
acls.i                 kmapdef.i          sched.i
ansi.c.log             layer.c.log        screen-4.0.3.log
ansi.c.met.csv         layer.c.met.csv    screen-4.0.3.met.csv
ansi.c.msg.csv         layer.c.msg.csv    screen-4.0.3.msg.csv
...snip...
input.c.log            resize.c.log       window.c.met.csv
input.c.met.csv        resize.c.met.csv   window.c.msg.csv
input.c.msg.csv        resize.c.msg.csv   window.i
input.i                resize.i
@end verbatim


@node Dist Analyzing Screen
@section distmake を用いた高速な分散並列解析

追記予定。


@node Command
@chapter コマンド仕様

@menu
* @command{adlintize} コマンド:AdLintize Command.
* @command{adlint} コマンド:AdLint Command.
* @command{adlint_sma} コマンド:AdLint SMA Command.
* @command{adlint_cma} コマンド:AdLint CMA Command.
* @command{adlint_chk} コマンド:AdLint CHK Command.
@end menu

@node AdLintize Command
@section @command{adlintize} コマンド
@cindex adlintize

@subsection 機能

AdLint による静的解析に必要な下記ファイルの雛形を作成します。

@itemize
@item @file{GNUmakefile} --- 解析手順が記述された GNU Make 用のメイクファイル
@item @file{adlint_traits.yml} --- AdLint 解析動作をカスタマイズする特性ファイ
ル
@item @file{adlint_pinit.h} --- プロジェクト固有のイニシャルヘッダファイル
@item @file{adlint_cinit.h} --- コンパイラ固有のイニシャルヘッダファイル
@item @file{adlint_all.sh} --- 解析手順が記述されたシェルスクリプト
@item @file{adlint_all.bat} --- 解析手順が記述された MS Windows 用バッチファイ
ル
@item @file{adlint_files.txt} --- シェルスクリプトとバッチファイルで使用する解
析対象ファイルのリスト
@end itemize

@file{GNUmakefile} 中の @code{SOURCES} 変数には、@command{adlintize} コマンドを
実行したディレクトリ配下にある全ての @file{*.c} ファイルが設定されます。

@subsection 使用方法

解析対象プロジェクトのルートディレクトリで、下記のように @command{adlintize} コ
マンドを実行すると、@file{adlint} ディレクトリ中に静的解析に必要なファイルを作
成します。

@verbatim
% cd project-root
% adlintize -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

@command{adlintize} コマンドには、プリセットのビルド環境がいくつか用意されてい
ます。
プリセットのビルド環境を指定することで、設定ファイルの雛形により多くの情報を自
動生成することができます。

用意されているプリセットのビルド環境は、下記のコマンドにより一覧を確認すること
ができます。

@verbatim
% adlintize -L
i686-linux-gcc_4.5.1
i686-cygwin-gcc_4.3.4
i686-mingw-gcc_4.5.2
x86_64-ubuntu_12.04-gcc_4.6.3
@end verbatim

プリセットのビルド環境は、@option{-e} オプションで指定します。

@verbatim
% cd project-root
% adlintize -e i686-linux-gcc_4.5.1 -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

@subsection ヘルプメッセージ
@verbatim
Usage: adlintize [options] [project-name]
Options:
  -t FILE, --traits FILE         Write traits to FILE
                                 If omitted, `adlint_traits.yml' will be used
  -p FILE, --pinit-header FILE   Write project initial header to FILE
                                 If omitted, `adlint_pinit.h' will be used
  -c FILE, --cinit-header FILE   Write compiler initial header to FILE
                                 If omitted, `adlint_cinit.h' will be used
  -l FILE, --list-file FILE      Write list file to FILE
                                 If omitted, `adlint_files.txt' will be used
  -m FILE, --makefile FILE       Write analysis procedure GNUmakefile to FILE
                                 If omitted, `GNUmakefile' will be used
  -s FILE, --sh-script FILE      Write analysis procedure sh script to FILE
                                 If omitted, `adlint_all.sh' will be used
  -b FILE, --bat-file FILE       Write analysis procedure bat file to FILE
                                 If omitted, `adlint_all.bat' will be used
  -o DIR, --output-dir DIR       Set output directory
                                 If omitted, `.' will be used
  -e ENV, --environment ENV      Assume ENV as target build environment
  -L, --list-environment         List all preset build environments
  -f, --force                    Force to overwrite existing files
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint Command
@section @command{adlint} コマンド
@cindex adlint

@subsection 機能

一括でシングルモジュール解析 (コンパイルフェーズに対応する解析) とクロスモジュ
ール解析 (リンクフェーズに対応する解析) を実行します。

解析対象のソースファイルをコマンドラインで指定する方法と、リストファイルにより
指定する方法をサポートします。

動作内容は、解析対象のソースファイルを全て指定して @ref{AdLint SMA Command,
@command{adlint_sma}} コマンドによりシングルモジュール解析を実行し、
@ref{AdLint CMA Command, @command{adlint_cma}} コマンドによりクロスモジュール解
析を実行する場合と同等です。

シングルモジュール解析結果として、ソースファイル毎に下記のファイルを作成します
。

@itemize
@item @file{*.i} --- プリプロセス結果
@item @file{*.c.msg.csv} --- シングルモジュール解析によるメッセージ出力結果
@item @file{*.c.met.csv} --- シングルモジュール解析によるメトリクス測定結果
@item @file{*.c.log} --- シングルモジュール解析時のログメッセージ
@end itemize

クロスモジュール解析結果として、下記のファイルを作成します。

@itemize
@item @file{project_name.msg.csv} --- プロジェクト全体のクロスモジュール解析に
よるメッセージ出力結果
@item @file{project_name.met.csv} --- プロジェクト全体のクロスモジュール解析に
よるメトリクス測定結果
@item @file{project_name.log} --- プロジェクト全体のクロスモジュール解析時のロ
グメッセージ
@end itemize

@subsection 使用方法

@ref{AdLintize Command, @command{adlintize}} コマンドにより設定ファイルの雛形を
作成したディレクトリで、下記のように @command{adlint} コマンドを起動するとシン
グルモジュール解析とクロスモジュール解析を一括で実行可能です。

@verbatim
% cd project-root
% adlintize -o adlint
% cd adlint
% adlint -v -t adlint_traits.yml -o . -p 1 -l adlint_files.txt
               ../intro_demo.c [fin] |============================| 0.134s
                    intro_demo [fin] |============================| 0.012s
  0.718s user, 0.500s system, 00:00:01.21 total
@end verbatim

テキストエディタや統合開発環境などと連携する場合、下記のように
@option{-v,--verbose} オプションを指定しないことで、進捗表示を行わずメッセージ
を stderr に出力することができます。

@verbatim
% adlint -t adlint_traits.yml -o . -p 1 -l adlint_files.txt
../intro_demo.c:6:9:warning:c_builtin:W0492:UNC:X99:同じ識別子名 `i' が構造体/共用体のメンバの他に、ラベル、タグ、または通常の識別子としても使われています。
../intro_demo.c:12:13:warning:c_builtin:W0027:UNC:X99:ポインタ型の変数に対して比較演算が行われています。
../intro_demo.c:16:14:warning:c_builtin:W0422:UNC:X99:値が NULL になることがあるポインタに対して間接参照が行われています。
../intro_demo.c:31:13:warning:c_builtin:W0613:UNC:X99:この制御式の値は常に偽になります。
...snip...
../intro_demo.c:55:9:warning:c_builtin:W9001:UNC:X99:この文には制御が到達しません。
../intro_demo.c:2:1:warning:c_builtin:W0071:UNC:X99:インクルードされている "../useless_header.h" の内容は翻訳単位の中で全く参照されていません。削除することができます。
../intro_demo.c:61:19:warning:c_builtin:W0628:UNC:X99:関数 `int bar(void)' が定義されていますが、このプロジェクトでは使われていません。
@end verbatim

@subsection ヘルプメッセージ
@verbatim
Usage: adlint [options] [source-file...]
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -l FILE, --list-file FILE      Use FILE as list file
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint SMA Command
@section @command{adlint_sma} コマンド
@cindex adlint_sma

@subsection 機能

コマンドラインで指定した解析対象ソースファイルのシングルモジュール解析 (コンパ
イルフェーズに対応する解析) のみを実行します。

シングルモジュール解析結果として、ソースファイル毎に下記のファイルを作成します
。

@itemize
@item @file{*.i} --- プリプロセス結果
@item @file{*.c.msg.csv} --- シングルモジュール解析によるメッセージ出力結果
@item @file{*.c.met.csv} --- シングルモジュール解析によるメトリクス測定結果
@item @file{*.c.log} --- シングルモジュール解析時のログメッセージ
@end itemize

@subsection 使用方法

@ref{AdLintize Command, @command{adlintize}} コマンドにより設定ファイルの雛形を
作成したディレクトリで、下記のように @command{adlint_sma} コマンドを起動すると
シングルモジュール解析のみを実行可能です。

@verbatim
% adlint_sma -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [fin] |============================| 0.134s
  1.062s user, 0.843s system, 00:00:01.90 total
@end verbatim

テキストエディタや統合開発環境などと連携する場合、下記のように
@option{-v,--verbose} オプションを指定しないことで、進捗表示を行わずコンパイラ
と同じようにメッセージを stderr に出力することがきます。

@verbatim
% adlint_sma -t adlint_traits.yml -o . -p 1 ../intro_demo.c
../intro_demo.c:6:9:warning:c_builtin:W0492:UNC:X99:同じ識別子名 `i' が構造体/共用体のメンバの他に、ラベル、タグ、または通常の識別子としても使われています。
../intro_demo.c:12:13:warning:c_builtin:W0027:UNC:X99:ポインタ型の変数に対して比較演算が行われています。
../intro_demo.c:16:14:warning:c_builtin:W0422:UNC:X99:値が NULL になることがあるポインタに対して間接参照が行われています。
../intro_demo.c:31:13:warning:c_builtin:W0613:UNC:X99:この制御式の値は常に偽になります。
...snip...
../intro_demo.c:55:9:warning:c_builtin:W9001:UNC:X99:この文には制御が到達しません。
../intro_demo.c:2:1:warning:c_builtin:W0071:UNC:X99:インクルードされている "../useless_header.h" の内容は翻訳単位の中で全く参照されていません。削除することができます。
@end verbatim

@subsection ヘルプメッセージ
@verbatim
Usage: adlint_sma [options] source-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint CMA Command
@section @command{adlint_cma} コマンド
@cindex adlint_cma

@subsection 機能

コマンドラインで指定した全シングルモジュール解析のメトリクス測定結果をもとに、
クロスモジュール解析 (リンクフェーズに対応する解析) のみを実行します。

クロスモジュール解析結果として、下記のファイルを作成します。

@itemize
@item @file{project_name.msg.csv} --- プロジェクト全体のクロスモジュール解析に
よるメッセージ出力結果
@item @file{project_name.met.csv} --- プロジェクト全体のクロスモジュール解析に
よるメトリクス測定結果
@item @file{project_name.log} --- プロジェクト全体のクロスモジュール解析時のロ
グメッセージ
@end itemize

@subsection 使用方法

@ref{AdLintize Command, @command{adlintize}} コマンドにより設定ファイルの雛形を
作成したディレクトリで、@ref{AdLint SMA Command, @command{adlint_sma}} コマンド
によるシングルモジュール解析を実行後に下記のように @command{adlint_cma} コマン
ドを起動するとクロスモジュール解析のみを実行可能です。

@verbatim
% ls *.c.met.csv
intro_demo.c.met.csv
% adlint_cma -v -t adlint_traits.yml -o . intro_demo.c.met.csv
                    intro_demo [fin] |============================| 0.011s
  1.203s user, 0.843s system, 00:00:02.04 total
@end verbatim

テキストエディタや統合開発環境などと連携する場合、下記のように
@option{-v,--verbose} オプションを指定しないことで、進捗表示を行わずリンカと同
じようにメッセージを stderr に出力することができます。

@verbatim
% adlint_cma -t adlint_traits.yml -o . intro_demo.c.met.csv
../intro_demo.c:61:19:warning:c_builtin:W0628:UNC:X99:関数 `int bar(void)' が定義されていますが、このプロジェクトでは使われていません。
@end verbatim

@subsection ヘルプメッセージ
@verbatim
Usage: adlint_cma [options] sma-metric-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim

@node AdLint CHK Command
@section @command{adlint_chk} コマンド
@cindex adlint_chk

@subsection 機能

コマンドラインで指定した解析対象ソースファイルの前処理のみを実行することで、
@ref{Traits, 特性ファイル} の内容を検証します。

@subsection 使用方法

@ref{AdLintize Command, @command{adlintize}} コマンドにより設定ファイルの雛形を
作成し、解析対象プロジェクトに合わせて @ref{Traits, 特性ファイル} を編集した後
で、下記のように @command{adlint_chk} コマンドを起動すると前処理を実行し
@ref{Traits, 特性ファイル} の内容を検証可能です。

@verbatim
% adlint_chk -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [fin] |============================| 0.047s
  0.812s user, 0.875s system, 00:00:01.68 total
@end verbatim

ヘッダファイルのインクルードパスが正しく設定されていない場合は、下記のようにエ
ラーが発生し、ソースファイルに該当する @file{*.c.msg.csv} ファイルを確認するこ
とで、どのヘッダファイルがインクルードできなかったかを確認可能です。

@verbatim
% adlint_chk -v -t adlint_traits.yml -o . -p 1 ../intro_demo.c
               ../intro_demo.c [cpp] |=======                     | 0.006s!
An error was occurred while processing `../intro_demo.c'.
See `intro_demo.c.msg.csv' and `intro_demo.c.log' for more details.

% tail intro_demo.c.msg.csv
E,../intro_demo.c,1,1,E0009,ヘッダファイル <stdio.h> が見つかりません。
X,../intro_demo.c,1,1,X0003,回復不能なエラーにより解析処理を中断しました。詳細は `intro_demo.c.msg.csv' 及び `intro_demo.c.log' を確認して下さい。
@end verbatim

@subsection ヘルプメッセージ
@verbatim
Usage: adlint_chk [options] source-file...
Options:
  -t FILE, --traits FILE         Use FILE as traits file (mandatory)
  -o DIR, --output-dir DIR       Output result files to DIR
  -p NUM, --strip NUM            Use source file names from which stripped NUM
                                 leading components as the base name of output
                                 files
  -v, --verbose                  Increase verbosity but suppress message output
      --version                  Display version information
      --copyright                Display copyright information
      --prefix                   Display prefix directory of AdLint
  -h, --help                     Display this message
@end verbatim


@node Input
@chapter 入力仕様

@menu
* 入力ファイル:Input Files.
* 特性ファイル:Traits.
* メッセージ定義ファイル:Message Definition.
* ソースコード注釈:Source Code Annotation.
@end menu


@node Input Files
@section 入力ファイル

下記 2 種類のファイルにより解析動作を設定します。

@table @var
@itemx @ref{Traits, 特性ファイル}
解析処理の方法を @uref{http://yaml.org/, YAML 形式}で記述します。
@itemx @ref{Message Definition, メッセージ定義ファイル}
メッセージカタログを @uref{http://yaml.org/, YAML 形式}で記述します。
@end table

特性ファイルは、@ref{AdLint Command, @command{adlint}}、@ref{AdLint SMA
Command, @command{adlint_sma}}、@ref{AdLint CMA Command, @command{adlint_cma}}
コマンドのオプション @option{--traits} でパス名を指定します。

メッセージ定義ファイルは、AdLint インストールパス内の @file{etc/mesg.d} 内にイ
ンストールされます。
@ref{AdLint Command, @command{adlint}}、@ref{AdLint SMA Command,
@command{adlint_sma}}、@ref{AdLint CMA Command, @command{adlint_cma}} コマンド
は、@ref{Message Traits, メッセージ特性}の @ref{message_traits:language,
@code{language}} 項目で指定した言語に従い、適切なメッセージ定義ファイルを選択し
ます。

@node Traits
@section 特性ファイル

@menu
* グローバル特性:Global Traits.
* プロジェクト特性:Project Traits.
* コンパイラ特性:Compiler Traits.
* リンカ特性:Linker Traits.
* メッセージ特性:Message Traits.
@end menu

@ref{Project Traits, プロジェクト特性}、@ref{Compiler Traits, コンパイラ特性}、
@ref{Linker Traits, リンカ特性}、@ref{Message Traits, メッセージ特性} を 単一の
@uref{http://yaml.org/, YAML 形式}の設定ファイル(@ref{Traits Sample, サンプル})
に記述します。

下記のように解析対象プロジェクトのルートディレクトリで @ref{AdLintize Command,
@command{adlintize}} コマンドを実行すると、そのプロジェクト用の特性ファイル
@file{adlint_traits.yml} の雛形、および、解析手順を自動化する
@file{GNUmakefile} やシェルスクリプトなどを生成することができます。

@verbatim
% cd project
% adlintize -o adlint
% ls adlint
GNUmakefile     adlint_all.sh   adlint_files.txt  adlint_traits.yml
adlint_all.bat  adlint_cinit.h  adlint_pinit.h
@end verbatim

後述の特性ファイルの各設定項目には、環境変数を指定することもできます。

例えば、設定項目 @code{item} に、環境変数 @code{ENV_VAR} の値を指定する場合は下
記のように記述します。

@verbatim
  item: $ENV_VAR
@end verbatim

また、文字列形式の設定項目に、環境変数の値を埋め込んだ文字列を指定する場合は下
記のように記述します。

@verbatim
  item: "prefix${ENV_VAR}suffix"
@end verbatim

ディレクトリパス名の配列を指定する項目では、下記のように一つの環境変数の値によ
り複数のパス名を指定することもできます。

@verbatim
% export ENV_VAR="/usr/local/include:/usr/include"
@end verbatim

@verbatim
  include_path:
    - $ENV_VAR
@end verbatim


@node Global Traits
@subsection グローバル特性

グローバル特性は、特性ファイルのルート項目で設定します。

@multitable @columnfractions .01 .3 .1
@headitem No. @tab 項目名 @tab 形式 @tab 内容
@item 1
@cindex version
@anchor{global_traits:version}
@tab
@code{version}
@tab
文字列
@tab
特性ファイルフォーマットのバージョンを表します。この項目は編集してはいけません
。
@item 2
@cindex exam_packages
@anchor{global_traits:exam_packages}
@tab
@code{exam_packages}
@tab
文字列の配列
@tab
静的解析に用いるソースコード検査パッケージの名前を列挙します。

@code{"c_builtin"} は AdLint 本体に組み込み済みの検査パッケージ名です。
また、今後さまざまな用途に特化したオプションのソースコード検査パッケージを開発
する予定です。

例えば、@code{adlint-exam-c_ansi} という、ソースコードが ANSI C に準拠している
かを検査するパッケージをインストールした場合、@code{exam_packages} を下記のよう
に編集して解析することができます。

以下の場合は、ANSI C 準拠の検査パッケージのみが実行されます。
@example
exam_packages:
  - "c_ansi"
@end example

以下の場合は、AdLint 組み込みの検査パッケージと、ANSI C 準拠の検査パッケージが実
行されます。
@example
exam_packages:
  - "c_builtin"
  - "c_ansi"
@end example
@end multitable


@node Project Traits
@subsection プロジェクト特性

プロジェクト特性は、特性ファイルの @code{project_traits} 配下の項目で設定します
。

@multitable @columnfractions .01 .3 .1
@headitem No. @tab 項目名 @tab 形式 @tab 内容
@item 1
@cindex project_traits:project_name
@anchor{project_traits:project_name}
@tab
@code{project_name}
@tab
文字列
@tab
プロジェクト名を設定します。
@item 2
@cindex project_traits:project_root
@anchor{project_traits:project_root}
@tab
@code{project_root}
@tab
文字列
@tab
解析対象プロジェクトのルートディレクトリを設定します。
@item 3
@cindex project_traits:target_files:inclusion_paths
@anchor{project_traits:target_files:inclusion_paths}
@tab
@code{target_files:inclusion_paths}
@tab
文字列の配列
@tab
解析対象ソースファイルが存在する上位ディレクトリのパス名を設定します。
各エントリの文字列は、@code{`:'} (Windows 環境では @code{`;'}) を区切り文字とし
て複数のパス名を設定できます。
@item 4
@cindex project_traits:target_files:exclusion_paths
@anchor{project_traits:target_files:exclusion_paths}
@tab
@code{target_files:exclusion_paths}
@tab
文字列の配列
@tab
@ref{project_traits:target_files:inclusion_paths, @code{target_files:inclusion_paths}} で指定したディレクトリ配下のファイルで、解析対象から除外するソースファイルが存在するディレクトリを設定します。
解析対象プロジェクト中にサードパーティ製ライブラリのソースコードを含み、それら
のソースファイルに関するコードチェックを行いたくない場合などに指定します。
各エントリの文字列は、@code{`:'} (Windows 環境では @code{`;'}) を区切り文字とし
て複数のパス名を設定できます。
@item 5
@cindex project_traits:initial_header
@anchor{project_traits:initial_header}
@tab
@code{initial_header}
@tab
文字列
@tab
解析対象ソースファイルの先頭に自動でインクルードされるヘッダファイルを指定しま
す。このファイルには、プロジェクト固有のマクロ定義などを記述します。
@item 6
@cindex project_traits:file_search_paths
@anchor{project_traits:file_search_paths}
@tab
@code{file_search_paths}
@tab
文字列の配列
@tab
プロジェクト固有のインクルードファイルの探索パスを設定します。
各エントリの文字列は、@code{`:'} (Windows 環境では @code{`;'}) を区切り文字とし
て複数のパス名を設定できます。
@item 7
@cindex project_traits:coding_style:indent_style
@anchor{project_traits:coding_style:indent_style}
@tab
@code{coding_style:indent_style}
@tab
文字列
@tab
コードの字下げスタイルを @code{"K&R"}、@code{"Allman"}、@code{"GNU"} から選択し
て設定します。

@code{"K&R"} スタイルは、
@example
int foo(int i)
@{
    if (i == 0) @{
        return 0;
    @}
    return i;
@}
@end example
となります。

@code{"Allman"} スタイルは、
@example
int foo(int i)
@{
    if (i == 0)
    @{
        return 0;
    @}
    return i;
@}
@end example
となります。

@code{"GNU"} スタイルは、
@example
int
foo(int i)
@{
  if (i == 0)
    @{
      return 0;
    @}
  return i;
@}
@end example
となります。
@item 8
@cindex project_traits:coding_style:tab_width
@anchor{project_traits:coding_style:tab_width}
@tab
@code{coding_style:tab_width}
@tab
整数値
@tab
タブ文字の見た目上の桁数を設定します。
@item 9
@cindex project_traits:coding_style:indent_width
@anchor{project_traits:coding_style:indent_width}
@tab
@code{coding_style:indent_width}
@tab
整数値
@tab
インデントの見た目上の桁数を設定します。
@item 10
@cindex project_traits:file_encoding
@anchor{project_traits:file_encoding}
@tab
@code{file_encoding}
@tab
文字列
@tab
ソースファイルの文字エンコーディングを設定します。値が設定されていない場合は
"ASCII-8BIT" として処理します。
@end multitable


@node Compiler Traits
@subsection コンパイラ特性
@cindex compiler_traits

コンパイラ特性は、@code{compiler_traits} 配下の項目で設定します。

@multitable @columnfractions .01 .3 .1
@headitem No. @tab 項目名 @tab 形式 @tab 内容
@item 1
@cindex compiler_traits:initial_header
@anchor{compiler_traits:initial_header}
@tab
@code{initial_header}
@tab
文字列
@tab
解析対象ソースファイルの先頭、かつ、@ref{project_traits:initial_header, プロジ
ェクト固有の @code{initial_header}} より前に自動でインクルードされるヘッダファ
イルを指定します。このファイルには、コンパイラ固有の定義済みマクロや型定義など
を記述します。
@item 2
@cindex compiler_traits:file_search_paths
@anchor{compiler_traits:file_search_paths}
@tab
@code{file_search_paths}
@tab
文字列の配列
@tab
コンパイラ固有のインクルードファイルの探索パスを設定します。
各エントリの文字列は、@code{`:'} (Windows 環境では @code{`;'}) を区切り文字とし
て複数のパス名を設定できます。
@item 3
@cindex compiler_traits:standard_types:char_size
@anchor{compiler_traits:standard_types:char_size}
@tab
@code{standard_types:char_size}
@tab
整数値
@tab
@code{char} 型ファミリのサイズをビット単位で設定します。
@item 4
@cindex compiler_traits:standard_types:char_alignment
@anchor{compiler_traits:standard_types:char_alignment}
@tab
@code{standard_types:char_alignment}
@tab
整数値
@tab
@code{char} 型ファミリのメモリアライメントをビット単位で設定します。
@item 5
@cindex compiler_traits:standard_types:short_size
@anchor{compiler_traits:standard_types:short_size}
@tab
@code{standard_types:short_size}
@tab
整数値
@tab
@code{short} 型ファミリのサイズをビット単位で設定します。
@item 6
@cindex compiler_traits:standard_types:short_alignment
@anchor{compiler_traits:standard_types:short_alignment}
@tab
@code{standard_types:short_alignment}
@tab
整数値
@tab
@code{short} 型ファミリのメモリアライメントをビット単位で設定します。
@item 7
@cindex compiler_traits:standard_types:int_size
@anchor{compiler_traits:standard_types:int_size}
@tab
@code{standard_types:int_size}
@tab
整数値
@tab
@code{int} 型ファミリのサイズをビット単位で設定します。
@item 8
@cindex compiler_traits:standard_types:int_alignment
@anchor{compiler_traits:standard_types:int_alignment}
@tab
@code{standard_types:int_alignment}
@tab
整数値
@tab
@code{int} 型ファミリのメモリアライメントをビット単位で設定します。
@item 9
@cindex compiler_traits:standard_types:long_size
@anchor{compiler_traits:standard_types:long_size}
@tab
@code{standard_types:long_size}
@tab
整数値
@tab
@code{long int} 型ファミリのサイズをビット単位で設定します。
@item 10
@cindex compiler_traits:standard_types:long_alignment
@anchor{compiler_traits:standard_types:long_alignment}
@tab
@code{standard_types:long_alignment}
@tab
整数値
@tab
@code{long int} 型ファミリのメモリアライメントをビット単位で設定します。
@item 11
@cindex compiler_traits:standard_types:long_long_size
@anchor{compiler_traits:standard_types:long_long_size}
@tab
@code{standard_types:long_long_size}
@tab
整数値
@tab
@code{long long int} 型ファミリのサイズをビット単位で設定します。
@item 12
@cindex compiler_traits:standard_types:long_long_alignment
@anchor{compiler_traits:standard_types:long_long_alignment}
@tab
@code{standard_types:long_long_alignment}
@tab
整数値
@tab
@code{long long int} 型ファミリのメモリアライメントをビット単位で設定します。
@item 13
@cindex compiler_traits:standard_types:float_size
@anchor{compiler_traits:standard_types:float_size}
@tab
@code{standard_types:float_size}
@tab
整数値
@tab
@code{float} 型のサイズをビット単位で設定します。
@item 14
@cindex compiler_traits:standard_types:float_alignment
@anchor{compiler_traits:standard_types:float_alignment}
@tab
@code{standard_types:float_alignment}
@tab
整数値
@tab
@code{float} 型のメモリアライメントをビット単位で設定します。
@item 15
@cindex compiler_traits:standard_types:double_size
@anchor{compiler_traits:standard_types:double_size}
@tab
@code{standard_types:double_size}
@tab
整数値
@tab
@code{double} 型のサイズをビット単位で設定します。
@item 16
@cindex compiler_traits:standard_types:double_alignment
@anchor{compiler_traits:standard_types:double_alignment}
@tab
@code{standard_types:double_alignment}
@tab
整数値
@tab
@code{double} 型のメモリアライメントをビット単位で設定します。
@item 17
@cindex compiler_traits:standard_types:long_double_size
@anchor{compiler_traits:standard_types:long_double_size}
@tab
@code{standard_types:long_double_size}
@tab
整数値
@tab
@code{long double} 型のサイズをビット単位で設定します。
@item 18
@cindex compiler_traits:standard_types:long_double_alignment
@anchor{compiler_traits:standard_types:long_double_alignment}
@tab
@code{standard_types:long_double_alignment}
@tab
整数値
@tab
@code{long double} 型のメモリアライメントをビット単位で設定します。
@item 19
@cindex compiler_traits:standard_types:code_ptr_size
@anchor{compiler_traits:standard_types:code_ptr_size}
@tab
@code{standard_types:code_ptr_size}
@tab
整数値
@tab
関数へのポインタ型のサイズをビット単位で設定します。
@item 20
@cindex compiler_traits:standard_types:code_ptr_alignment
@anchor{compiler_traits:standard_types:code_ptr_alignment}
@tab
@code{standard_types:code_ptr_alignment}
@tab
整数値
@tab
関数へのポインタ型のメモリアライメントをビット単位で設定します。
@item 21
@cindex compiler_traits:standard_types:data_ptr_size
@anchor{compiler_traits:standard_types:data_ptr_size}
@tab
@code{standard_types:data_ptr_size}
@tab
整数値
@tab
データへのポインタ型のサイズをビット単位で設定します。
@item 22
@cindex compiler_traits:standard_types:data_ptr_alignment
@anchor{compiler_traits:standard_types:data_ptr_alignment}
@tab
@code{standard_types:data_ptr_alignment}
@tab
整数値
@tab
データへのポインタ型のメモリアライメントをビット単位で設定します。
@item 23
@cindex compiler_traits:standard_types:char_as_unsigned_char
@anchor{compiler_traits:standard_types:char_as_unsigned_char}
@tab
@code{standard_types:char_as_unsigned_char}
@tab
真偽値
@tab
@code{`char'} 型を @code{`unsigned char'} 型として扱う場合 true を指定します。
@item 24
@cindex compiler_traits:arithmetic:logical_right_shift
@anchor{compiler_traits:arithmetic:logical_right_shift}
@tab
@code{arithmetic:logical_right_shift}
@tab
真偽値
@tab
右シフト式 @code{`>>'} を算術シフトではなく、論理シフトとして扱う場合 true を指
定します。
@item 25
@cindex compiler_traits:identifier_max
@anchor{compiler_traits:identifier_max}
@tab
@code{identifier_max}
@tab
整数値
@tab
コンパイラにより識別可能なシンボルの最大長を指定します。
@item 26
@cindex compiler_traits:extension_substitutions
@anchor{compiler_traits:extension_substitutions}
@tab
@code{extension_substitutions}
@tab
文字列のマップ
@tab
コンパイラ固有の拡張機能を調整するためのトークン置換パターンを指定します。
AdLint は、ここで指定した拡張機能の使用箇所を @ref{W0061} メッセージによって警
告します。

@code{`__attribute__ ( 任意のトークン列 )'} というトークン列をプリプロセス後に
削除しつつ @ref{W0061} メッセージによる警告を出力する場合は、下記のように指定し
ます。
@example
extension_substitutions:
  "__attribute__(__adlint__any)": ""
@end example

また、@code{`__restrict'} というトークンを @code{`restrict'} に置換しつつ
@ref{W0061} メッセージによる警告を出力する場合は、下記のように指定します。
@example
extension_substitutions:
  "__restrict": "restrict"
@end example
@item 27
@cindex compiler_traits:arbitrary_substitutions
@anchor{compiler_traits:arbitrary_substitutions}
@tab
@code{arbitrary_substitutions}
@tab
文字列のマップ
@tab
@ref{compiler_traits:extension_substitutions, @code{extension_substitutions}}
と同様に、プリプロセス後にトークン列を置換するための項目ですが、@ref{W0061} メ
ッセージを出力しない点が異なります。
@end multitable


@node Linker Traits
@subsection リンカ特性
@cindex linker_traits
リンカ特性は、@code{linker_traits} 配下の項目で設定します。

@multitable @columnfractions .01 .3 .1
@headitem No. @tab 項目名 @tab 形式 @tab 内容
@item 1
@cindex linker_traits:identifier_max
@anchor{linker_traits:identifier_max}
@tab
@code{identifier_max}
@tab
整数値
@tab
リンカにより識別可能な外部シンボルの最大長を指定します。
@item 2
@cindex linker_traits:identifier_ignore_case
@anchor{linker_traits:identifier_ignore_case}
@tab
@code{identifier_ignore_case}
@tab
真偽値
@tab
リンカにより外部シンボルを識別する際、大文字小文字を区別するかを指定します。
@end multitable


@node Message Traits
@subsection メッセージ特性
@cindex message_traits
メッセージ特性は、@code{message_traits} 配下の項目で設定します。

@multitable @columnfractions .01 .3 .1
@headitem No. @tab 項目名 @tab 形式 @tab 内容
@item 1
@cindex message_traits:language
@anchor{message_traits:language}
@tab
@code{language}
@tab
文字列
@tab
メッセージ本文の言語を指定します。(現時点では) @code{"en_US"} か @code{"ja_JP"}
が指定可能です。
@item 2
@cindex message_traits:individual_suppression
@anchor{message_traits:individual_suppression}
@tab
@code{individual_suppression}
@tab
真偽値
@tab
解析対象ファイル内の @ref{Source Code Annotation, ソースコード注釈} による警告メッセージの抑止機能を有効化します。

@code{true} の場合、注釈によるメッセージ抑止が可能になります。
@item 3
@cindex message_traits:exclusion:categories
@anchor{message_traits:exclusion:categories}
@tab
@code{exclusion:categories}
@tab
文字列の配列
@tab
@ref{global_traits:exam_packages, exam_packages} で指定したソースコード検査パッ
ケージ中のコードチェック機能で、実行を除外するものをメッセージのカテゴリにより
指定します。
@item 4
@cindex message_traits:exclusion:severities
@anchor{message_traits:exclusion:severities}
@tab
@code{exclusion:severities}
@tab
正規表現を表す文字列
@tab
@ref{global_traits:exam_packages, exam_packages} で指定したソースコード検査パッ
ケージ中のコードチェック機能で、実行を除外するものをメッセージの深刻度により指
定します。
@item 5
@cindex message_traits:exclusion:messages
@anchor{message_traits:exclusion:messages}
@tab
@code{exclusion:messages}
@tab
メッセージ ID と文字列のマップ
@tab
@ref{global_traits:exam_packages, exam_packages} で指定したソースコード検査パッ
ケージ中のコードチェック機能で、実行を除外するものをメッセージ ID により指定し
ます。

メッセージ ID は、ソースコード検査パッケージをまたいでユニークではない場合があ
るため、文字列として該当するメッセージ ID が含まれるソースコード検査パッケージ
名も指定してください。
@item 6
@cindex message_traits:inclusion:messages
@anchor{message_traits:inclusion:messages}
@tab
@code{inclusion:messages}
@tab
メッセージ ID と文字列のマップ
@tab
@code{exclusion} セクションの設定内容により除外しましたが、メッセージ ID 指定で
特定のコードチェック機能を含める場合に指定します。

例えば、@ref{message_traits:exclusion:categories, exclusion:categories} でカテ
ゴリ指定により除外したコードチェック機能群のうち、特定のもののみを実行したい場
合を想定した項目です。
@item 7
@cindex message_traits:change_list
@anchor{message_traits:change_list}
@tab
@code{change_list}
@tab
メッセージ ID と変更内容のマップ
@tab
特定メッセージの定義情報を変更する場合に指定します。

例えば、@code{"c_builtin"} パッケージの @code{W9999} メッセージを変更する場合、
下記のように設定します。

@example
change_list:
  W9999:
    package: "c_builtin"
    classes:
      - "新しいカテゴリ名1:深刻度1"
      - "新しいカテゴリ名2:深刻度2"
    format: "新しいメッセージフォーマット。"
@end example
@end multitable


@node Message Definition
@section メッセージ定義ファイル

AdLint が出力する全てのエラー、警告メッセージを @uref{http://yaml.org/, YAML 形
式}の設定ファイルに記述します。
通常、このファイルは直接編集することはありません。
メッセージ内容を変更する場合は、特性ファイルの @ref{message_traits:change_list,
@code{change_list}} 項目で変更内容を指定してください。


@node Source Code Annotation
@section ソースコード注釈

解析対象のソースコード中にコメントとして、AdLint の解析動作を制御するための注釈
を記述することができます。

@subsection 警告メッセージ抑止注釈

通常のコメントに @code{ADLINT:SF} で始まる注釈を含めることで、該当ファイルの解
析時に指定した警告メッセージを抑止することができます。
また、@code{ADLINT:SL} で始まる注釈を含めると、該当行の解析時に指定した警告メッ
セージを抑止することができます。

注釈の書式、および、使用例を下記に示します。

@subheading @bullet{ 共通定義}
@example
@anchor{message_specifier_list}
message_specifier_list : @ref{qualified_message_specifier}
                       | @ref{unqualified_message_specifier}
                       | @ref{message_specifier_list} @ref{qualified_message_specifier}
                       | @ref{message_specifier_list} @ref{unqualified_message_specifier}

@anchor{qualified_message_specifier}
qualified_message_specifier : ':' @ref{package_name} @ref{unqualified_message_specifier}

@anchor{unqualified_message_specifier}
unqualified_message_specifier : ':' '[' @ref{message_name_list} ']'

@anchor{message_name_list}
message_name_list : @ref{message_name}
                  | @ref{message_name_list} ',' @ref{message_name}

@anchor{message_name}
message_name : 'W' [0-9]@{4@}

@anchor{package_name}
package_name : 特性ファイルの @ref{global_traits:exam_packages, @code{exam_packages}} に指定した文字列
@end example

@subheading @bullet{ ファイル毎の警告メッセージ抑止注釈}
@example
@anchor{file_wise_suppressor_annotation}
file_wise_suppressor_annotation : "/*" @ref{file_wise_suppressor_head} @ref{message_specifier_list} "*/"
                                | "//" @ref{file_wise_suppressor_head} @ref{message_specifier_list}

@anchor{file_wise_suppressor_head}
file_wise_suppressor_head : "ADLINT:SF"
@end example

@subheading @bullet{ 行毎の警告メッセージ抑止注釈}
@example
@anchor{line_wise_suppressor_annotation}
line_wise_suppressor_annotation : "/*" @ref{line_wise_suppressor_head} @ref{message_specifier_list} "*/"
                                | "//" @ref{line_wise_suppressor_head} @ref{message_specifier_list}

@anchor{line_wise_suppressor_head}
line_wise_suppressor_head : "ADLINT:SL"
@end example

@subheading @bullet{ サンプルコード}
@verbatim
/* ADLINT:SF:[W0001,W0002] (to suppress W0001 and W0002 of all exam-packages in this file.) */
#include <stdio.h>

extern int i; /* ADLINT:SL:[W0003] (to suppress W0003 of all exam-packages only at this line.) */
extern int j; /* ADLINT:SL:c_staging:[W2001] (to suppress W2001 of `c_staging' exam-package only at this line.) */

void foo(void)
{
    printf("%d\n", i + j);
}
@end verbatim


@node Output
@chapter 出力仕様

@menu
* 出力ファイル:Output Files.
* 共通定義:Common.
* メトリクスファイル:Metrics File.
* メッセージファイル:Message File.
@end menu


@node Output Files
@section 出力ファイル

シングルモジュール解析の結果を、下記 4 種類のファイルに出力します。

@multitable @columnfractions .01 .2 .2 .3
@headitem No. @tab 名称 @tab ファイル名 @tab 内容
@item 1
@tab
プリプロセス済みソース
@tab
@file{<拡張子を除いたソースファイル名>.i}
@tab
# で始まる行はラインマーカーです。
@item 2
@tab
@ref{Metrics File, メトリクスファイル}
@tab
@file{<ソースファイル名>.met.csv}
@tab
メトリクス、コード情報を CSV 形式で出力します。
@item 3
@tab
@ref{Message File, メッセージファイル}
@tab
@file{<ソースファイル名>.msg.csv}
@tab
エラー、警告メッセージを CSV 形式で出力します。
@item 4
@tab
ログファイル
@tab
@file{<ソースファイル名>.log}
@tab
シングルモジュール解析処理のログを出力します。
@end multitable

クロスモジュール解析の結果を、下記 3 種類のファイルに出力します。

@multitable @columnfractions .01 .2 .2 .3
@headitem No. @tab 名称 @tab ファイル名 @tab 内容
@item 1
@tab
@ref{Metrics File, メトリクスファイル}
@tab
@file{<プロジェクト名>.met.csv}
@tab
メトリクス情報を CSV 形式で出力します。
@item 2
@tab
@ref{Message File, メッセージファイル}
@tab
@file{<プロジェクト名>.msg.csv}
@tab
警告メッセージを CSV 形式で出力します。
@item 3
@tab
ログファイル
@tab
@file{<プロジェクト名>.log}
@tab
クロスモジュール解析処理のログを出力します。
@end multitable


@node Common
@section 共通定義

@example
@anchor{version_number}
version_number
  : @ref{major_version} '.' @ref{minor_version} '.' @ref{patch_level}

@anchor{major_version}
major_version : 整数値

@anchor{minor_version}
minor_version : 整数値

@anchor{patch_level}
patch_level : 整数値

@anchor{exec_timestamp}
exec_timestamp : 年 '-' 月 '-' 日 ' ' 時 ':' 分 ':' 秒 ':' タイムゾーン

@anchor{exec_working_directory}
exec_working_directory : 解析を実行したディレクトリのフルパス名

@anchor{new_line}
new_line : 実行環境依存の改行文字列

@anchor{file_path}
file_path : 実行環境依存のファイルパス名

@anchor{line_no}
line_no : 整数値

@anchor{lines}
lines : 整数値

@anchor{column_no}
column_no : 整数値

@anchor{location}
location : @ref{file_path} ',' @ref{line_no} ',' @ref{column_no}

@anchor{function_identifier}
function_identifier
  : @ref{function_name} ',' @ref{function_signature}

@anchor{function_name}
function_name : c_identifier

@anchor{function_signature}
function_signature : c_declaration_specifiers c_declarator

@anchor{function_linkage_type}
function_linkage_type
  : 'I'  <- Internal
  | 'X'  <- eXternal

@anchor{function_scope_type}
function_scope_type
  : 'F'  <- File
  | 'B'  <- Block

@anchor{function_declaration_type}
function_declaration_type
  : 'E'  <- Explicit
  | 'I'  <- Implicit

@anchor{type_name}
type_name : c_identifier

@anchor{type_rep}
type_rep : c_declaration

@anchor{variable_name}
variable_name : c_identifier

@anchor{initializer_rep}
initializer_rep : c_initializer

@anchor{assignment_rep}
assignment_rep : c_assignment_operator c_assignment_expression

@anchor{macro_name}
macro_name : c_identifier

@anchor{macro_value}
macro_value
  :
  | @ref{pp_tokens}

@anchor{pp_tokens}
pp_tokens : c_pp_tokens

@anchor{exam_package_name}
exam_package_name : 任意の文字列

@anchor{message_id}
message_id
  : 'W' [0-9]@{4@}
  | 'E' [0-9]@{4@}
  | 'C' [0-9]@{4@}

@anchor{message_category}
message_category : [A-Z]@{3@}

@anchor{message_severity}
message_severity : [A-Z][0-9]@{2@}

@anchor{message_text}
message_text : 任意の文字列
@end example


@node Metrics File
@section メトリクスファイル

@itemize
@item @ref{Output_Metrics_Ver, バージョンレコード}
@item @ref{Output_Metrics_Dcl, 宣言レコード}
@item @ref{Output_Metrics_Def, 定義レコード}
@item @ref{Output_Metrics_Ini, 初期化レコード}
@item @ref{Output_Metrics_Asn, 代入式レコード}
@item @ref{Output_Metrics_Dep, 依存レコード}
@item @ref{Output_Metrics_Lit, リテラルレコード}
@item @ref{Output_Metrics_Pre, プリプロセスレコード}
@item @ref{Output_Metrics_Met, メトリック値レコード}
@end itemize

@anchor{Output_Metrics_Ver}
@subsection バージョンレコード

@example
@anchor{metrics_version_record}
metrics_version_record
  : @ref{metrics_version_head} ',' @ref{version_number} ',' @ref{exec_timestamp} ',' @ref{exec_working_directory}

@anchor{metrics_version_head}
metrics_version_head : "VER"
@end example

@anchor{Output_Metrics_Ver_Sample}
@subheading @bullet{ 出力例}
@example
VER,0.6.4,2012-02-16 14:10:59 +0900,/home/yanoh/intro_demo
@end example

@anchor{Output_Metrics_Dcl}
@subsection 宣言レコード

@example
@anchor{declaration_record}
declaration_record
  : @ref{declaration_head} ',' @ref{location} ',' @ref{typedcl_record_body}
  | @ref{declaration_head} ',' @ref{location} ',' @ref{gvardcl_record_body}
  | @ref{declaration_head} ',' @ref{location} ',' @ref{funcdcl_record_body}

@anchor{declaration_head}
declaration_head : "DCL"
@end example

@subheading @bullet{ 型宣言レコード}
@example
@anchor{typedcl_record_body}
typedcl_record_body
  : 'T' ',' @ref{typedcl_type} ',' @ref{type_name} ',' @ref{type_rep}

@anchor{typedcl_type}
typedcl_type
  : 'T'  <- typedef
  | 'S'  <- struct
  | 'U'  <- union
  | 'E'  <- enum
@end example

@subheading @bullet{ 外部変数宣言レコード}
@example
@anchor{gvardcl_record_body}
gvardcl_record_body
  : 'V' ',' @ref{variable_name} ',' @ref{type_rep}
@end example

@subheading @bullet{ 関数宣言レコード}
@example
@anchor{funcdcl_record_body}
funcdcl_record_body
  : 'F' ',' @ref{function_linkage_type} ',' @ref{function_scope_type} ',' @ref{function_declaration_type} ',' @ref{function_identifier}
@end example

@anchor{Output_Metrics_Dcl_Sample}
@subheading @bullet{ 出力例}
@verbatim
 1: typedef int *int_ptr;
 2:
 3: struct Foo {
 4:     int i;
 5:     long l;
 6: };
 7:
 8: union Bar {
 9:     int i;
10:     char c;
11: };
12:
13: enum Color {
14:     RED = 1,
15:     GREEN,
16:     BLUE
17: };
18:
19: extern int global_1;
20:
21: extern int foo(long);
@end verbatim

@example
DCL,test.c,1,14,T,T,int_ptr,int *
DCL,test.c,3,8,T,S,Foo,struct Foo @{ int i; long l; @}
DCL,test.c,8,7,T,U,Bar,union Bar @{ int i; char c; @}
DCL,test.c,13,6,T,E,Color,"enum Color @{ RED = 1, GREEN, BLUE @}"
DCL,test.c,19,12,V,global_1,int
DCL,test.c,21,12,F,X,F,E,foo,int foo(long)
@end example

@anchor{Output_Metrics_Def}
@subsection 定義レコード

@example
@anchor{definition_record}
definition_record
  : @ref{definition_head} ',' @ref{location} ',' @ref{vardef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{fundef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{macrodef_record_body}
  | @ref{definition_head} ',' @ref{location} ',' @ref{labeldef_record_body}

@anchor{definition_head}
definition_head : "DEF"
@end example

@subheading @bullet{ 変数定義レコード}
@example
@anchor{vardef_record_body}
vardef_record_body
  : 'V' ',' @ref{variable_linkage_type} ',' @ref{variable_scope_type} ',' @ref{storage_class_type} ',' @ref{variable_name} ',' @ref{type_rep}

@anchor{variable_linkage_type}
variable_linkage_type
  : 'I'  <- Internal
  | 'X'  <- eXternal
  | 'N'  <- None

@anchor{variable_scope_type}
variable_scope_type
  : 'F'  <- File
  | 'B'  <- Block
  | 'P'  <- Parameter

@anchor{storage_class_type}
storage_class_type
  : 'A'  <- Auto
  | 'R'  <- Register
  | 'S'  <- Static
  | 'N'  <- None
@end example

@subheading @bullet{ 関数定義レコード}
@example
@anchor{fundef_record_body}
fundef_record_body
  : 'F' ',' @ref{function_linkage_type} ',' @ref{function_scope_type} ',' @ref{function_identifier} ',' @ref{lines}
@end example

@subheading @bullet{ マクロ定義レコード}
@example
@anchor{macrodef_record_body}
macrodef_record_body
  : 'M' ',' @ref{macro_name} ',' @ref{macro_form_type}

@anchor{macro_form_type}
macro_form_type
  : 'O'  <- Object
  | 'F'  <- Function
@end example

@subheading @bullet{ ラベル定義レコード}
@example
@anchor{labeldef_record_body}
labeldef_record_body
  : 'L' ',' @ref{label_name}

@anchor{label_name}
label_name : c_identifier
@end example

@anchor{Output_Metrics_Def_Sample}
@subheading @bullet{ 出力例}
@verbatim
 1: int global_1;
 2: struct { int i; long l; } global_2;
 3:
 4: static long static_1;
 5: static enum { FOO, BAR, BAZ } static_2;
 6:
 7: int foo(int i, register short s)
 8: {
 9:     static char static_3 = 0;
10:     register int local_1 = i + s + static_3;
11:     auto int local_2 = 0;
12:     int local_3 = 0;
13:     goto end;
14: end:
15:     return local_1 + local_2 + local_3;
16: }
17:
18: static void bar(void) {}
19:
20: #define OBJ_FORM_MACRO (1 + 2)
21: #define MAX(a, b) ((a) < (b) ? (b) : (a))
@end verbatim

@example
DEF,test.c,1,5,V,X,F,N,global_1,int
DEF,test.c,2,27,V,X,F,N,global_2,struct __adlint__unnamed_1
DEF,test.c,4,13,V,I,F,S,static_1,long
DEF,test.c,5,31,V,I,F,S,static_2,enum __adlint__unnamed_2
DEF,test.c,7,13,V,I,P,N,i,int
DEF,test.c,7,31,V,I,P,R,s,short
DEF,test.c,9,17,V,I,B,S,static_3,char
DEF,test.c,10,18,V,I,B,R,local_1,int
DEF,test.c,11,14,V,I,B,A,local_2,int
DEF,test.c,12,9,V,I,B,N,local_3,int
DEF,test.c,7,5,F,X,F,foo,"int foo(int,short)",10
DEF,test.c,18,13,F,I,F,bar,void bar(void),1
DEF,test.c,20,1,M,OBJ_FORM_MACRO,O
DEF,test.c,21,1,M,MAX,F
DEF,test.c,14,1,L,end
@end example

@anchor{Output_Metrics_Ini}
@subsection 初期化レコード

@example
@anchor{initialization_record}
initialization_record
  : @ref{initialization_head} ',' @ref{location} ',' @ref{variable_name} ',' @ref{initializer_rep}

@anchor{initialization_head}
initialization_head : "INI"
@end example

@anchor{Output_Metrics_Ini_Sample}
@subheading @bullet{ 出力例}
@verbatim
1: int global_1 = 1;
2:
3: int main(void)
4: {
5:     int local_1 = global_1;
6:     int local_2 = local_1 + 1;
7:
8:     return local_1 + local_2;
9: }
@end verbatim

@example
INI,test.c,1,5,global_1,1
INI,test.c,5,9,local_1,global_1
INI,test.c,6,9,local_2,local_1 + 1
@end example

@anchor{Output_Metrics_Asn}
@subsection 代入式レコード

@example
@anchor{assignment_record}
assignment_record
  : @ref{assignment_head} ',' @ref{location} ',' @ref{variable_name} ',' @ref{assignment_rep}

@anchor{assignment_head}
assignment_head : "ASN"
@end example

@anchor{Output_Metrics_Asn_Sample}
@subheading @bullet{ 出力例}
@verbatim
 1: int main(void)
 2: {
 3:     int i;
 4:
 5:     for (i = 0; i < 10; i++) {
 6:         if (i % 2) {
 7:             i += 1;
 8:         }
 9:     }
10:
11:     return 0;
12: }
@end verbatim

@example
ASN,test.c,5,12,i,= 0
ASN,test.c,7,15,i,+= 1
@end example

@anchor{Output_Metrics_Dep}
@subsection 依存レコード

@example
@anchor{dependency_record}
dependency_record
  : @ref{dependency_head} ',' @ref{location} ',' @ref{include_record_body}
  | @ref{dependency_head} ',' @ref{location} ',' @ref{call_record_body}
  | @ref{dependency_head} ',' @ref{location} ',' @ref{xref_record_body}

@anchor{dependency_head}
dependency_head : "DEP"
@end example

@subheading @bullet{ インクルードレコード}
@example
@anchor{include_record_body}
include_record_body
  : 'I' ',' @ref{included_fpath}

@anchor{included_fpath}
included_fpath : '<' @ref{file_path} '>' | '"' @ref{file_path} '"'
@end example

@subheading @bullet{ 呼び出しレコード}
@example
@anchor{call_record_body}
call_record_body
  : 'C' ',' @ref{caller_function} ',' @ref{callee_function}

@anchor{caller_function}
caller_function : @ref{function_identifier}

@anchor{callee_function}
callee_function : @ref{function_identifier}
@end example

@subheading @bullet{ 外部参照レコード}
@example
@anchor{xref_record_body}
xref_record_body
  : 'X' ',' xref_variable_record_body
  | 'X' ',' xref_function_record_body

@anchor{xref_variable_record_body}
xref_variable_record_body
  : 'V' ',' @ref{accessor_function} ',' @ref{access_type} ',' @ref{accessee_variable}

@anchor{xref_function_record_body}
xref_function_record_body
  : 'F' ',' @ref{accessor_function} ',' @ref{access_type} ',' @ref{accessee_function}

@anchor{accessor_function}
accessor_function : @ref{function_identifier}

@anchor{access_type}
access_type : 'R' | 'W'

@anchor{accessee_variable}
accessee_variable : @ref{variable_name}

@anchor{accessee_function}
accessee_function : @ref{function_identifier}
@end example

@anchor{Output_Metrics_Dep_Sample}
@subheading @bullet{ 出力例}
@verbatim
 1: #include <stdio.h>
 2: #include "test.h"
 3:
 4: extern int global;
 5:
 6: int foo(long l)
 7: {
 8:     int i = global;
 9:
10:     return l - i;
11: }
12:
13: int main(void)
14: {
15:     int (*p)(long) = &foo;
16:
17:     global = 5;
18:
19:     return (*p)(10);
20: }
@end verbatim

@example
DEP,test.c,1,1,I,</usr/include/stdio.h>
DEP,test.c,2,1,I,"""test.h"""
DEP,test.c,8,13,X,V,foo,int foo(long),R,global
DEP,test.c,19,16,C,main,int main(void),foo,int foo(long)
DEP,test.c,15,23,X,F,main,int main(void),R,foo,int foo(long)
DEP,test.c,17,12,X,V,main,int main(void),W,global
@end example

@anchor{Output_Metrics_Lit}
@subsection リテラルレコード

@example
@anchor{literal_record}
literal_record
  : @ref{literal_head} ',' @ref{location} ',' @ref{literal_type} ',' @ref{literal_prefix} ',' @ref{literal_suffix} ',' @ref{literal_value}

@anchor{literal_head}
literal_head : "LIT"

@anchor{literal_type}
literal_type
  : 'DN'  <- Decimal Number
  | 'HN'  <- Hexadecimal Number
  | 'ON'  <- Octal Number
  | 'BN'  <- Binary Number
  | 'FN'  <- Floating point Number
  | 'CN'  <- Character Narrow
  | 'SN'  <- String Narrow
  | 'CW'  <- Character Wide
  | 'SW'  <- String Wide

@anchor{literal_prefix}
literal_prefix
  :
  | 'l'  | 'L'
  | '0'
  | '0x' | '0X'
  | '0b' | '0B'

@anchor{literal_suffix}
literal_suffix
  :
  | 'u'   | 'U'
  | 'l'   | 'L'
  | 'ul'  | 'Ul'  | 'uL'  | 'UL'
  | 'ull' | 'Ull' | 'uLL' | 'ULL'
  | 'll'  | 'LL'
  | 'f'   | 'F'

@anchor{literal_value}
literal_value
  : c_constant
  | c_string_literal
@end example

@anchor{Output_Metrics_Lit_Sample}
@subheading @bullet{ 出力例}
@verbatim
1: unsigned int i = 0xFFU;
2:
3: int foo(long l)
4: {
5:     const wchar_t *s = L"foobar";
6:
7:     return 0;
8: }
@end verbatim

@example
LIT,test.c,1,18,HN,0x,U,0xFFU
LIT,test.c,5,24,SW,L,,"L""foobar"""
@end example

@anchor{Output_Metrics_Pre}
@subsection プリプロセスレコード

@example
@anchor{preprocess_record}
preprocess_record
  : @ref{preprocess_head} ',' @ref{location} ',' @ref{pp_directive} ',' @ref{pp_tokens}

@anchor{preprocess_head}
preprocess_head : "PRE"

@anchor{pp_directive}
pp_directive
  : "#if"
  | "#ifdef"
  | "#ifndef"
  | "#elif"
  | "#else"
  | "#endif"
  | "#include"
  | "#define"
  | "#undef"
  | "#line"
  | "#error"
  | "#pragma"
  | "#"
@end example

@anchor{Output_Metrics_Pre_Sample}
@subheading @bullet{ 出力例}
@verbatim
 1: #pragma once
 2:
 3: #if defined(NDEBUG)
 4: void debug(const char *msg) {}
 5: #else
 6: #include <stdio.h>
 7: void debug(const char *msg)
 8: {
 9:     puts(msg);
10: }
11: #endif
@end verbatim

@example
PRE,test.c,1,1,#pragma,once
PRE,test.c,3,1,#if,defined(NDEBUG)
PRE,test.c,5,1,#else,
PRE,test.c,6,1,#include,<stdio.h>
PRE,test.c,11,1,#endif,
@end example

@anchor{Output_Metrics_Met}
@subsection メトリック値レコード

@example
@anchor{metric_record}
metric_record
  : @ref{metric_head} ',' @ref{file_metric_record_body}
  | @ref{metric_head} ',' @ref{func_metric_record_body}

@anchor{metric_head}
metric_head : "MET"

@anchor{file_metric_record_body}
file_metric_record_body
  : @ref{file_metric_name} ',' @ref{file_path} ',' @ref{metric_value}

@anchor{func_metric_record_body}
func_metric_record_body
  : @ref{func_metric_name} ',' @ref{function_identifier} ',' @ref{location} ',' @ref{metric_value}

@anchor{file_metric_name}
file_metric_name
  : "FL_STMT"  <- ステートメント数
  | "FL_FUNC"  <- 関数の数

@anchor{func_metric_name}
func_metric_name
  : "FN_STMT"  <- ステートメント数
  | "FN_UNRC"  <- 到達しないステートメント数
  | "FN_LINE"  <- 物理行数
  | "FN_PARA"  <- パラメータ数
  | "FN_UNUV"  <- 使用/再使用されない変数の数
  | "FN_CSUB"  <- 関数を呼び出す箇所数
  | "FN_CALL"  <- 関数から呼び出される箇所数
  | "FN_GOTO"  <- goto 文の数
  | "FN_RETN"  <- 関数内の戻り点の数
  | "FN_UELS"  <- else なしの if 文数
  | "FN_NEST"  <- 制御フローグラフの最大ネスト数
  | "FN_PATH"  <- 推定静的パス数
  | "FN_CYCM"  <- サイクロマティック複雑度

@anchor{metric_value}
metric_value : 整数値
@end example


@node Message File
@section メッセージファイル

@example
@anchor{message_file}
message_file
  : @ref{message_version_record}
  | @ref{message_version_record} @ref{new_line} @ref{message_list}

@anchor{message_version_record}
message_version_record
  : 'V' ',' @ref{version_number} ',' @ref{exec_timestamp} ',' @ref{exec_working_directory}

@anchor{message_list}
message_list
  : @ref{error_record}
  | @ref{warning_record}
  | @ref{message_list} @ref{new_line} @ref{error_record}
  | @ref{message_list} @ref{new_line} @ref{warning_record}

@anchor{error_record}
error_record
  : @ref{error_line} @ref{new_line} @ref{context_line_list}

@anchor{error_line}
error_line
  : 'E' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}

@anchor{warning_record}
warning_record
  : @ref{warning_line} @ref{new_line} @ref{context_line_list}

@anchor{warning_line}
warning_line
  : 'W' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}

@anchor{context_line_list}
context_line_list
  :
  | @ref{context_line} @ref{new_line} @ref{context_line_list}

@anchor{context_line}
context_line
  : 'C' ',' @ref{file_path} ',' @ref{line_no} ',' @ref{column_no} ',' @ref{exam_package_name} ',' @ref{message_id} ',' @ref{message_category} ',' @ref{message_severity} ',' @ref{message_text}
@end example


@node Messages
@chapter メッセージ一覧

@menu
* X0001::不明な例外条件 `%s' を検出しました。
* X0002::不正なメッセージ ID`%s' を検出しました。
* X0003::回復不能なエラーにより解析処理を中断しました。詳細は `%s' 及び `%s' を確認して下さい。
* X0004::不正なメッセージフォーマット `%s' を検出しました。
* E0004::対応する #endif 行がありません。
* E0007::条件式中のトークン `%s' で構文エラーを検出しました。条件式を偽として評価します。
* E0008::トークン `%s' で構文エラーを検知しました。
* E0009::ヘッダファイル <%s> が見つかりません。
* E0010::ヘッダファイル "%s" が見つかりません。
* E0013::式に文を含めることはできません。
* E0014::ラベルのアドレスを取得するための && 単項演算子は GCC 独自の拡張機能です。
* E0015::ラベルのアドレスを指定した goto 文は GCC 独自の拡張機能です。
* E0016::終了しないコメントブロックが見つかりました。
* E0018::大域スコープに余分なセミコロンが見つかりました。
* W0001::括弧 `()' のネストの深さが 32 を超えています。このプログラムは、ISO C90 標準規格に厳密に合致していません。
* W0002::関数 `%s()' の定義において、識別子と仮引数宣言を分けて記述するのは、古いスタイルです。
* W0003::この switch 文には default ラベルが含まれていません。
* W0007::直前の case 節あるいは default 節の末尾に、break 文または return 文がありません。
* W0010::この三項演算子 (条件演算子) のオペランドに副作用があります。
* W0013::繰り返し文の中で、continue 文が使用されています。
* W0016::変換指定子のフィールド幅が 509 文字を超えています。
* W0017::変換指定子のフィールド幅が 509 文字を超えています。
* W0018::変換指定子の精度幅が 509 文字を超えています。
* W0019::このポインタキャストは、const 修飾を削除しているので危険です。
* W0021::このポインタキャストは、volatile 修飾を削除しているので危険です。
* W0023::ポインタ型の変数に対して算術演算が行われています。
* W0024::ポインタ型の変数に対してインクリメントまたはデクリメントが行われています。
* W0025::`%s' は、既にこのファイルから直接インクルードされています。
* W0026::`%s' は、既にこのファイルから間接的にインクルードされています。
* W0027::ポインタ型の変数に対して比較演算が行われています。
* W0028::NULL ポインタに対して間接参照が行われています。
* W0030::NULL ポインタに対して算術演算が行われています。
* W0031::仮引数 `%s' は、この関数の中で使われていません。
* W0033::ラベル `%s:' は、この関数の中で使われていないため、削除することができます。
* W0035::`&&' または `||' の右のオペランドは、算術型またはポインタ型でなければなりません。
* W0036::宣言子の中の修飾子の数が 12 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0037::構造体または共用体のネストが 15 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0038::オブジェクト `%s' のサイズが 32767 バイトを超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0039::ブロックの中のローカルな識別子の数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0040::ビットフィールドが signed または unsigned 付きで宣言されていません。
* W0041::構造体または共用体のメンバの数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0042::列挙定数の数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0043::配列の初期値が、宣言された配列のサイズに足りません。残りの配列要素はゼロで初期化されます。
* W0049::制御構造のネストが 15 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0050::case ラベルの数が 257 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0051::外部識別子 `%s' が他の識別子名と、リンカ特性で指定された文字数の範囲内で区別できません。
* W0052::識別子名 `%s' が他の識別子名と、コンパイラ特性で指定された文字数の範囲内で区別できません。
* W0053::`#include "%s"' のネストが 8 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0054::`#if...' のネストの最大値が 8 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0055::マクロ定義の数が 1024 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0056::関数形式マクロの仮引数の数が 31 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0057::関数形式マクロの呼び出しの実引数の数が 31 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0058::文字列リテラルの文字数が 509 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。
* W0059::このファイルの行末に Ctrl-M(^M) 制御文字が見つかりました。
* W0060::このファイル内に Ctrl-Z(^Z) 制御文字が見つかりました。
* W0061::`%s' は ISO C 標準規格の正式な予約語ではありません。言語拡張と見なし無視します。
* W0062::`__typeof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
* W0063::`__alignof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
* W0064::2 進数整数リテラルが使われています。これは言語拡張です。
* W0065::代入演算子の左オペランドをキャストしてはなりません。
* W0066::`main()' 関数は、`int (void)' または `int (int, char *[])' のどちらかでなければなりません。
* W0067::ネストされた構造体のメンバに直接アクセスしています。これは言語拡張です。
* W0068::ビットにアクセスするために `.' を使っています。これは言語拡張です。
* W0069::`/*' で始まるコメントの中に `/*' が見つかりました。ネストされたコメントは、ISO C 標準規格では認められていません。
* W0070::インクルードされている <%s> の内容は翻訳単位の中で全く参照されていません。削除することができます。
* W0071::インクルードされている "%s" の内容は翻訳単位の中で全く参照されていません。削除することができます。
* W0072::基本ソース文字集合に含まれない文字が、ヘッダファイル名で使われています。
* W0073::このインクルードファイルには、インクルードガードが記述されていません。
* W0076::この 16 進整数リテラルには、接尾語 `U' または `u' が付けられていません。
* W0077::接尾語として小文字の `l' が整数または浮動小数点数に付けられています。
* W0078::仮引数並びがない関数が宣言されています。
* W0079::この配列は、初期値の文字列リテラルの終端文字 `\0' を保持できません。
* W0080::const 修飾されたグローバルオブジェクトが、明示的に初期化されずに定義されています。
* W0081::単項演算子 `-' を unsigned int 型、unsigned long 型、unsigned long long 型のオペランドに対して使うと、符号無し型になってしまいます。
* W0082::単項演算子 `-' を符号無しの潜在型 `%s' のオペランドに対して使っています。
* W0084::このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。
* W0085::この文には副作用がありません。誤りのある可能性が高いです。
* W0086::三項演算子 (条件演算子) の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。
* W0087::カンマ演算子の右側の式は、副作用がない冗長な式です。
* W0088::論理演算子の右側の式は、副作用がない冗長な式です。
* W0093::ゼロで除算される恐れがあります。
* W0096::ゼロになる定数式で除算しています。
* W0097::ゼロの値で除算しています。
* W0100::変数 `%s' は初期値を設定後に再代入されません。変数を const 付きで初期値を指定して定義できる可能性があります。
* W0101::自動変数のアドレスが、より長い寿命を持つポインタに代入されています。このプログラムは危険です。
* W0102::自動変数のアドレスが、関数の仮引数を介して戻されています。このプログラムは危険です。
* W0103::自動変数のアドレスが、戻り値として関数から返されています。このプログラムは危険です。
* W0104::仮引数 `%s' は値が変わりません。const 付きで宣言できる可能性があります。
* W0105::ポインタ仮引数 `%s' が指しているオブジェクトは関数内で変わらないので、const オブジェクトを指すポインタ型として宣言できる可能性があります。
* W0107::自動変数のアドレスが、static 付きローカルポインタに代入されています。このプログラムは危険です。
* W0108::代入演算子が論理演算式の中で使われています。
* W0109::この関数の宣言が見つかりません。省略されたものとみなし、`extern int %s()' を挿入します。
* W0110::浮動小数点型の変数が for 文のループカウンタとして使われています。
* W0112::浮動小数点の式を等価演算子で比較しています。
* W0114::この制御式は明示的な論理演算ではありません。
* W0115::符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。
* W0116::符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。
* W0117::`%s' の定義は外部結合を持ちますが、定義より前にその宣言がありません。
* W0118::外部結合を持つ `%s' の宣言が、ヘッダファイルの中にありません。
* W0119::暗黙的に char 型から signed char 型に型変換されています。
* W0120::暗黙的に char 型から unsigned char 型に型変換されています。
* W0121::暗黙的に char 型から signed short 型に型変換されています。
* W0122::暗黙的に char 型から unsigned short 型に型変換されています。
* W0123::暗黙的に char 型から signed int 型に型変換されています。
* W0124::暗黙的に char 型から unsigned int 型に型変換されています。
* W0125::暗黙的に char 型から signed long 型に型変換されています。
* W0126::暗黙的に char 型から unsigned long 型に型変換されています。
* W0127::暗黙的に char 型から float 型に型変換されています。
* W0128::暗黙的に char 型から double 型に型変換されています。
* W0129::暗黙的に char 型から long double 型に型変換されています。
* W0130::暗黙的に char 型から signed long long 型に型変換されています。
* W0131::暗黙的に char 型から unsigned long long 型に型変換されています。
* W0132::暗黙的に unsigned char 型から char 型に型変換されています。
* W0133::暗黙的に signed char 型から char 型に型変換されています。
* W0134::暗黙的に signed short 型から char 型に型変換されています。
* W0135::暗黙的に unsigned short 型から char 型に型変換されています。
* W0136::暗黙的に signed int 型から char 型に型変換されています。
* W0137::暗黙的に unsigned int 型から char 型に型変換されています。
* W0138::暗黙的に signed long 型から char 型に型変換されています。
* W0139::暗黙的に unsigned long 型から char 型に型変換されています。
* W0140::暗黙的に signed long long 型から char 型に型変換されています。
* W0141::暗黙的に unsigned long long 型から char 型に型変換されています。
* W0142::暗黙的に unsigned char 型から signed char 型に型変換されています。
* W0143::暗黙的に unsigned short 型から signed char 型に型変換されています。
* W0144::暗黙的に unsigned short 型から signed short 型に型変換されています。
* W0145::暗黙的に unsigned int 型から signed char 型に型変換されています。
* W0146::暗黙的に unsigned int 型から signed short 型に型変換されています。
* W0147::暗黙的に unsigned int 型から signed int 型に型変換されています。
* W0148::暗黙的に unsigned long 型から signed char 型に型変換されています。
* W0149::暗黙的に unsigned long 型から signed short 型に型変換されています。
* W0150::暗黙的に unsigned long 型から signed int 型に型変換されています。
* W0151::暗黙的に unsigned long 型から signed long 型に型変換されています。
* W0152::暗黙的に unsigned long long 型から signed char 型に型変換されています。
* W0153::暗黙的に unsigned long long 型から signed short 型に型変換されています。
* W0154::暗黙的に unsigned long long 型から signed int 型に型変換されています。
* W0155::暗黙的に unsigned long long 型から signed long 型に型変換されています。
* W0156::暗黙的に unsigned long long 型から signed long long 型に型変換されています。
* W0157::暗黙的に signed char 型から unsigned char 型に型変換されています。
* W0158::暗黙的に signed char 型から unsigned short 型に型変換されています。
* W0159::暗黙的に signed char 型から unsigned int 型に型変換されています。
* W0160::暗黙的に signed char 型から unsigned long 型に型変換されています。
* W0161::暗黙的に signed short 型から unsigned char 型に型変換されています。
* W0162::暗黙的に signed short 型から unsigned short 型に型変換されています。
* W0163::暗黙的に signed short 型から unsigned int 型に型変換されています。
* W0164::暗黙的に signed short 型から unsigned long 型に型変換されています。
* W0165::暗黙的に signed int 型から unsigned char 型に型変換されています。
* W0166::暗黙的に signed int 型から unsigned short 型に型変換されています。
* W0167::暗黙的に signed int 型から unsigned int 型に型変換されています。
* W0168::暗黙的に signed int 型から unsigned long 型に型変換されています。
* W0169::暗黙的に signed long 型から unsigned char 型に型変換されています。
* W0170::暗黙的に signed long 型から unsigned short 型に型変換されています。
* W0171::暗黙的に signed long 型から unsigned int 型に型変換されています。
* W0172::暗黙的に signed long 型から unsigned long 型に型変換されています。
* W0173::暗黙的に signed char 型から unsigned long long 型に型変換されています。
* W0174::暗黙的に signed short 型から unsigned long long 型に型変換されています。
* W0175::暗黙的に signed int 型から unsigned long long 型に型変換されています。
* W0176::暗黙的に signed long 型から unsigned long long 型に型変換されています。
* W0177::暗黙的に signed long long 型から unsigned char 型に型変換されています。
* W0178::暗黙的に signed long long 型から unsigned short 型に型変換されています。
* W0179::暗黙的に signed long long 型から unsigned int 型に型変換されています。
* W0180::暗黙的に signed long long 型から unsigned long 型に型変換されています。
* W0181::暗黙的に signed long long 型から unsigned long long 型に型変換されています。
* W0182::暗黙的に unsigned char 型から float 型に型変換されています。
* W0183::暗黙的に unsigned char 型から double 型に型変換されています。
* W0184::暗黙的に unsigned char 型から long double 型に型変換されています。
* W0185::暗黙的に signed char 型から float 型に型変換されています。
* W0186::暗黙的に signed char 型から double 型に型変換されています。
* W0187::暗黙的に signed char 型から long double 型に型変換されています。
* W0188::暗黙的に signed short 型から float 型に型変換されています。
* W0189::暗黙的に signed short 型から double 型に型変換されています。
* W0190::暗黙的に signed short 型から long double 型に型変換されています。
* W0191::暗黙的に unsigned short 型から float 型に型変換されています。
* W0192::暗黙的に unsigned short 型から double 型に型変換されています。
* W0193::暗黙的に unsigned short 型から long double 型に型変換されています。
* W0194::暗黙的に signed int 型から float 型に型変換されています。
* W0195::暗黙的に signed int 型から double 型に型変換されています。
* W0196::暗黙的に signed int 型から long double 型に型変換されています。
* W0197::暗黙的に unsigned int 型から float 型に型変換されています。
* W0198::暗黙的に unsigned int 型から double 型に型変換されています。
* W0199::暗黙的に unsigned int 型から long double 型に型変換されています。
* W0200::暗黙的に signed long 型から float 型に型変換されています。
* W0201::暗黙的に signed long 型から double 型に型変換されています。
* W0202::暗黙的に signed long 型から long double 型に型変換されています。
* W0203::暗黙的に unsigned long 型から float 型に型変換されています。
* W0204::暗黙的に unsigned long 型から double 型に型変換されています。
* W0205::暗黙的に unsigned long 型から long double 型に型変換されています。
* W0206::暗黙的に signed long long 型から float 型に型変換されています。
* W0207::暗黙的に signed long long 型から double 型に型変換されています。
* W0208::暗黙的に signed long long 型から long double 型に型変換されています。
* W0209::暗黙的に unsigned long long 型から float 型に型変換されています。
* W0210::暗黙的に unsigned long long 型から double 型に型変換されています。
* W0211::暗黙的に unsigned long long 型から long double 型に型変換されています。
* W0212::暗黙的に float 型から char 型に型変換されています。
* W0213::暗黙的に float 型から signed char 型に型変換されています。
* W0214::暗黙的に float 型から unsigned char 型に型変換されています。
* W0215::暗黙的に float 型から signed short 型に型変換されています。
* W0216::暗黙的に float 型から unsigned short 型に型変換されています。
* W0217::暗黙的に float 型から signed int 型に型変換されています。
* W0218::暗黙的に float 型から unsigned int 型に型変換されています。
* W0219::暗黙的に float 型から signed long 型に型変換されています。
* W0220::暗黙的に float 型から unsigned long 型に型変換されています。
* W0221::暗黙的に double 型から char 型に型変換されています。
* W0222::暗黙的に double 型から signed char 型に型変換されています。
* W0223::暗黙的に double 型から unsigned char 型に型変換されています。
* W0224::暗黙的に double 型から signed short 型に型変換されています。
* W0225::暗黙的に double 型から unsigned short 型に型変換されています。
* W0226::暗黙的に double 型から signed int 型に型変換されています。
* W0227::暗黙的に double 型から unsigned int 型に型変換されています。
* W0228::暗黙的に double 型から signed long 型に型変換されています。
* W0229::暗黙的に double 型から unsigned long 型に型変換されています。
* W0230::暗黙的に long double 型から char 型に型変換されています。
* W0231::暗黙的に long double 型から signed char 型に型変換されています。
* W0232::暗黙的に long double 型から unsigned char 型に型変換されています。
* W0233::暗黙的に long double 型から signed short 型に型変換されています。
* W0234::暗黙的に long double 型から unsigned short 型に型変換されています。
* W0235::暗黙的に long double 型から signed int 型に型変換されています。
* W0236::暗黙的に long double 型から unsigned int 型に型変換されています。
* W0237::暗黙的に long double 型から signed long 型に型変換されています。
* W0238::暗黙的に long double 型から unsigned long 型に型変換されています。
* W0239::暗黙的に float 型から signed long long 型に型変換されています。
* W0240::暗黙的に float 型から unsigned long long 型に型変換されています。
* W0241::暗黙的に double 型から signed long long 型に型変換されています。
* W0242::暗黙的に double 型から unsigned long long 型に型変換されています。
* W0243::暗黙的に long double 型から signed long long 型に型変換されています。
* W0244::暗黙的に long double 型から unsigned long long 型に型変換されています。
* W0245::暗黙的に unsigned char 型から signed short 型に型変換されています。
* W0246::暗黙的に unsigned char 型から signed int 型に型変換されています。
* W0247::暗黙的に unsigned char 型から signed long 型に型変換されています。
* W0248::暗黙的に unsigned short 型から signed int 型に型変換されています。
* W0249::暗黙的に unsigned short 型から signed long 型に型変換されています。
* W0250::暗黙的に unsigned int 型から signed long 型に型変換されています。
* W0251::暗黙的に unsigned char 型から signed long long 型に型変換されています。
* W0252::暗黙的に unsigned short 型から signed long long 型に型変換されています。
* W0253::暗黙的に unsigned int 型から signed long long 型に型変換されています。
* W0254::暗黙的に unsigned long 型から signed long long 型に型変換されています。
* W0255::char 型の値が関数 `signed char %s()' から返されています。
* W0256::char 型の値が関数 `unsigned char %s()' から返されています。
* W0257::char 型の値が関数 `signed short %s()' から返されています。
* W0258::char 型の値が関数 `unsigned short %s()' から返されています。
* W0259::char 型の値が関数 `signed int %s()' から返されています。
* W0260::char 型の値が関数 `unsigned int %s()' から返されています。
* W0261::char 型の値が関数 `signed long %s()' から返されています。
* W0262::char 型の値が関数 `unsigned long %s()' から返されています。
* W0263::char 型の値が関数 `float %s()' から返されています。
* W0264::char 型の値が関数 `double %s()' から返されています。
* W0265::char 型の値が関数 `long double %s()' から返されています。
* W0266::char 型の値が関数 `signed long long %s()' から返されています。
* W0267::char 型の値が関数 `unsigned long long %s()' から返されています。
* W0268::unsigned char 型の値が関数 `char %s()' から返されています。
* W0269::signed char 型の値が関数 `char %s()' から返されています。
* W0270::signed short 型の値が関数 `char %s()' から返されています。
* W0271::unsigned short 型の値が関数 `char %s()' から返されています。
* W0272::signed int 型の値が関数 `char %s()' から返されています。
* W0273::unsigned int 型の値が関数 `char %s()' から返されています。
* W0274::signed long 型の値が関数 `char %s()' から返されています。
* W0275::unsigned long 型の値が関数 `char %s()' から返されています。
* W0276::signed long long 型の値が関数 `char %s()' から返されています。
* W0277::unsigned long long 型の値が関数 `char %s()' から返されています。
* W0278::unsigned char 型の値が関数 `signed char %s()' から返されています。
* W0279::unsigned short 型の値が関数 `signed char %s()' から返されています。
* W0280::unsigned short 型の値が関数 `signed short %s()' から返されています。
* W0281::unsigned int 型の値が関数 `signed char %s()' から返されています。
* W0282::unsigned int 型の値が関数 `signed short %s()' から返されています。
* W0283::unsigned int 型の値が関数 `signed int %s()' から返されています。
* W0284::unsigned long 型の値が関数 `signed char %s()' から返されています。
* W0285::unsigned long 型の値が関数 `signed short %s()' から返されています。
* W0286::unsigned long 型の値が関数 `signed int %s()' から返されています。
* W0287::unsigned long 型の値が関数 `signed long %s()' から返されています。
* W0288::unsigned long long 型の値が関数 `signed char %s()' から返されています。
* W0289::unsigned long long 型の値が関数 `signed short %s()' から返されています。
* W0290::unsigned long long 型の値が関数 `signed int %s()' から返されています。
* W0291::unsigned long long 型の値が関数 `signed long %s()' から返されています。
* W0292::unsigned long long 型の値が関数 `signed long long %s()' から返されています。
* W0293::signed char 型の値が関数 `unsigned char %s()' から返されています。
* W0294::signed char 型の値が関数 `unsigned short %s()' から返されています。
* W0295::signed char 型の値が関数 `unsigned int %s()' から返されています。
* W0296::signed char 型の値が関数 `unsigned long %s()' から返されています。
* W0297::signed short 型の値が関数 `unsigned char %s()' から返されています。
* W0298::signed short 型の値が関数 `unsigned short %s()' から返されています。
* W0299::signed short 型の値が関数 `unsigned int %s()' から返されています。
* W0300::signed short 型の値が関数 `unsigned long %s()' から返されています。
* W0301::signed int 型の値が関数 `unsigned char %s()' から返されています。
* W0302::signed int 型の値が関数 `unsigned short %s()' から返されています。
* W0303::signed int 型の値が関数 `unsigned int %s()' から返されています。
* W0304::signed int 型の値が関数 `unsigned long %s()' から返されています。
* W0305::signed long 型の値が関数 `unsigned char %s()' から返されています。
* W0306::signed long 型の値が関数 `unsigned short %s()' から返されています。
* W0307::signed long 型の値が関数 `unsigned int %s()' から返されています。
* W0308::signed long 型の値が関数 `unsigned long %s()' から返されています。
* W0309::signed char 型の値が関数 `unsigned long long %s()' から返されています。
* W0310::signed short 型の値が関数 `unsigned long long %s()' から返されています。
* W0311::signed int 型の値が関数 `unsigned long long %s()' から返されています。
* W0312::signed long 型の値が関数 `unsigned long long %s()' から返されています。
* W0313::signed long long 型の値が関数 `unsigned char %s()' から返されています。
* W0314::signed long long 型の値が関数 `unsigned short %s()' から返されています。
* W0315::signed long long 型の値が関数 `unsigned int %s()' から返されています。
* W0316::signed long long 型の値が関数 `unsigned long %s()' から返されています。
* W0317::signed long long 型の値が関数 `unsigned long long %s()' から返されています。
* W0318::unsigned char 型の値が関数 `float %s()' から返されています。
* W0319::unsigned char 型の値が関数 `double %s()' から返されています。
* W0320::unsigned char 型の値が関数 `long double %s()' から返されています。
* W0321::signed char 型の値が関数 `float %s()' から返されています。
* W0322::signed char 型の値が関数 `double %s()' から返されています。
* W0323::signed char 型の値が関数 `long double %s()' から返されています。
* W0324::signed short 型の値が関数 `float %s()' から返されています。
* W0325::signed short 型の値が関数 `double %s()' から返されています。
* W0326::signed short 型の値が関数 `long double %s()' から返されています。
* W0327::unsigned short 型の値が関数 `float %s()' から返されています。
* W0328::unsigned short 型の値が関数 `double %s()' から返されています。
* W0329::unsigned short 型の値が関数 `long double %s()' から返されています。
* W0330::signed int 型の値が関数 `float %s()' から返されています。
* W0331::signed int 型の値が関数 `double %s()' から返されています。
* W0332::signed int 型の値が関数 `long double %s()' から返されています。
* W0333::unsigned int 型の値が関数 `float %s()' から返されています。
* W0334::unsigned int 型の値が関数 `double %s()' から返されています。
* W0335::unsigned int 型の値が関数 `long double %s()' から返されています。
* W0336::signed long 型の値が関数 `float %s()' から返されています。
* W0337::signed long 型の値が関数 `double %s()' から返されています。
* W0338::signed long 型の値が関数 `long double %s()' から返されています。
* W0339::unsigned long 型の値が関数 `float %s()' から返されています。
* W0340::unsigned long 型の値が関数 `double %s()' から返されています。
* W0341::unsigned long 型の値が関数 `long double %s()' から返されています。
* W0342::signed long long 型の値が関数 `float %s()' から返されています。
* W0343::signed long long 型の値が関数 `double %s()' から返されています。
* W0344::signed long long 型の値が関数 `long double %s()' から返されています。
* W0345::unsigned long long 型の値が関数 `float %s()' から返されています。
* W0346::unsigned long long 型の値が関数 `double %s()' から返されています。
* W0347::unsigned long long 型の値が関数 `long double %s()' から返されています。
* W0348::float 型の値が関数 `char %s()' から返されています。
* W0349::float 型の値が関数 `signed char %s()' から返されています。
* W0350::float 型の値が関数 `unsigned char %s()' から返されています。
* W0351::float 型の値が関数 `signed short %s()' から返されています。
* W0352::float 型の値が関数 `unsigned short %s()' から返されています。
* W0353::float 型の値が関数 `signed int %s()' から返されています。
* W0354::float 型の値が関数 `unsigned int %s()' から返されています。
* W0355::float 型の値が関数 `signed long %s()' から返されています。
* W0356::float 型の値が関数 `unsigned long %s()' から返されています。
* W0357::double 型の値が関数 `char %s()' から返されています。
* W0358::double 型の値が関数 `signed char %s()' から返されています。
* W0359::double 型の値が関数 `unsigned char %s()' から返されています。
* W0360::double 型の値が関数 `signed short %s()' から返されています。
* W0361::double 型の値が関数 `unsigned short %s()' から返されています。
* W0362::double 型の値が関数 `signed int %s()' から返されています。
* W0363::double 型の値が関数 `unsigned int %s()' から返されています。
* W0364::double 型の値が関数 `signed long %s()' から返されています。
* W0365::double 型の値が関数 `unsigned long %s()' から返されています。
* W0366::long double 型の値が関数 `char %s()' から返されています。
* W0367::long double 型の値が関数 `signed char %s()' から返されています。
* W0368::long double 型の値が関数 `unsigned char %s()' から返されています。
* W0369::long double 型の値が関数 `signed short %s()' から返されています。
* W0370::long double 型の値が関数 `unsigned short %s()' から返されています。
* W0371::long double 型の値が関数 `signed int %s()' から返されています。
* W0372::long double 型の値が関数 `unsigned int %s()' から返されています。
* W0373::long double 型の値が関数 `signed long %s()' から返されています。
* W0374::long double 型の値が関数 `unsigned long %s()' から返されています。
* W0375::float 型の値が関数 `signed long long %s()' から返されています。
* W0376::float 型の値が関数 `unsigned long long %s()' から返されています。
* W0377::double 型の値が関数 `signed long long %s()' から返されています。
* W0378::double 型の値が関数 `unsigned long long %s()' から返されています。
* W0379::long double 型の値が関数 `signed long long %s()' から返されています。
* W0380::long double 型の値が関数 `unsigned long long %s()' から返されています。
* W0381::signed short 型の値が関数 `signed char %s()' から返されています。
* W0382::unsigned short 型の値が関数 `unsigned char %s()' から返されています。
* W0383::signed int 型の値が関数 `signed char %s()' から返されています。
* W0384::signed int 型の値が関数 `signed short %s()' から返されています。
* W0385::unsigned int 型の値が関数 `unsigned char %s()' から返されています。
* W0386::unsigned int 型の値が関数 `unsigned short %s()' から返されています。
* W0387::signed long 型の値が関数 `signed char %s()' から返されています。
* W0388::signed long 型の値が関数 `signed short %s()' から返されています。
* W0389::signed long 型の値が関数 `signed int %s()' から返されています。
* W0390::unsigned long 型の値が関数 `unsigned char %s()' から返されています。
* W0391::unsigned long 型の値が関数 `unsigned short %s()' から返されています。
* W0392::unsigned long 型の値が関数 `unsigned int %s()' から返されています。
* W0393::signed long long 型の値が関数 `signed char %s()' から返されています。
* W0394::signed long long 型の値が関数 `signed short %s()' から返されています。
* W0395::signed long long 型の値が関数 `signed int %s()' から返されています。
* W0396::signed long long 型の値が関数 `signed long %s()' から返されています。
* W0397::unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
* W0398::unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
* W0399::unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
* W0400::unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
* W0401::unsigned char 型の値が関数 `signed short %s()' から返されています。
* W0402::unsigned char 型の値が関数 `signed int %s()' から返されています。
* W0403::unsigned char 型の値が関数 `signed long %s()' から返されています。
* W0404::unsigned short 型の値が関数 `signed int %s()' から返されています。
* W0405::unsigned short 型の値が関数 `signed long %s()' から返されています。
* W0406::unsigned int 型の値が関数 `signed long %s()' から返されています。
* W0407::unsigned char 型の値が関数 `signed long long %s()' から返されています。
* W0408::unsigned short 型の値が関数 `signed long long %s()' から返されています。
* W0409::unsigned int 型の値が関数 `signed long long %s()' から返されています。
* W0410::unsigned long 型の値が関数 `signed long long %s()' から返されています。
* W0411::列挙体は、最初だけ初期化するか、全てを初期化するか、全く初期化しないかのいずれかにしてください。
* W0413::制御文の本体が `@{@}' で囲まれたブロックになっていません。
* W0414::制御文の本体が同じ行にあり、`@{@}' で囲まれたブロックになっていません。
* W0421::値が NULL になるポインタに対して間接参照が行われています。
* W0422::値が NULL になることがあるポインタに対して間接参照が行われています。
* W0423::値が NULL になるポインタに対して算術演算を行っています。
* W0424::値が NULL になることがあるポインタに対して算術演算を行っています。
* W0425::一つの行に複数の宣言または文が存在します。
* W0431::この行は以前の同じ深さのインデントより左にずれています。
* W0432::この行はプロジェクトのインデントスタイルと合っていません。
* W0440::この閉じカッコ `@}' は、対応する開きカッコ `@{' に合うようなインデントに置かれていません。
* W0441::接尾辞がない整数リテラルの型が、int 型ではありません。
* W0442::関数形式マクロが定義されています。
* W0443::この関数形式マクロは関数で置き換えることができる可能性があります。
* W0444::`#' 演算子と `##' 演算子が一つのマクロ定義内で使われています。
* W0445::複数の `##' 演算子が一つのマクロ定義内で使われています。
* W0446::代入演算の結果値が使われています。
* W0447::カンマ演算子が for 文の制御式以外で使われています。
* W0456::外部結合を持つオブジェクトあるいは関数 `%s' が、ヘッダファイル内で定義されています。
* W0457::関数の宣言あるいは定義で、戻り値型が明示的に定義されていないので、暗黙的に int 型と定義されます。
* W0458::オブジェクトの宣言あるいは定義で、型が明示的に定義されていないので、暗黙的に int 型と定義されます。
* W0459::変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
* W0460::変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
* W0461::値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
* W0462::値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
* W0477::マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
* W0478::このマクロは、認識不可能なコードの断片を定義しています。
* W0479::このマクロ定義は typedef 宣言に置換することができます。
* W0480::このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
* W0481::このマクロは、`@{@}' で囲まれたブロックを定義しています。
* W0482::このマクロは、いずれかの型指定子を定義しています。
* W0483::このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
* W0488::関数呼び出し `()'、配列添字演算 `[]'、あるいは構造体/共用体メンバ演算 `->' または `.' が、&& あるいは || と共に使われています。`()' で結合を明確にすることを勧めます。
* W0489::単項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
* W0490::二項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
* W0491::同じ識別子名 `%s' は他の名前空間内の宣言でも使われています。
* W0492::同じ識別子名 `%s' が構造体/共用体のメンバの他に、ラベル、タグ、または通常の識別子としても使われています。
* W0493::構造体あるいは共用体の値を関数の実引数として渡しています。
* W0495::演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
* W0496::三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
* W0497::シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
* W0498::二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
* W0499::+ - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
* W0500::二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
* W0501::三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
* W0502::+ - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
* W0508::`&&' あるいは `||' 演算子の右オペランドに副作用があります。
* W0511::C++ コメント `//' が使われています。
* W0512::`++' あるいは `--' 演算子の結果が式の中で使われています。
* W0525::1 ビットの名前が付いたフィールドが符号付き型として宣言されています。
* W0528::このマクロは、8 進数定数を定義しています。
* W0529::8 進数リテラルが使われています。
* W0530::文字定数または文字列リテラルの中で、8 進拡張表記が使われています。
* W0532::switch 文の case 節、default 節から出るために break 文が使われていますが、case 節の末尾に記述されていません。
* W0534::制御変数 `%s' は、この for 文制御式で初期化されていません。
* W0535::for 文の制御式の中にカンマ演算子が使われています。
* W0538::この default ラベルは、switch 文内の最後のラベルではありません。
* W0540::空の仮引数並びの関数が定義されています。`void' が省略されています。
* W0541::マクロで隠蔽されないインラインアセンブリコードです。
* W0542::関数宣言の仮引数の一部にのみ識別子が存在します。
* W0543::この関数宣言における仮引数の識別子は、以前の宣言の仮引数の識別子と異なります。
* W0544::関数宣言の仮引数の識別子と関数ポインタの宣言の仮引数の識別子が異なります。
* W0546::switch 文の case ラベルあるいは default ラベルが、ネストされたブロックの中に存在します。
* W0549::マクロの仮引数が `()' で囲まれていません。
* W0551::共用体型指定子が定義されています。
* W0552::共用体型のオブジェクトが定義されています。
* W0553::関数を指すポインタが、異なる関数ポインタ型へキャストされています。
* W0554::`#pragma' の実引数 `%s' は認識できません。この `#pragma' 指令は無視されました。
* W0555::この関数はプロジェクト中で間接的に再帰呼び出しされています。
* W0556::この呼び出しを含む関数は、再帰呼び出しされています。
* W0559::`!' 演算子のオペランドが算術演算あるいはビット演算の式になっています。
* W0560::`~' 演算子のオペランドがブール型式になっています。
* W0561::`*p++' の意味は、`(*p)++' ではなく、`*(p++)' です。`*' 演算子は冗長です。
* W0562::初期化子の中に余分な `@{@}' があります。
* W0563::このブロックの外側からラベル `%s' へジャンプした場合、ローカル変数は初期化されません。
* W0564::この goto 文がラベル `%s' へジャンプした場合、ローカル変数は初期化されません。
* W0565::汎整数型を volatile ポインタ型(あるいはその逆)へキャストしています。
* W0566::汎整数型を関数ポインタ型(またはその逆)へキャストしています。
* W0567::汎整数型をオブジェクトを指すポインタ(あるいはその逆)へキャストしています。
* W0568::符号付き定数式の値を左シフト演算した結果は、未定義になります。
* W0569::符号付きの式の値を左シフト演算した結果は、未定義になります。
* W0570::符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
* W0571::符号付きデータの右シフト演算には、処理系によって論理シフトと算術シフトの両方の可能性があります。
* W0572::符号付きのデータに対するビット演算は処理系定義の結果になります。
* W0573::`[]' 内の走査セットの `-' 文字は、処理系定義になります。
* W0574::基本ソース文字集合に含まれない文字が、文字定数の中で使われています。
* W0575::基本ソース文字集合に含まれない文字が、文字列リテラルの中で使われています。
* W0576::基本ソース文字集合に含まれない文字が、ソースファイル `%s' のコメントの中で使われています。
* W0577::基本ソース文字集合に含まれない文字が、ソースファイル `%s' のこの前処理指令の中で使われています。
* W0578::暗黙的に汎整数型 `%s' の複合式からより大きな型 `%s' に型変換されています。
* W0579::汎整数型 `%s' の複合式を、より大きな型 `%s' にキャストしています。
* W0580::ローカルな静的変数のアドレスが、より長い有効範囲を持つポインタに代入されています。
* W0581::実引数の個数か型が、この関数の以前の使用時と異なります。
* W0582::実引数の個数か型が、この後で見つかる関数プロトタイプ宣言と異なります。
* W0583::実引数の個数か型が、この後で見つかる関数定義と異なります。
* W0584::%s 番目の実引数の型が、関数定義の中の仮引数の型と異なります。
* W0585::制御変数 `%s' はインクリメント式に現れません。
* W0586::typedef`%s' が二つ以上の場所で宣言されています。
* W0589::オブジェクト `%s' は、定義されている翻訳単位の内の、関数 `%s' のみから参照されています。
* W0591::関数 `%s' は、定義されている翻訳単位の内でのみ参照されています。
* W0593::オブジェクト `%s' は、定義されている翻訳単位の中でのみ参照されています。
* W0597::副作用完了点の間で `%s' が二回以上変更されています。評価順序は未定義です。
* W0598::副作用完了点の間で `%s' が二回以上変更される可能性があります。評価順序は未定義です。
* W0599::副作用完了点の間で `%s' が変えられ、参照されています。評価順序は未定義です。
* W0600::副作用完了点の間で `%s' が変えられ、参照される可能性があります。評価順序は未定義です。
* W0605::繰り返し文を終了させる目的で、break 文が二つ以上使用されています。
* W0606::共用体に浮動小数点型のメンバがあります。
* W0607::値が負になる整数式が符号無し型に変換されています。
* W0608::値が負になることがありうる整数式が符号無し型に変換されています。
* W0609::この論理演算の結果は常に真になります。
* W0610::この論理演算の結果は常に偽になります。
* W0611::この繰り返し文の制御式の値は常に真です。
* W0612::この if 条件式の値は常に真です。
* W0613::この制御式の値は常に偽になります。
* W0614::この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
* W0622::関数がブロックスコープ内で宣言されています。
* W0623::外部結合のオブジェクトが、ブロックスコープ内で宣言されています。
* W0624::#define あるいは #undef がブロックの中に存在します。
* W0625::外部結合の定義または宣言の中で `%s' が使われていますが、その typedef がヘッダファイルの中で宣言されていません。
* W0626::ワイド文字またはワイド文字列リテラルが使われています。
* W0627::一行に、空文(`;' だけの文)が、他のコードの後にあります。
* W0628::関数 `%s' が定義されていますが、このプロジェクトでは使われていません。
* W0629::static 関数 `%s()' は、この翻訳単位の中で使われていません。
* W0632::`#include <%s>' の中で ' や " 文字を使うと、未定義の動作になります。
* W0633::`#include "%s"' の中で ' 文字を使うと、未定義の動作になります。
* W0634::`#include' 行の中で `\' を使っています。パス区切り文字としては `/' を勧めます。
* W0635::%s 番目の変換指定子と、対応する実引数の型が合いません。
* W0636::%s 番目の変換指定子に対応する実引数が存在しません。
* W0637::関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
* W0638::この関数呼び出しには、少なくとも一つの実引数が必要です。
* W0639::%s 番目の変換指定子と、対応する実引数の型が合いません。
* W0640::scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
* W0641::浮動小数点数型をオブジェクトへのポインタ(あるいはその逆)へキャストしています。
* W0642::register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。
* W0643::このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。
* W0644::void 式の値を使用しようとしています。void 式は値をもちません。
* W0645::仮引数の型には、void 型を使うことができません。
* W0646::通常の文字列リテラルとワイド文字列リテラルが隣接しています。
* W0649::シフト演算子の右オペランドの値が負の定数です。結果は未定義になります。
* W0650::シフト演算子の右オペランドの値が左オペランドの型 `%s' で表されるビット数に対して大きすぎます。結果は未定義になります。
* W0653::配列、構造体あるいは共用体の初期値が `@{@}' で囲まれていません。
* W0654::構造体あるいは共用体の初期化子は、同じ構造体型あるいは共用体型の値でなければなりません。
* W0655::サイズが未定義のビットフィールド式です。
* W0656::%s 番目の変換指定子は、ISO C 標準規格でサポートされません。
* W0657::%s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
* W0658::%s 番目の変換指定子 `o' に無効なフラグが使われています。
* W0659::%s 番目の変換指定子 `u' に無効なフラグが使われています。
* W0660::%s 番目の変換指定子 `x' に無効なフラグが使われています。
* W0661::%s 番目の変換指定子 `X' に無効なフラグが使われています。
* W0662::%s 番目の変換指定子 `f' に無効なフラグが使われています。
* W0663::%s 番目の変換指定子 `e' に無効なフラグが使われています。
* W0664::%s 番目の変換指定子 `E' に無効なフラグが使われています。
* W0665::%s 番目の変換指定子 `g' に無効なフラグが使われています。
* W0666::%s 番目の変換指定子 `G' に無効なフラグが使われています。
* W0667::%s 番目の変換指定子 `c' に無効なフラグが使われています。
* W0668::%s 番目の変換指定子 `%' に無効なフラグが使われています。
* W0669::%s 番目の変換指定子 `s' に無効なフラグが使われています。
* W0670::%s 番目の変換指定子 `n' に無効なフラグが使われています。
* W0671::%s 番目の変換指定子 `p' に無効なフラグが使われています。
* W0672::%s 番目に無効な変換指定子が使われています。
* W0673::%s 番目の変換指定子は、ISO C 標準規格でサポートされません。
* W0674::%s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
* W0675::%s 番目の変換指定子 `o' に無効なフラグが使われています。
* W0676::%s 番目の変換指定子 `u' に無効なフラグが使われています。
* W0677::%s 番目の変換指定子 `x/X' に無効なフラグが使われています。
* W0678::%s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
* W0679::%s 番目の変換指定子 `s' に無効なフラグが使われています。
* W0680::%s 番目の変換指定子 `p' に無効なフラグが使われています。
* W0681::%s 番目の変換指定子 `%' に無効なフラグが使われています。
* W0682::%s 番目の変換指定子 `[' に無効なフラグが使われています。
* W0683::%s 番目の変換指定子 `c' に無効なフラグが使われています。
* W0684::%s 番目に無効な変換指定子が使われています。
* W0685::`[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
* W0686::走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
* W0687::defined 演算子を削除する目的で #undef を使っています。
* W0688::#line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。
* W0689::#line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。
* W0690::#line 指令の後に行番号が記述されていません。
* W0691::`##' 演算子の結果が有効な前処理字句ではありません。
* W0692::関数形式マクロ `%s' に実引数が与えられていません。
* W0693::関数形式マクロがその定義よりも少ない実引数で呼び出されています。
* W0694::`assert' という名称の関数を呼び出す目的で、assert マクロが抑制されています。未定義の結果になります。
* W0695::assert マクロを #undef してその名前の関数を呼び出しできるようにすると、未定義の結果になります。
* W0696::この `#if...' で使われているマクロ `%s' は定義されていません。
* W0697::戻り値を返すように定義された関数 `%s' の中に、暗黙の `return;' 文で終了するパスが存在します。
* W0698::戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。
* W0699::関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、return 文に値を戻すための式が記述されていません。
* W0700::関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、値を戻す return 文がありません。
* W0703::タグ `%s' がより広い有効範囲をもつ同じ識別子の宣言を隠しています。
* W0704::この `%s' の宣言は、より広い有効範囲をもつ同じ識別子の宣言を隠しています。
* W0705::配列の添字が領域外を指すことがあります。
* W0707::配列の添字が領域外を指す定数です。
* W0708::for 文の制御変数 `%s' は繰り返し文本体の中で値を変えられています。
* W0711::関係演算子の右側のオペランドが実質的なブール型の式です。
* W0712::関係演算子の左側のオペランドが実質的なブール型の式です。
* W0713::関係演算子の両側のオペランドが実質的なブール型の式です。
* W0714::`&' 演算子の両側のオペランドが実質的なブール型の式です。
* W0715::`|' 演算子の両側のオペランドが実質的なブール型の式です。
* W0716::ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。
* W0717::ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
* W0718::ビット演算子あるいは算術演算子の右側のオペランドが実質的なブール型の式です。
* W0719::シフト演算子の右オペランドが、潜在型 `%s' のビット幅以上の定数値です。
* W0720::浮動小数点型の値が変換先の型の範囲に入りきりません。
* W0721::この汎整数型は、ポインタの値を保持するのに十分な大きさをもちません。
* W0722::符号付きの式の値がオーバーフローしています。
* W0723::符号付きの式の値がオーバーフローする可能性があります。
* W0724::条件付きインクルード指令によって、認識できない前処理指令が無視されました。
* W0726::修飾子付き void 型の戻り値が定義された関数 `%s()' の中で、`return 式;' が見つかりました。
* W0727::列挙型にない値を使っています。
* W0728::列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。
* W0729::列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。
* W0730::列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。
* W0731::switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。
* W0732::`&&' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
* W0733::`||' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
* W0734::論理演算子の左側のオペランドがビット演算の式あるいは算術式です。
* W0735::論理演算子の右側のオペランドがビット演算の式あるいは算術式です。
* W0736::ファイルスコープで宣言された静的変数 `%s' は 1 つの関数内でしか読み書きされていません。
* W0737::`enum %s' の内容が不明です。列挙体タグが内容を指定せずに宣言されています。
* W0738::正の整数定数の値がより小さな符号無し型への暗黙の型変換を行ったため、切り捨てられます。
* W0739::定数式における符号無し減算の結果が負になりました。
* W0740::定数式における符号無し加算の結果が最大値を超えました。
* W0741::定数式における符号無し乗算の結果が最大値を超えました。
* W0742::負の整数定数式が符号無し型に変換されています。
* W0743::整数定数式の値は、変換先の符号付きの結果の型で表現できる範囲を超えています。
* W0744::この制御式の値は偽になる定数のため、制御文本体は実行されません。
* W0745::配列の添字が、領域外を指しています。
* W0747::暗黙的に signed short 型から signed char 型に型変換されています。
* W0748::暗黙的に unsigned short 型から unsigned char 型に型変換されています。
* W0749::暗黙的に signed int 型から signed char 型に型変換されています。
* W0750::暗黙的に signed int 型から signed short 型に型変換されています。
* W0751::暗黙的に unsigned int 型から unsigned char 型に型変換されています。
* W0752::暗黙的に unsigned int 型から unsigned short 型に型変換されています。
* W0753::暗黙的に signed long 型から signed char 型に型変換されています。
* W0754::暗黙的に signed long 型から signed short 型に型変換されています。
* W0755::暗黙的に signed long 型から signed int 型に型変換されています。
* W0756::暗黙的に unsigned long 型から unsigned char 型に型変換されています。
* W0757::暗黙的に unsigned long 型から unsigned short 型に型変換されています。
* W0758::暗黙的に unsigned long 型から unsigned int 型に型変換されています。
* W0759::暗黙的に signed long long 型から signed char 型に型変換されています。
* W0760::暗黙的に signed long long 型から signed short 型に型変換されています。
* W0761::暗黙的に signed long long 型から signed int 型に型変換されています。
* W0762::暗黙的に signed long long 型から signed long 型に型変換されています。
* W0763::暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
* W0764::暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
* W0765::暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
* W0766::暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
* W0767::暗黙的に double 型から float 型に型変換されています。
* W0768::暗黙的に long double 型から float 型に型変換されています。
* W0769::暗黙的に long double 型から double 型に型変換されています。
* W0770::外部結合をもつ識別子 `%s' の宣言が、二つ以上存在しています。
* W0771::グローバルな識別子 `%s' が、二つ以上のファイルで宣言されています。
* W0774::double 型の値が関数 `float %s()' から返されています。
* W0775::long double 型の値が関数 `float %s()' から返されています。
* W0776::long double 型の値が関数 `double %s()' から返されています。
* W0777::暗黙的に float 型の複合式から double 型に型変換されています。
* W0778::暗黙的に float 型の複合式から long double 型に型変換されています。
* W0779::暗黙的に double 型の複合式から long double 型に型変換されています。
* W0780::定数式における符号無し左シフト演算 `<<' は、非ゼロの上位ビットを切り詰めます。
* W0781::この switch 文にはパスが 1 つしかありません。この switch 文は冗長です。
* W0783::不完全型を指すポインタを含むキャストが行われています。このプログラムは移植性がありません。
* W0784::非標準の拡張表記が使われています。
* W0785::このタグ `%s' の宣言は、以前の宣言と異なります。
* W0786::int、signed int、あるいは unsigned int 以外の型をもつビットフィールドは、ISO C 標準規格ではサポートされません。
* W0787::`%s' の型が、以前の異なるスコープで宣言された型と異なります。
* W0788::`%s' の型が、以前の同じスコープ内で宣言された型と異なります。
* W0789::`%s' の型が、以前のより広いスコープで宣言された型と異なります。
* W0790::グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。
* W0791::グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。
* W0792::浮動小数点数型を関数ポインタ(あるいはその逆)へキャストしています。
* W0793::関数ポインタをオブジェクトを指すポインタ(あるいはその逆)へキャストしています。
* W0794::符号付きのオペランドを左シフト演算しています。
* W0795::関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも少ないです。
* W0796::関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも多いです。
* W0797::関数呼び出しの実引数の数が、関数定義における仮引数の数とは異なります。
* W0798::不完全な共用体オブジェクトの値を使ってはいけません。
* W0799::不完全な構造体オブジェクトの値を使ってはいけません。
* W0800::`%s' は結合をもたない不完全型です。これは未定義です。
* W0801::この構造体あるいは共用体には名前付きのメンバがありません。
* W0802::`#include' 前処理指令の後が、<ファイル名> あるいは " ファイル名 " 形式のどちらでもありません。
* W0803::関数形式マクロの実引数の中に、前処理指令が記述されています。
* W0804::defined 構文が、`defined(識別子)' あるいは `defined 識別子' のどちらでもありません。
* W0805::`defined' に、実引数となる識別子がありません。
* W0806::`defined' という名称のマクロを定義しようとしています。
* W0807::事前定義のマクロ名 `%s' を削除しようとしています。
* W0808::事前定義のマクロ名 `%s' を再定義しようとしています。
* W0809::識別子 `%s' はライブラリで予約済みです。
* W0810::この `if-if-else' 文の構造をより明確にするためには `@{@}' が必要です。
* W0811::このマクロの展開結果の、`defined' トークンは、許容されません。
* W0827::ネストされた構造体の初期値の各要素が `@{@}' で囲まれていません。
* W0828::ネストされた配列の初期値の各要素が `@{@}' で囲まれていません。
* W0830::列挙子並びの末尾にカンマ `,' があります。
* W0831::これはインラインアセンブリ用の言語拡張です。#asm と #endasm の間は無視します。
* W0832::インラインアセンブリ構文を使っています。これは言語拡張です。このコードは無視します。
* W0833::接尾語 LL を使っています。
* W0834::long long 型を使っています。
* W0835::可変引数を受け取るマクロが定義されています。
* W0947::文字列リテラルが直接使われています。
* W0948::文字定数 %s が直接使われています。
* W0949::ビットフィールドのサイズ定義に、数値 `%s' が直接使われています。
* W0950::配列のサイズ定義に、数値 `%s' が直接使われています。
* W1026::%s 番目の実引数がオブジェクト型ではありません。
* W1027::配列の基本型が関数型です。これは意味がありません。
* W1028::配列の基本型がサイズ不明の配列です。不完全型の配列は構築できません。
* W1029::配列の基本型が内容不明の構造体あるいは共用体です。不完全型の配列は構築できません。
* W1030::ラベル `%s' がこの関数の中で二回以上使われています。
* W1031::オブジェクト `%s' は、外部結合と内部結合の両方で宣言されています。その動作は未定義です。
* W1032::内部結合をもつ変数 '%s' の仮定義は、不完全型ではいけません。
* W1033::関数の戻り値の型に volatile あるいは const 修飾子を使っています。その動作は未定義です。
* W1034::ブロックスコープで、関数 `%s()' に static 記憶域クラス指定子を使って宣言されています。この用法は意味がありません。
* W1035::`%s' は typedef として宣言されています。明示的な型指定子を使わずに、より内側のスコープで再宣言することはできません。
* W1036::`%s' は typedef として宣言されています。明示的な型指定子を使わずに、構造体または共用体のメンバとして再宣言することはできません。
* W1037::外部結合をもつ `%s' が、二つ以上宣言されていますが互換性がありません。
* W1039::%s 番目の変換指定子に `ll' が使われています。
* W1040::前処理指令の後に認識できない文字列が記述されています。
* W1041::`%s' は、ISO C 標準規格の正式な前処理指令ではありません。
* W1042::前処理指令の中で sizeof 演算子を使っています。これは言語拡張です。
* W1043::`@@ address' は、ISO C 標準規格ではサポートされていません。言語拡張と見なします。
* W1045::この `@@ word' 構文は無視されます。
* W1046::`\' と改行の間にある空白文字類が無視されています。
* W1047::構造体、共用体、あるいは配列の初期化子がリテラルではありません。
* W1048::マルチバイト文字リテラルは処理系定義の値になります。
* W1049::この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
* W1050::この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
* W1051::符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込みます。
* W1052::符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込むことがあります。
* W1053::仮引数が列挙型である関数の実引数に数値定数が渡されています。
* W1054::列挙型に、列挙型ではない式が代入されています。
* W1055::戻り値が列挙型の関数から、列挙型ではない式が返されています。
* W1056::仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
* W1057::列挙型に、異なる列挙型のオブジェクトが代入されています。
* W1058::戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
* W1059::仮引数が列挙型でない関数の実引数に列挙型が渡されています。
* W1060::戻り値が列挙型でない関数から、列挙型が返されています。
* W1061::仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
* W1062::異なる型の非定数式の値が列挙型オブジェクトに代入されています。
* W1063::戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
* W1064::列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
* W1065::列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
* W1066::明示的に float 型の複合式の値を double 型に変換しています。
* W1067::明示的に float 型の複合式の値を long double 型に変換しています。
* W1068::明示的に double 型の複合式の値を long double 型に変換しています。
* W1069::この `if-else-if' 文には、末尾の `else' 節がありません。
* W1070::この `switch' 文には実行経路が 2 つしか無いため、`if-else' 文に変換可能です。
* W1071::関数 `%s' には複数の終了点があります。
* W1072::`goto' 文を使用しています。
* W1073::関数 `%s' の戻り値を破棄しています。
* W1074::`sizeof' 演算子のオペランドは実行されないため、副作用が発生しません。
* W1075::`%s' は以前に内部結合として宣言されていますが、この宣言には `static' がありません。
* W1076::関数 `%s' は内部結合を持ちますが、事前に内部結合として宣言していません。
* W1077::サイズが省略された配列を宣言しています。
* W9001::この文には制御が到達しません。
* W9002::ファイルの末尾に改行文字がありません。
* W9003::暗黙的に `%s' 型のオブジェクトが `%s' 型のオブジェクトに変換されています。
* C0001::この識別名 `%s' で警告を検知しました。
* C1000::次の実行パスで警告を検知しました。
* C1001::この制御式を真として評価しました。
* C1002::この制御式を偽として評価しました。
* C1003::ここで該当変数が初期値を指定せずに定義されています。
* C1004::ここで該当変数に NULL の値を割り当てました。
* C1005::ここで該当変数に NULL の可能性がある値を割り当てました。
* C1006::ここで該当変数に値を割り当てました。
@end menu

@node X0001
@section X0001
@cindex X0001

@subsection メッセージ本文

不明な例外条件 `%s' を検出しました。

@subsection 内容

AdLint 内部でエラーが発生したことを示します。

このメッセージが出力された場合、該当ソースファイル、@ref{Traits, 特性ファイル}
、@ref{Message File, メッセージファイル}、ログファイルとともに AdLint 開発チー
  ムへご報告いただければ、AdLint の品質向上につなげることができます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node X0002
@section X0002
@cindex X0002

@subsection メッセージ本文

不正なメッセージ ID `%s' を検出しました。

@subsection 内容

AdLint が内部で使用するメッセージカタログファイルが壊れている可能性があります。

AdLint を再インストールしても問題が解決されない場合は、AdLint 開発チームへご報
告ください。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node X0003
@section X0003
@cindex X0003

@subsection メッセージ本文

回復不能なエラーにより解析処理を中断しました。詳細は `%s' 及び `%s' を確認して下さい。

@subsection 内容

ヘッダファイルが見つからない、ソースファイルの構文解析ができないなど、AdLint が
解析を続行できないエラーを検知した場合に出力されます。

この問題の多くは、@ref{Traits, 特性ファイル}の内容を見直すことで解決できます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node X0004
@section X0004
@cindex X0004

@subsection メッセージ本文

不正なメッセージフォーマット `%s' を検出しました。

@subsection 内容

AdLint が内部で使用するメッセージカタログファイルが壊れている可能性があります。

AdLint を再インストールしても問題が解決されない場合は、AdLint 開発チームへご報
告ください。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0004
@section E0004
@cindex E0004

@subsection メッセージ本文

対応する @code{#endif} 行がありません。

@subsection 内容

@code{#if}、@code{#ifdef}、@code{#ifndef} ディレクティブに対応する
@code{#endif} ディレクティブが見つからない場合に出力されます。

@subsection サンプルコード

@verbatim
#if DEBUG
  int i = 0;
#else
  int i = 1;
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0007
@section E0007
@cindex E0007

@subsection メッセージ本文

条件式中のトークン `%s' で構文エラーを検出しました。条件式を偽として評価します。

@subsection 内容

@code{#if}、@code{#elif} ディレクティブの条件式を評価中に構文エラーを検知した場
合に出力します。

このメッセージが出力された場合、該当する条件式は偽として評価されます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0008
@section E0008
@cindex E0008

@subsection メッセージ本文

トークン `%s' で構文エラーを検知しました。

@subsection 内容

このメッセージはプリプロセス後のソースファイルを構文解析できない場合に出力され
ます。

ビルドに使用するコンパイラ独自の拡張機能を使用している場合は、
@ref{Traits, 特性ファイル}で該当するトークン列を削除するように指定すれば解決で
きます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0009
@section E0009
@cindex E0009

@subsection メッセージ本文

ヘッダファイル <%s> が見つかりません。

@subsection 内容

@code{#include <...>} ディレクティブでヘッダファイルをインクルードしていますが
、@ref{Traits, 特性ファイル}で指定したインクルードパス中に該当するヘッダファイ
ルが存在しない場合に出力されます。

@ref{Traits, 特性ファイル}のインクルードパス設定を見直すことで解決できます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0010
@section E0010
@cindex E0010

@subsection メッセージ本文

ヘッダファイル "%s" が見つかりません。

@subsection 内容

@code{#include "..."} ディレクティブでヘッダファイルをインクルードしていますが
、@ref{Traits, 特性ファイル}で指定したインクルードパス中に該当するヘッダファイ
ルが存在しない場合に出力されます。

@ref{Traits, 特性ファイル}のインクルードパス設定を見直すことで解決できます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0013
@section E0013
@cindex E0013

@subsection メッセージ本文

式に文を含めることはできません。

@subsection 内容

式の中に文を記述する GCC 拡張機能 (Statement Exprs) を使用した場合に出力されます
。

@subsection サンプルコード

@verbatim
#define maxint(a, b) ({int _a = (a), _b = (b); _a > _b ? _a : _b; })
int i = maxint(1, 2); /* E0013 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0014
@section E0014
@cindex E0014

@subsection メッセージ本文

ラベルのアドレスを取得するための && 単項演算子は GCC 独自の拡張機能です。

@subsection 内容

ラベルを値として使用する GCC 拡張機能 (Labels as Values) を使用した場合に出力され
ます。

@subsection サンプルコード

@verbatim
void *label_ptr = &&foo; /* E0014 */
goto *label_ptr; /* E0015 */
foo:;
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{E0015} ラベルのアドレスを指定した goto 文は GCC 独自の拡張機能です。
@end itemize

@subsection 対応バージョン

1.0.0

@node E0015
@section E0015
@cindex E0015

@subsection メッセージ本文

ラベルのアドレスを指定した goto 文は GCC 独自の拡張機能です。

@subsection 内容

ラベルを値として使用する GCC 拡張機能 (Labels as Values) を使用した場合に出力され
ます。

@subsection サンプルコード

@verbatim
void *label_ptr = &&foo; /* E0014 */
goto *label_ptr; /* E0015 */
foo:;
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{E0014} ラベルのアドレスを取得するための && 単項演算子は GCC 独自の拡張機能です。
@end itemize

@subsection 対応バージョン

1.0.0

@node E0016
@section E0016
@cindex E0016

@subsection メッセージ本文

終了しないコメントブロックが見つかりました。

@subsection 内容

@code{/*} で開始するブロックコメントが @code{*/} で終了されない状態で、翻訳単位
の末尾に到達した場合に出力されます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node E0018
@section E0018
@cindex E0018

@subsection メッセージ本文

大域スコープに余分なセミコロンが見つかりました。

@subsection 内容

大域スコープ中にセミコロンが単独で現れた場合に出力されます。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    return i + 1;
}; /* E0018 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

3.2.6

@node W0001
@section W0001
@cindex W0001

@subsection メッセージ本文

括弧 `()' のネストの深さが 32 を超えています。このプログラムは、ISO C90 標準規格に厳密に合致していません。

@subsection 内容

括弧の入れ子レベルは最大 32 までと ISO C 標準規格で定められています。この水準を超えると移植性を損ないます。

@subsection サンプルコード

@verbatim
int a = 10;
int b = 20;
int c = (((((((((((((((((((((((((((((((((a + b))))))))))))))))))))))))))))))))); /* W0001 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0002
@section W0002
@cindex W0002

@subsection メッセージ本文

関数 `%s()' の定義において、識別子と仮引数宣言を分けて記述するのは、古いスタイルです。

@subsection 内容

非 ANSI の関数定義は、いまや多くのエンジニアにとって馴染みがないものといえます。そのようなエンジニアにとって、解析性が低くなります。

@subsection サンプルコード

@verbatim
/* function definition in K&R style */
int func(arg) /* W0002 */
char arg;
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0003
@section W0003
@cindex W0003

@subsection メッセージ本文

この switch 文には default ラベルが含まれていません。

@subsection 内容

@code{default} 条件を持たない @code{switch} 文では、@code{case} ラベルの条件に該当しない場合に何も処理が行われないことになり、多くの場合、プログラマの意図しない動作になります。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j;

    switch(i) { /* W0003 */
    case 1:
        j = 1;
        break;
    case 2:
        j = 2;
        break;
    case 3:
        j = 3;
        break;
    }

    return j;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0007
@section W0007
@cindex W0007

@subsection メッセージ本文

直前の case 節あるいは default 節の末尾に、break 文または return 文がありません。

@subsection 内容

@code{case} ラベルでは @code{break} 文や @code{return} 文を書かない限り、次の @code{case} ラベルへフォールスルーすることになりますが、
このようなフォールスルーは気づきにくいという点でコードの保守性を低下させます。

@subsection サンプルコード

@verbatim
int value;
int number;
switch (number) {
case 1:
    value = 1;
    break;
case 2:
    value = 2;
case 3: /* W0007 */
    value = 3;
    break;
default:
    value = 0;
    break;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0010
@section W0010
@cindex W0010

@subsection メッセージ本文

この三項演算子(条件演算子)のオペランドに副作用があります。

@subsection 内容

副作用を生じる条件演算子を使用すると、条件によって副作用の内容が変わり、コードが複雑になります。

@subsection サンプルコード

@verbatim
x = (a > 0) ? b++ : b--; /* W0010 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0013
@section W0013
@cindex W0013

@subsection メッセージ本文

繰り返し文の中で、continue 文が使用されています。

@subsection 内容

@code{continue} 文はしばしば、構造化定理(「順次」「反復」「分岐」)に基づいたコードの構造を壊してしまいます。影響はループ文の中に限定されるため、
@code{goto} 文ほど大きなネガティブインパクトはありませんが、利用の際は注意が必要です。

@subsection サンプルコード

@verbatim
static void foo(void)
{
    int i;
    int j;

    i++;
    for (i = 1, j = 0; i < 20; i++) {
        j += 2;
        if ((j % i) == 3) {
            continue;  /* W0013 */
        }
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0016
@section W0016
@cindex W0016

@subsection メッセージ本文

変換指定子のフィールド幅が 509 文字を超えています。

@subsection 内容

@code{printf()} 関数における変換指定子のフィールド幅は最大 509 文字までと ISO C 標準規格で定められています。この水準を超えると移植性を損ないます。

@subsection サンプルコード

@verbatim
printf("%510d\n", a); /* W0016 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0017} 変換指定子のフィールド幅が 509 文字を超えています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0017
@section W0017
@cindex W0017

@subsection メッセージ本文

変換指定子のフィールド幅が 509 文字を超えています。

@subsection 内容

@code{scanf()} 関数における変換指定子のフィールド幅は最大 509 文字までと ISO C 標準規格で定められています。この水準を超えると移植性を損ないます。

@subsection サンプルコード

@verbatim
scanf("%510d", &a); /* W0017 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0016} 変換指定子のフィールド幅が 509 文字を超えています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0018
@section W0018
@cindex W0018

@subsection メッセージ本文

変換指定子の精度幅が 509 文字を超えています。

@subsection 内容

変換指定子の精度幅は最大 509 文字までと ISO C 標準規格で定められています。この水準を超えると移植性を損ないます。

@subsection サンプルコード

@verbatim
printf("%.510f\n", a); /* W0018 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0019
@section W0019
@cindex W0019

@subsection メッセージ本文

このポインタキャストは、const 修飾を削除しているので危険です。

@subsection 内容

@code{const} 修飾された変数は値が変更されないことを前提として使用されます。
そのような変数に @code{const} が失われるキャストが実行されると前提が崩れてしまい、意図しない結果を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *pa;
const int *pb;
pa = (int *) pb; /* W0019 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0021
@section W0021
@cindex W0021

@subsection メッセージ本文

このポインタキャストは、volatile 修飾を削除しているので危険です。

@subsection 内容

@code{volatile} 修飾された変数は最適化の対象外にしたいという意図が含まれています。
そのような変数に @code{volatile} が失われるキャストが実行されると意図に反して最適化が行われてしまい、
意図しない結果を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *pa;
volatile int *pb;
pa = (int *) pb; /* W0021 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0023
@section W0023
@cindex W0023

@subsection メッセージ本文

ポインタ型の変数に対して算術演算が行われています。

@subsection 内容

ポインタ演算により意図しないアドレスを使用する可能性が高くなります。

@subsection サンプルコード

@verbatim
int *p;
int *q;
long r = p + r; /* W0023 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0024} ポインタ型の変数に対してインクリメントまたはデクリメントが行われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0024
@section W0024
@cindex W0024

@subsection メッセージ本文

ポインタ型の変数に対してインクリメントまたはデクリメントが行われています。

@subsection 内容

ポインタ演算により意図しないアドレスを使用する可能性が高くなります。

@subsection サンプルコード

@verbatim
int *p;
p++; /* W0024 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0023} ポインタ型の変数に対して算術演算が行われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0025
@section W0025
@cindex W0025

@subsection メッセージ本文

`%s' は、既にこのファイルから直接インクルードされています。

@subsection 内容

重複したインクルードは意味のない記述です。意味のない不要な記述がコード中にあることで解析性が低下します。

@subsection サンプルコード

@verbatim
#include "test.h"
#include "test2.h"
#include "test.h" /* W0025 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0026} `%s' は、既にこのファイルから間接的にインクルードされています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0026
@section W0026
@cindex W0026

@subsection メッセージ本文

`%s' は、既にこのファイルから間接的にインクルードされています。

@subsection 内容

重複したインクルードは意味のない記述です。意味のない不要な記述がコード中にあることで解析性が低下します。

@subsection サンプルコード

@file{test.h}
@verbatim
#include "test2.h"
@end verbatim

@file{test.c}
@verbatim
#include "test.h"
#include "test2.h" /* W0026 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0025} `%s' は、既にこのファイルから直接インクルードされています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0027
@section W0027
@cindex W0027

@subsection メッセージ本文

ポインタ型の変数に対して比較演算が行われています。

@subsection 内容

比較演算子を用いて異なる配列のポインタや異なる構造体のポインタと比較する動作は ISO C90 で未定義のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *p;
int *q;
if (p < q) { /* W0027 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0028
@section W0028
@cindex W0028

@subsection メッセージ本文

NULL ポインタに対して間接参照が行われています。

@subsection 内容

@code{NULL} ポインタが指す値を間接参照する動作は ISO C90 で未定義のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int i = *(int *) NULL; /* W0028 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0030
@section W0030
@cindex W0030

@subsection メッセージ本文

NULL ポインタに対して算術演算が行われています。

@subsection 内容

@code{NULL} ポインタに対する算術演算は ISO C90 で未定義のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *p;
p = (int *) NULL + 1; /* W0030 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0031
@section W0031
@cindex W0031

@subsection メッセージ本文

仮引数 `%s' は、この関数の中で使われていません。

@subsection 内容

未使用の実引数は資源を無駄に使用するという点で効率性を低下させます。またコード中に無駄な要素があることで解析性が低下します。

@subsection サンプルコード

@verbatim
int func(int num) /* W0031 */
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0033
@section W0033
@cindex W0033

@subsection メッセージ本文

ラベル `%s:' は、この関数の中で使われていないため、削除することができます。

@subsection 内容

使用されないラベルは無駄な要素といえます。コード中に無駄な要素があることで解析性が低下します。

@subsection サンプルコード

@verbatim
void func(void)
{
    int num = 0;
    for (int i =0; i < 10; i++) {
        num++;
    }
ERROR: /* W0033 */
    num = 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0035
@section W0035
@cindex W0035

@subsection メッセージ本文

`&&' または `||' の右のオペランドは、算術型またはポインタ型でなければなりません。

@subsection 内容

ISO C90 では @code{&&} や @code{||} の右辺はスカラ型でなければならないとされています。
従って構造体型にした場合の動作は未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct STR {
    int x;
    int y;
};

extern struct STR str;

void func(void)
{
    int x;
    int y;
    x = y && str; /* W0035 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0036
@section W0036
@cindex W0036

@subsection メッセージ本文

宣言子の中の修飾子の数が 12 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では宣言子の修飾子数の制限を 12 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
int num[1][2][3][4][5][6][7][8][9][10][11][12][13]; /* W0036 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0037
@section W0037
@cindex W0037

@subsection メッセージ本文

構造体または共用体のネストが 15 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では構造体や共用体のネスト数の制限を 15 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
struct st1 {
  struct st2 {
    struct st3 {
      struct st4 {
        struct st5 {
          struct st6 {
            struct st7 {
              struct st8 {
                struct st9 {
                  struct st10 {
                    struct st11 {
                      struct st12 {
                        struct st13 {
                          struct st14 {
                            struct st15 {
                              struct st16 { /* W0037 */
                                int i;
                              } st16;
                            } st15;
                          } st14;
                        } st13;
                      } st12;
                    } st11;
                  } st10;
                } st9;
              } st8;
            } st7;
          } st6;
        } st5;
      } st5;
    } st3;
  } st2;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0038
@section W0038
@cindex W0038

@subsection メッセージ本文

オブジェクト `%s' のサイズが 32767 バイトを超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 ではオブジェクトのサイズ制限を 32767 バイトと定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
int num[100][330]; /* W0038 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0039
@section W0039
@cindex W0039

@subsection メッセージ本文

ブロックの中のローカルな識別子の数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 ではブロックスコープ識別子を持つブロック数の制限を 127 個と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
void func(void)
{
    int num1,  num2,  num3,  num4,  num5,  num6,  num7,  num8,  num9,  num10;
    int num11, num12, num13, num14, num15, num16, num17, num18, num19, num20;

    ...snip...

    int num111, num112, num113, num114, num115, num116, num117, num118, num119, num120;
    int num121, num122, num123, num124, num125, num126, num127, num128; /* W0039 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0040
@section W0040
@cindex W0040

@subsection メッセージ本文

ビットフィールドが signed または unsigned 付きで宣言されていません。

@subsection 内容

単なる @code{int} 型でビットフィールドを定義した場合、@code{signed int} になるか @code{unsigned int} になるかは処理系依存になります。
従って、プログラマが意図しない型になる可能性があります。

@subsection サンプルコード

@verbatim
struct STR { /* W0040 */
    int a:5;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0041
@section W0041
@cindex W0041

@subsection メッセージ本文

構造体または共用体のメンバの数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では構造体や共用体のメンバ数の制限を 127 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
struct STR {
    int num1;
    int num2;
    int num3;
    int num4;
    int num5;

    ...snip...

    int num125;
    int num126;
    int num127;
    int num128; /* W0041 */
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0042
@section W0042
@cindex W0042

@subsection メッセージ本文

列挙定数の数が 127 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では列挙定数の制限を 127 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
enum ENM {
    e1,  e2,  e3,  e4,  e5,  e6,  e7,  e8,  e9,  e10,
    e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,

    ...snip...

    e111, e112, e113, e114, e115, e116, e117, e118, e119, e120,
    e121, e122, e123, e124, e125, e126, e127, e128 /* W0042 */
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0043
@section W0043
@cindex W0043

@subsection メッセージ本文

配列の初期値が、宣言された配列のサイズに足りません。残りの配列要素はゼロで初期化されます。

@subsection 内容

初期化子が不足する場合は 0 で初期化されますが、意図したものか、そうでないかが分かりづらくなります。
初期化子を指定する場合には、要素数と初期値の数を一致させることが望ましいです。

@subsection サンプルコード

@verbatim
int array[5] = { 1, 2, 3 }; /* W0043 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0049
@section W0049
@cindex W0049

@subsection メッセージ本文

制御構造のネストが 15 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では制御構造のネスト数の制限を 15 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
if(x > 0) {
  if(x > 0) {
    if(x > 0) {
      if(x > 0) {
        if(x > 0) {
          if(x > 0) {
            if(x > 0) {
              if(x > 0) {
                if(x > 0) {
                  if(x > 0) {
                    if(x > 0) {
                      if(x > 0) {
                        if(x > 0) {
                          if(x > 0) {
                            if (x > 0) {
                              if(x > 0) { /* W0049 */
                                ;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0050
@section W0050
@cindex W0050

@subsection メッセージ本文

case ラベルの数が 257 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では @code{case} ラベルの制限を 257 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
switch (num) {
case 1:
    break;
case 2:
    break;
case 3:
    break;

  ...snip...

case 257:
    break;
case 258: /* W0050 */
    break;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0051
@section W0051
@cindex W0051

@subsection メッセージ本文

外部識別子 `%s' が他の識別子名と、リンカ特性で指定された文字数の範囲内で区別できません。

@subsection 内容

処理系で決められている文字数の制限を超えた場合の動作は未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern int very_long_long_long_ ...snip... _long_external_symbol; /* W0051 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C0001} この識別名 `%s' で警告を検知しました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0052
@section W0052
@cindex W0052

@subsection メッセージ本文

識別子名 `%s' が他の識別子名と、コンパイラ特性で指定された文字数の範囲内で区別できません。

@subsection 内容

処理系で決められている文字数の制限(原則 31 文字)を超えた場合の動作は未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int very_long_long_long_long_long_ ...snip... _long_symbol; /* W0052 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C0001} この識別名 `%s' で警告を検知しました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0053
@section W0053
@cindex W0053

@subsection メッセージ本文

`#include "%s"' のネストが 8 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では @code{include} の入れ子レベルの制限を 8 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@file{test.c}
@verbatim
#include "test1.h"
@end verbatim

@file{test1.h}
@verbatim
#include "test2.h"
@end verbatim

@file{test2.h}
@verbatim
#include "test3.h"
@end verbatim

@file{test3.h}
@verbatim
#include "test4.h"
@end verbatim

@file{test4.h}
@verbatim
#include "test5.h"
@end verbatim

@file{test5.h}
@verbatim
#include "test6.h"
@end verbatim

@file{test6.h}
@verbatim
#include "test7.h"
@end verbatim

@file{test7.h}
@verbatim
#include "test8.h"
@end verbatim

@file{test8.h}
@verbatim
#include "test9.h"
@end verbatim

@file{test9.h}
@verbatim
#include "test10.h" /* W0053 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0054
@section W0054
@cindex W0054

@subsection メッセージ本文

`#if...' のネストの最大値が 8 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では @code{#if} の入れ子レベルの制限を 8 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
#if N > 1
#if N > 2
#if N > 3
#if N > 4
#if N > 5
#if N > 6
#if N > 7
#if N > 8 /* W0054 */
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0055
@section W0055
@cindex W0055

@subsection メッセージ本文

マクロ定義の数が 1024 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では一つの翻訳単位中で定義できるマクロの制限を 1024 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
#define MACRO_1
#define MACRO_2
#define MACRO_3

...snip...

#define MACRO_1023
#define MACRO_1024
#define MACRO_1025 /* W0055 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0056
@section W0056
@cindex W0056

@subsection メッセージ本文

関数形式マクロの仮引数の数が 31 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 ではマクロ引数数の制限を 31 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
#define MACRO(a1, a2, a3, ...snip... a30, a31, a32) /* W0056 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0057
@section W0057
@cindex W0057

@subsection メッセージ本文

関数形式マクロの呼び出しの実引数の数が 31 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 ではマクロ呼び出しの引数数の制限を 31 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
int i = MACRO(1, 2, 3 ...snip... 30, 31, 32); /* W0057 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0058
@section W0058
@cindex W0058

@subsection メッセージ本文

文字列リテラルの文字数が 509 を超えました。このプログラムは ISO C90 標準規格に厳密に準拠していません。

@subsection 内容

ISO C90 では文字列リテラルの文字数の制限を 509 と定めています。この制限を超えると移植性が低下します。

@subsection サンプルコード

@verbatim
char buf[] = "very long long long ...snip... long string literal"; /* W0058 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0059
@section W0059
@cindex W0059

@subsection メッセージ本文

このファイルの行末に Ctrl-M(^M) 制御文字が見つかりました。

@subsection 内容

PC で作成したソースには機種依存の制御コードが使用されることがあります。
このような制御コードを無視せず、意図しない処理をする処理系が存在する可能性があります。
従ってこのような機種依存の記述は移植性を低下させます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

@itemize
@item @ref{W0060} このファイル内に Ctrl-Z(^Z) 制御文字が見つかりました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0060
@section W0060
@cindex W0060

@subsection メッセージ本文

このファイル内に Ctrl-Z(^Z) 制御文字が見つかりました。

@subsection 内容

PC で作成したソースには機種依存の制御コードが使用されることがあります。
このような制御コードを無視せず、意図しない処理をしてしまう処理系が存在する可能性があります。
従ってこのような機種依存の記述は移植性を低下させます。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

@itemize
@item @ref{W0059} このファイルの行末に Ctrl-M(^M) 制御文字が見つかりました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0061
@section W0061
@cindex W0061

@subsection メッセージ本文

`%s' は ISO C 標準規格の正式な予約語ではありません。言語拡張と見なし無視します。

@subsection 内容

ある特定のコンパイラで定義されている言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
extern int func(void) __attribute__ ((__const__)); /* W0061 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0062} `__typeof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
@item @ref{W0063} `__alignof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0062
@section W0062
@cindex W0062

@subsection メッセージ本文

`__typeof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。

@subsection 内容

ある特定のコンパイラで定義されている言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
#define DEF_FUNPTR(func) __typeof__(func) *ptr_##func = 0
DEF_FUNPTR(main); /* W0062 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0061} `%s' は ISO C 標準規格の正式な予約語ではありません。言語拡張と見なし無視します。
@item @ref{W0063} `__alignof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0063
@section W0063
@cindex W0063

@subsection メッセージ本文

`__alignof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。

@subsection 内容

ある特定のコンパイラで定義されている言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
int a = __alignof__(struct sockaddr *) /* W0063 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0061} `%s' は ISO C 標準規格の正式な予約語ではありません。言語拡張と見なし無視します。
@item @ref{W0062} `__typeof__' は ISO C 標準規格ではサポートされていません。言語拡張と見なします。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0064
@section W0064
@cindex W0064

@subsection メッセージ本文

2 進数整数リテラルが使われています。これは言語拡張です。

@subsection 内容

2 進数定数が認められている場合、それは言語拡張と考えられます。言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
unsigned char c = 0b00000001; /* W0064 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0065
@section W0065
@cindex W0065

@subsection メッセージ本文

代入演算子の左オペランドをキャストしてはなりません。

@subsection 内容

左オペランドに対するキャストが認められている場合、それは言語拡張と考えられます。
言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
void func(int num)
{
    (unsigned short) num = 100U; /* W0065 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0066
@section W0066
@cindex W0066

@subsection メッセージ本文

`main()' 関数は、`int (void)' または `int (int, char *[])' のどちらかでなければなりません。

@subsection 内容

@code{int main(void)} または @code{int main(int, char*[])} 以外の形式の @code{main} 関数の定義が認められている場合、それは言語拡張と考えられます。

@subsection サンプルコード

@verbatim
void main(void) {} /* W0066 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0067
@section W0067
@cindex W0067

@subsection メッセージ本文

ネストされた構造体のメンバに直接アクセスしています。これは言語拡張です。

@subsection 内容

入れ子の構造体への直接アクセスや特定ビットへの直接アクセスが認められている場合、
それは言語拡張と考えられます。言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
struct BBB {
    int mb;
    struct AAA {
        int ma;
    };
} bbb;

bbb.ma = 1; /* W0067 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0068} ビットにアクセスするために `.' を使っています。これは言語拡張です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0068
@section W0068
@cindex W0068

@subsection メッセージ本文

ビットにアクセスするために `.' を使っています。これは言語拡張です。

@subsection 内容

入れ子の構造体への直接アクセスや特定ビットへの直接アクセスが認められている場合、
それは言語拡張と考えられます。言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
unsigned short a;

a.2 = 0; /* W0068 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0067} ネストされた構造体のメンバに直接アクセスしています。これは言語拡張です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0069
@section W0069
@cindex W0069

@subsection メッセージ本文

`/*' で始まるコメントの中に `/*' が見つかりました。ネストされたコメントは、ISO C 標準規格では認められていません。

@subsection 内容

@code{/*} コメントの入れ子は ISO C90 では認められていません。
入れ子によって即問題に直結するわけではありませんが、
内側のコメントの終端 @code{*/} によって外側のコメントが終了してしまうことで
予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
/* /* W0069 */ */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0070
@section W0070
@cindex W0070

@subsection メッセージ本文

インクルードされている <%s> の内容は翻訳単位の中で全く参照されていません。削除することができます。

@subsection 内容

参照しないヘッダファイルをインクルードすることは無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

@itemize
@item @ref{W0071} インクルードされている "%s" の内容は翻訳単位の中で全く参照されていません。削除することができます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0071
@section W0071
@cindex W0071

@subsection メッセージ本文

インクルードされている "%s" の内容は翻訳単位の中で全く参照されていません。削除することができます。

@subsection 内容

参照しないヘッダファイルをインクルードすることは無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

@itemize
@item @ref{W0070} インクルードされている <%s> の内容は翻訳単位の中で全く参照されていません。削除することができます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0072
@section W0072
@cindex W0072

@subsection メッセージ本文

基本ソース文字集合に含まれない文字が、ヘッダファイル名で使われています。

@subsection 内容

ISO C90 では処理できる最小限の文字集合を定めています。この集合に当てはまらない文字を処理する場合は処理系定義の動作となります。
処理系定義の動作を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
#include <test$.h> /* W0072 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0073
@section W0073
@cindex W0073

@subsection メッセージ本文

このインクルードファイルには、インクルードガードが記述されていません。

@subsection 内容

重複インクルードは型の再定義に関するエラーを引き起こす原因になります。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0076
@section W0076
@cindex W0076

@subsection メッセージ本文

この 16 進整数リテラルには、接尾語 `U' または `u' が付けられていません。

@subsection 内容

整数定数の値は、規格で指定された型のうち、その値を表現できる最初の型になります。
つまり、接尾語 "@code{U}" を使用していない 16 進定数は、
@code{unsigned} を意図していても、@code{signed} 型で表現できる場合は @code{signed} となります。
例えば、@code{0x8000} は、@code{int} の実装サイズが 16bit の場合 @code{unsigned int} になりますが、
int の実装サイズが 32bit の場合 @code{signed int} 型になります。
このように、16 進定数に接尾語 "@code{U}" を使用していない時、
@code{signed} と @code{unsigned} のどちらになるのかが判断しづらくなります。

@subsection サンプルコード

@verbatim
unsigned int num = 0x1234; /* W0076 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0077
@section W0077
@cindex W0077

@subsection メッセージ本文

接尾語として小文字の `l' が整数または浮動小数点数に付けられています。

@subsection 内容

@code{long} 型を表す接尾語 "@code{l}" の使用は、数字の "@code{1}" と間違えられやすいため解析性が低下します。

@subsection サンプルコード

@verbatim
long a = 0x1000l; /* W0077 */
long b = 0x1000L; /* OK */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0078
@section W0078
@cindex W0078

@subsection メッセージ本文

仮引数並びがない関数が宣言されています。

@subsection 内容

仮引数の並びが空の関数宣言は旧式 (K&R) の文法であり、
これが現在でも利用できるのはコンパイラが旧式の文法の一部をサポートしているためです。
このようなコンパイラの配慮に依存したコードは将来的に変更を余儀なくされる未成熟なコードといえます。

@subsection サンプルコード

@verbatim
int sample() /* W0078 */
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0079
@section W0079
@cindex W0079

@subsection メッセージ本文

この配列は、初期値の文字列リテラルの終端文字 `\0' を保持できません。

@subsection 内容

文字列配列はターミネータとして終端にヌル文字が入っていることを想定して使用される場合が多くあります。
例えば、文字数を数えるために終端のヌル文字が見つかるまで反復処理するような使用法が挙げられます。
このような処理を、ヌル文字を保持していない文字列配列に行った場合、無限ループに陥ってしまいます。

@subsection サンプルコード

@verbatim
char text[3] = "ABC"; /* W0079 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0080
@section W0080
@cindex W0080

@subsection メッセージ本文

const 修飾されたグローバルオブジェクトが、明示的に初期化されずに定義されています。

@subsection 内容

@code{const} 指定されている変数は、値を代入することができませんので、宣言時に初期化する必要があります。
従って、@code{const} 指定されており、宣言時に初期化されていない変数は使いようのない無駄なデータということになります。
無駄なものは、メモリ資源を消費する、ソースコードの可読性を低下させる、などのデメリットがあります。

@subsection サンプルコード

@verbatim
const int num; /* W0080 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0081
@section W0081
@cindex W0081

@subsection メッセージ本文

単項演算子 `-' を unsigned int 型、unsigned long 型、unsigned long long 型のオペランドに対して使うと、符号無し型になってしまいます。

@subsection 内容

符号なし型の変数に、単項演算子 "@code{-}" を使用すると結果は処理系定義、または未定義の動作になります。
従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
unsigned long num = 0;
long val = -num; /* W0081 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0082
@section W0082
@cindex W0082

@subsection メッセージ本文

単項演算子 `-' を符号無しの潜在型 `%s' のオペランドに対して使っています。

@subsection 内容

符号なし型の変数に、単項演算子 "@code{-}" を使用すると結果は処理系定義、または未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
unsigned short num = 20;
int val = -num; /* W0082 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0084
@section W0084
@cindex W0084

@subsection メッセージ本文

このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。

@subsection 内容

副作用がない文は無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

@verbatim
int a = 0;
int b = 1;

a, b++; /* W0084 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0085} この文には副作用がありません。誤りのある可能性が高いです。
@item @ref{W0086} 三項演算子(条件演算子)の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。
@item @ref{W0087} カンマ演算子の右側の式は、副作用がない冗長な式です。
@item @ref{W0088} 論理演算子の右側の式は、副作用がない冗長な式です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0085
@section W0085
@cindex W0085

@subsection メッセージ本文

この文には副作用がありません。誤りのある可能性が高いです。

@subsection 内容

副作用がない文は無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

@verbatim
a; /* W0085 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0084} このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。
@item @ref{W0086} 三項演算子(条件演算子)の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。
@item @ref{W0087} カンマ演算子の右側の式は、副作用がない冗長な式です。
@item @ref{W0088} 論理演算子の右側の式は、副作用がない冗長な式です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0086
@section W0086
@cindex W0086

@subsection メッセージ本文

三項演算子(条件演算子)の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。

@subsection 内容

副作用がない文は無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

@verbatim
int a;
int b;

(a < 0) ? b : b++; /* W0086 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0084} このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。
@item @ref{W0085} この文には副作用がありません。誤りのある可能性が高いです。
@item @ref{W0087} カンマ演算子の右側の式は、副作用がない冗長な式です。
@item @ref{W0088} 論理演算子の右側の式は、副作用がない冗長な式です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0087
@section W0087
@cindex W0087

@subsection メッセージ本文

カンマ演算子の右側の式は、副作用がない冗長な式です。

@subsection 内容

副作用がない文は無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

@verbatim
int a = 0;
int b = 1;

a++, b; /* W0087 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0084} このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。
@item @ref{W0085} この文には副作用がありません。誤りのある可能性が高いです。
@item @ref{W0086} 三項演算子(条件演算子)の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。
@item @ref{W0088} 論理演算子の右側の式は、副作用がない冗長な式です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0088
@section W0088
@cindex W0088

@subsection メッセージ本文

論理演算子の右側の式は、副作用がない冗長な式です。

@subsection 内容

副作用がない文は無駄な文だと言えます。コード中に無駄な文があることで解析性が低下します。

@subsection サンプルコード

@verbatim
(a < 0) && func(a) && func(b) && c; /* W0088 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0084} このカンマ演算子 `,' の左オペランドには副作用をもつ式が記述されていません。
@item @ref{W0085} この文には副作用がありません。誤りのある可能性が高いです。
@item @ref{W0086} 三項演算子(条件演算子)の中で、2 番目あるいは 3 番目のオペランドは、副作用がない冗長な式です。
@item @ref{W0087} カンマ演算子の右側の式は、副作用がない冗長な式です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0093
@section W0093
@cindex W0093

@subsection メッセージ本文

ゼロで除算される恐れがあります。

@subsection 内容

ゼロでの除算は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b)
{
    if (b > 0) {
        return a / b; /* OK */
    }
    return a / b; /* W0093 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0096
@section W0096
@cindex W0096

@subsection メッセージ本文

ゼロになる定数式で除算しています。

@subsection 内容

ゼロでの除算は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define A (0)

int b = 10 / A; /* W0096 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0097
@section W0097
@cindex W0097

@subsection メッセージ本文

ゼロの値で除算しています。

@subsection 内容

ゼロでの除算は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b)
{
    if (a < 0) {
        ...snip...
    }
    else {
        ...snip...
        if (a < 1) {
            return b / a; /* W0097 */
        }
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0100
@section W0100
@cindex W0100

@subsection メッセージ本文

変数 `%s' は初期値を設定後に再代入されません。変数を const 付きで初期値を指定して定義できる可能性があります。

@subsection 内容

このような変数は、値を変更しても良いか否かがわかりづらいといった問題があります。

@subsection サンプルコード

@verbatim
int func(int a)
{
    int b = a; /* W0100 */
    return b;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0101
@section W0101
@cindex W0101

@subsection メッセージ本文

自動変数のアドレスが、より長い寿命を持つポインタに代入されています。このプログラムは危険です。

@subsection 内容

ある関数で宣言された自動変数のスコープはその関数内に限定されますが、
その自動変数のアドレスをより大きなスコープを持つポインタに代入して使用した場合、
あたかもそのポインタが有効なスコープで自動変数のアドレスを扱うようなソースコードになります。
しかし実際は、関数内で宣言された自動変数は、その関数を抜けた時点でスコープを外れるため、
その自動変数のポインタも無効になります。
従って、自動変数のポインタをより大きいスコープを持つポインタへ代入することは、
無効なポインタを意図しないタイミングで使う可能性を生じさせるため危険です。

@subsection サンプルコード

@verbatim
extern long *ptr;

void func()
{
    long value = 0;
    ptr = &value; /* W0101 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0102
@section W0102
@cindex W0102

@subsection メッセージ本文

自動変数のアドレスが、関数の仮引数を介して戻されています。このプログラムは危険です。

@subsection 内容

関数内で宣言された自動変数は、関数の実行が終了した時点で無効になります。
そのような変数のアドレスは、いつ別の変数のメモリ領域として使用されるかわかりません。

@subsection サンプルコード

@verbatim
void func(int **ptr)
{
    int num;
    *ptr = &num; /* W0102 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0103} 自動変数のアドレスが、戻り値として関数から返されています。このプログラムは危険です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0103
@section W0103
@cindex W0103

@subsection メッセージ本文

自動変数のアドレスが、戻り値として関数から返されています。このプログラムは危険です。

@subsection 内容

関数内で宣言された自動変数は、関数の実行が終了した時点で無効になります。
そのような変数のアドレスは、いつ別の変数のメモリ領域として使用されるかわかりません。

@subsection サンプルコード

@verbatim
char *foo1(void)
{
    char a[3];
    return a; /* W0103 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0102} 自動変数のアドレスが、関数の仮引数を介して戻されています。このプログラムは危険です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0104
@section W0104
@cindex W0104

@subsection メッセージ本文

仮引数 `%s' は値が変わりません。const 付きで宣言できる可能性があります。

@subsection 内容

このような引数は、値を変更しても良いか否かがわかりづらいといった問題があります。

@subsection サンプルコード

@verbatim
void func(int val) /* W0104 */
{
    const int num = val + 1;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0105} ポインタ仮引数 `%s' が指しているオブジェクトは関数内で変わらないので、const オブジェクトを指すポインタ型として宣言できる可能性があります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0105
@section W0105
@cindex W0105

@subsection メッセージ本文

ポインタ仮引数 `%s' が指しているオブジェクトは関数内で変わらないので、const オブジェクトを指すポインタ型として宣言できる可能性があります。

@subsection 内容

このような引数は、値を変更しても良いか否かがわかりづらいといった問題があります。

@subsection サンプルコード

@verbatim
void func(int *val) /* W0105 */
{
    const int num = *val;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0104} 仮引数 `%s' は値が変わりません。const 付きで宣言できる可能性があります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0107
@section W0107
@cindex W0107

@subsection メッセージ本文

自動変数のアドレスが、static 付きローカルポインタに代入されています。このプログラムは危険です。

@subsection 内容

関数のスコープを抜けると自動記憶域期間を持つオブジェクトが無効になる一方で、
静的記憶域期間を持つオブジェクトは無効になりません。
従って、静的記憶域期間を持つポインタに自動記憶域期間を持つオブジェクトのアドレスを代入することは危険です。

@subsection サンプルコード

@verbatim
void foo()
{
    static int *p;
    int b = 100;

    p = &b; /* W0107 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0108
@section W0108
@cindex W0108

@subsection メッセージ本文

代入演算子が論理演算式の中で使われています。

@subsection 内容

実質的にブール型として使用されている変数に対する代入演算子や複合代入演算子の使用は、
どのように解釈してよいかがわかりづらく、コードを複雑にします。

@subsection サンプルコード

@verbatim
int a;
int b;

if (a = b) { /* W0108 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0109
@section W0109
@cindex W0109

@subsection メッセージ本文

この関数の宣言が見つかりません。省略されたものとみなし、`extern int %s()' を挿入します。

@subsection 内容

ISO C90 では、関数は使用される前に定義もしくはプロトタイプ宣言すべきとされています。
定義もしくはプロトタイプ宣言なしで使用する場合は、暗黙の宣言があるものと見なされます。
しかし、このような規格の配慮に依存したコードは将来的に変更を余儀なくされる未成熟なコードといえます。

@subsection サンプルコード

@verbatim
void func()
{
    foo(); /* W0109 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0110
@section W0110
@cindex W0110

@subsection メッセージ本文

浮動小数点型の変数が for 文のループカウンタとして使われています。

@subsection 内容

ループカウンタ(ループの制御変数)の型を浮動小数点型にした場合、
ループを抜ける条件に等式や不等式を採用した場合に、
ループカウンタの丸め誤差が原因で無限ループになる可能性が高くなります。

@subsection サンプルコード

@verbatim
double d;

for (d = 0.0; d != 1.0; d += 0.1) { /* W0110 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0112
@section W0112
@cindex W0112

@subsection メッセージ本文

浮動小数点の式を等価演算子で比較しています。

@subsection 内容

浮動小数点型の変数は様々な誤差の影響により、ある数と等式や不等式で比較しても目的の結果を得られるとは限りません。

@subsection サンプルコード

@verbatim
double a = 0.1;
a = (a + 0.1) * 5.0;
if (a == 1.0) { /* W0112 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0114
@section W0114
@cindex W0114

@subsection メッセージ本文

この制御式は明示的な論理演算ではありません。

@subsection 内容

制御式で比較演算子を使用しないと暗黙的に 0 と比較された結果を判定することになります。
このような比較演算子を用いない書き方はコーディング量が減るメリットよりも解析性が低下するデメリットの方が大きいと考えられます。

@subsection サンプルコード

@verbatim
int a;

if (a != 0) { /* OK */
}

if (a) { /* W0114 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0115
@section W0115
@cindex W0115

@subsection メッセージ本文

符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。

@subsection 内容

符号なし型の変数に対する左シフト演算は上位ビットを切り詰めて、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(unsigned int a)
{
    if (a > 0x40000000U) {
        return a << 2; /* W0115 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0116} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0116
@section W0116
@cindex W0116

@subsection メッセージ本文

符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。

@subsection 内容

符号なし型の変数に対する左シフト演算は上位ビットを切り詰めて、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(unsigned int a)
{
    if (a > 0x40000000U) {
        return a << 1; /* W0116 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0115} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0117
@section W0117
@cindex W0117

@subsection メッセージ本文

`%s' の定義は外部結合を持ちますが、定義より前にその宣言がありません。

@subsection 内容

外部変数や外部関数は複数のファイルで使用されることを想定して宣言されます。
従って、これらはヘッダファイルで宣言され、インクルードして使用されるべきです。
ソースファイルで宣言して使用する場合、ヘッダファイルで宣言して使用するよりも安全性、保守性が低下します。

@subsection サンプルコード

@verbatim
void func(void) /* W0117 */
{
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0118} 外部結合を持つ `%s' の宣言が、ヘッダファイルの中にありません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0118
@section W0118
@cindex W0118

@subsection メッセージ本文

外部結合を持つ `%s' の宣言が、ヘッダファイルの中にありません。

@subsection 内容

外部変数や外部関数は複数のファイルで使用されることを想定して宣言されます。
従って、これらはヘッダファイルで宣言され、インクルードして使用されるべきです。
ソースファイルで宣言して使用する場合、ヘッダファイルで宣言して使用するよりも安全性、保守性が低下します。

@subsection サンプルコード

@file{test.c}
@verbatim
extern int val; /* W0118 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0117} `%s' の定義は外部結合を持ちますが、定義より前にその宣言がありません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0119
@section W0119
@cindex W0119

@subsection メッセージ本文

暗黙的に char 型から signed char 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(char a)
{
    signed char b = a; /* W0119 */
    foo(a); /* W0119 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0120
@section W0120
@cindex W0120

@subsection メッセージ本文

暗黙的に char 型から unsigned char 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(char a)
{
    unsigned char b = a; /* W0120 */
    foo(a); /* W0120 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0121
@section W0121
@cindex W0121

@subsection メッセージ本文

暗黙的に char 型から signed short 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(char a)
{
    short b = a; /* W0121 */
    foo(a); /* W0121 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0122
@section W0122
@cindex W0122

@subsection メッセージ本文

暗黙的に char 型から unsigned short 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(char a)
{
    unsigned short b = a; /* W0122 */
    foo(a); /* W0122 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0123
@section W0123
@cindex W0123

@subsection メッセージ本文

暗黙的に char 型から signed int 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(char a)
{
    int b = a; /* W0123 */
    foo(a); /* W0123 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0124
@section W0124
@cindex W0124

@subsection メッセージ本文

暗黙的に char 型から unsigned int 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(char a)
{
    unsigned int b = a; /* W0124 */
    foo(a); /* W0124 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0125
@section W0125
@cindex W0125

@subsection メッセージ本文

暗黙的に char 型から signed long 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(char a)
{
    long b = a; /* W0125 */
    foo(a); /* W0125 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0126
@section W0126
@cindex W0126

@subsection メッセージ本文

暗黙的に char 型から unsigned long 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(char a)
{
    unsigned long b = a; /* W0126 */
    foo(a); /* W0126 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0127
@section W0127
@cindex W0127

@subsection メッセージ本文

暗黙的に char 型から float 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(char a)
{
    float b = a; /* W0127 */
    foo(a); /* W0127 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0128
@section W0128
@cindex W0128

@subsection メッセージ本文

暗黙的に char 型から double 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(char a)
{
    double b = a; /* W0128 */
    foo(a); /* W0128 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0129
@section W0129
@cindex W0129

@subsection メッセージ本文

暗黙的に char 型から long double 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(char a)
{
    long double b = a; /* W0129 */
    foo(a); /* W0129 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0130
@section W0130
@cindex W0130

@subsection メッセージ本文

暗黙的に char 型から signed long long 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(char a)
{
    long long b = a; /* W0130 */
    foo(a); /* W0130 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0131} 暗黙的に char 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0131
@section W0131
@cindex W0131

@subsection メッセージ本文

暗黙的に char 型から unsigned long long 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(char a)
{
    unsigned long long b = a; /* W0131 */
    foo(a); /* W0131 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0119} 暗黙的に char 型から signed char 型に型変換されています。
@item @ref{W0120} 暗黙的に char 型から unsigned char 型に型変換されています。
@item @ref{W0121} 暗黙的に char 型から signed short 型に型変換されています。
@item @ref{W0122} 暗黙的に char 型から unsigned short 型に型変換されています。
@item @ref{W0123} 暗黙的に char 型から signed int 型に型変換されています。
@item @ref{W0124} 暗黙的に char 型から unsigned int 型に型変換されています。
@item @ref{W0125} 暗黙的に char 型から signed long 型に型変換されています。
@item @ref{W0126} 暗黙的に char 型から unsigned long 型に型変換されています。
@item @ref{W0127} 暗黙的に char 型から float 型に型変換されています。
@item @ref{W0128} 暗黙的に char 型から double 型に型変換されています。
@item @ref{W0129} 暗黙的に char 型から long double 型に型変換されています。
@item @ref{W0130} 暗黙的に char 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0132
@section W0132
@cindex W0132

@subsection メッセージ本文

暗黙的に unsigned char 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(unsigned char a)
{
    char b = a; /* W0132 */
    foo(a); /* W0132 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0133
@section W0133
@cindex W0133

@subsection メッセージ本文

暗黙的に signed char 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(signed char a)
{
    char b = a; /* W0133 */
    foo(a); /* W0133 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0134
@section W0134
@cindex W0134

@subsection メッセージ本文

暗黙的に signed short 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(short a)
{
    char b = a; /* W0134 */
    foo(a); /* W0134 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0135
@section W0135
@cindex W0135

@subsection メッセージ本文

暗黙的に unsigned short 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(unsigned short a)
{
    char b = a; /* W0135 */
    foo(a); /* W0135 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0136
@section W0136
@cindex W0136

@subsection メッセージ本文

暗黙的に signed int 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(int a)
{
    char b = a; /* W0136 */
    foo(a); /* W0136 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0137
@section W0137
@cindex W0137

@subsection メッセージ本文

暗黙的に unsigned int 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(unsigned int a)
{
    char b = a; /* W0137 */
    foo(a); /* W0137 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0138
@section W0138
@cindex W0138

@subsection メッセージ本文

暗黙的に signed long 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(long a)
{
    char b = a; /* W0138 */
    foo(a); /* W0138 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0139
@section W0139
@cindex W0139

@subsection メッセージ本文

暗黙的に unsigned long 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(unsigned long a)
{
    char b = a; /* W0139 */
    foo(a); /* W0139 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0140
@section W0140
@cindex W0140

@subsection メッセージ本文

暗黙的に signed long long 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(long long a)
{
    char b = a; /* W0140 */
    foo(a); /* W0140 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0141} 暗黙的に unsigned long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0141
@section W0141
@cindex W0141

@subsection メッセージ本文

暗黙的に unsigned long long 型から char 型に型変換されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(unsigned long long a)
{
    char b = a; /* W0141 */
    foo(a); /* W0141 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0132} 暗黙的に unsigned char 型から char 型に型変換されています。
@item @ref{W0133} 暗黙的に signed char 型から char 型に型変換されています。
@item @ref{W0134} 暗黙的に signed short 型から char 型に型変換されています。
@item @ref{W0135} 暗黙的に unsigned short 型から char 型に型変換されています。
@item @ref{W0136} 暗黙的に signed int 型から char 型に型変換されています。
@item @ref{W0137} 暗黙的に unsigned int 型から char 型に型変換されています。
@item @ref{W0138} 暗黙的に signed long 型から char 型に型変換されています。
@item @ref{W0139} 暗黙的に unsigned long 型から char 型に型変換されています。
@item @ref{W0140} 暗黙的に signed long long 型から char 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0142
@section W0142
@cindex W0142

@subsection メッセージ本文

暗黙的に unsigned char 型から signed char 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(unsigned char a)
{
    signed char b = a; /* W0142 */
    foo(a); /* W0142 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0143
@section W0143
@cindex W0143

@subsection メッセージ本文

暗黙的に unsigned short 型から signed char 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(unsigned short a)
{
    signed char b = a; /* W0143 */
    foo(a); /* W0143 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0144
@section W0144
@cindex W0144

@subsection メッセージ本文

暗黙的に unsigned short 型から signed short 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(unsigned short a)
{
    short b = a; /* W0144 */
    foo(a); /* W0144 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0145
@section W0145
@cindex W0145

@subsection メッセージ本文

暗黙的に unsigned int 型から signed char 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(unsigned int a)
{
    signed char b = a; /* W0145 */
    foo(a); /* W0145 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0146
@section W0146
@cindex W0146

@subsection メッセージ本文

暗黙的に unsigned int 型から signed short 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(unsigned int a)
{
    short b = a; /* W0146 */
    foo(a); /* W0146 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0147
@section W0147
@cindex W0147

@subsection メッセージ本文

暗黙的に unsigned int 型から signed int 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(unsigned int a)
{
    int b = a; /* W0147 */
    foo(a); /* W0147 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0148
@section W0148
@cindex W0148

@subsection メッセージ本文

暗黙的に unsigned long 型から signed char 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(unsigned long a)
{
    signed char b = a; /* W0148 */
    foo(a); /* W0148 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0149
@section W0149
@cindex W0149

@subsection メッセージ本文

暗黙的に unsigned long 型から signed short 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(unsigned long a)
{
    short b = a; /* W0149 */
    foo(a); /* W0149 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0150
@section W0150
@cindex W0150

@subsection メッセージ本文

暗黙的に unsigned long 型から signed int 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(unsigned long a)
{
    int b = a; /* W0150 */
    foo(a); /* W0150 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0151
@section W0151
@cindex W0151

@subsection メッセージ本文

暗黙的に unsigned long 型から signed long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(unsigned long a)
{
    long b = a; /* W0151 */
    foo(a); /* W0151 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0152
@section W0152
@cindex W0152

@subsection メッセージ本文

暗黙的に unsigned long long 型から signed char 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(unsigned long long a)
{
    signed char b = a; /* W0152 */
    foo(a); /* W0152 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0153
@section W0153
@cindex W0153

@subsection メッセージ本文

暗黙的に unsigned long long 型から signed short 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(unsigned long long a)
{
    short b = a; /* W0153 */
    foo(a); /* W0153 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0154
@section W0154
@cindex W0154

@subsection メッセージ本文

暗黙的に unsigned long long 型から signed int 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(unsigned long long a)
{
    int b = a; /* W0154 */
    foo(a); /* W0154 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0155
@section W0155
@cindex W0155

@subsection メッセージ本文

暗黙的に unsigned long long 型から signed long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。
また、より小さいデータへの暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(unsigned long long a)
{
    long b = a; /* W0155 */
    foo(a); /* W0155 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0156} 暗黙的に unsigned long long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0156
@section W0156
@cindex W0156

@subsection メッセージ本文

暗黙的に unsigned long long 型から signed long long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、
結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(unsigned long long a)
{
    long long b = a; /* W0156 */
    foo(a); /* W0156 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0142} 暗黙的に unsigned char 型から signed char 型に型変換されています。
@item @ref{W0143} 暗黙的に unsigned short 型から signed char 型に型変換されています。
@item @ref{W0144} 暗黙的に unsigned short 型から signed short 型に型変換されています。
@item @ref{W0145} 暗黙的に unsigned int 型から signed char 型に型変換されています。
@item @ref{W0146} 暗黙的に unsigned int 型から signed short 型に型変換されています。
@item @ref{W0147} 暗黙的に unsigned int 型から signed int 型に型変換されています。
@item @ref{W0148} 暗黙的に unsigned long 型から signed char 型に型変換されています。
@item @ref{W0149} 暗黙的に unsigned long 型から signed short 型に型変換されています。
@item @ref{W0150} 暗黙的に unsigned long 型から signed int 型に型変換されています。
@item @ref{W0151} 暗黙的に unsigned long 型から signed long 型に型変換されています。
@item @ref{W0152} 暗黙的に unsigned long long 型から signed char 型に型変換されています。
@item @ref{W0153} 暗黙的に unsigned long long 型から signed short 型に型変換されています。
@item @ref{W0154} 暗黙的に unsigned long long 型から signed int 型に型変換されています。
@item @ref{W0155} 暗黙的に unsigned long long 型から signed long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0157
@section W0157
@cindex W0157

@subsection メッセージ本文

暗黙的に signed char 型から unsigned char 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(signed char a)
{
    unsigned char b = a; /* W0157 */
    foo(a); /* W0157 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0158
@section W0158
@cindex W0158

@subsection メッセージ本文

暗黙的に signed char 型から unsigned short 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(signed char a)
{
    unsigned short b = a; /* W0158 */
    foo(a); /* W0158 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0159
@section W0159
@cindex W0159

@subsection メッセージ本文

暗黙的に signed char 型から unsigned int 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(signed char a)
{
    unsigned int b = a; /* W0159 */
    foo(a); /* W0159 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0160
@section W0160
@cindex W0160

@subsection メッセージ本文

暗黙的に signed char 型から unsigned long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(signed char a)
{
    unsigned long b = a; /* W0160 */
    foo(a); /* W0160 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0161
@section W0161
@cindex W0161

@subsection メッセージ本文

暗黙的に signed short 型から unsigned char 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(short a)
{
    unsigned char b = a; /* W0161 */
    foo(a); /* W0161 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0162
@section W0162
@cindex W0162

@subsection メッセージ本文

暗黙的に signed short 型から unsigned short 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(short a)
{
    unsigned short b = a; /* W0162 */
    foo(a); /* W0162 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0163
@section W0163
@cindex W0163

@subsection メッセージ本文

暗黙的に signed short 型から unsigned int 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(short a)
{
    unsigned int b = a; /* W0163 */
    foo(a); /* W0163 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0164
@section W0164
@cindex W0164

@subsection メッセージ本文

暗黙的に signed short 型から unsigned long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(short a)
{
    unsigned long b = a; /* W0164 */
    foo(a); /* W0164 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0165
@section W0165
@cindex W0165

@subsection メッセージ本文

暗黙的に signed int 型から unsigned char 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(int a)
{
    unsigned char b = a; /* W0165 */
    foo(a); /* W0165 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0166
@section W0166
@cindex W0166

@subsection メッセージ本文

暗黙的に signed int 型から unsigned short 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(int a)
{
    unsigned short b = a; /* W0166 */
    foo(a); /* W0166 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0167
@section W0167
@cindex W0167

@subsection メッセージ本文

暗黙的に signed int 型から unsigned int 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(int a)
{
    unsigned int b = a; /* W0167 */
    foo(a); /* W0167 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0168
@section W0168
@cindex W0168

@subsection メッセージ本文

暗黙的に signed int 型から unsigned long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(int a)
{
    unsigned long b = a; /* W0168 */
    foo(a); /* W0168 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0169
@section W0169
@cindex W0169

@subsection メッセージ本文

暗黙的に signed long 型から unsigned char 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(long a)
{
    unsigned char b = a; /* W0169 */
    foo(a); /* W0169 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0170
@section W0170
@cindex W0170

@subsection メッセージ本文

暗黙的に signed long 型から unsigned short 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(long a)
{
    unsigned short b = a; /* W0170 */
    foo(a); /* W0170 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0171
@section W0171
@cindex W0171

@subsection メッセージ本文

暗黙的に signed long 型から unsigned int 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(long a)
{
    unsigned int b = a; /* W0171 */
    foo(a); /* W0171 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0172
@section W0172
@cindex W0172

@subsection メッセージ本文

暗黙的に signed long 型から unsigned long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(long a)
{
    unsigned long b = a; /* W0172 */
    foo(a); /* W0172 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0173
@section W0173
@cindex W0173

@subsection メッセージ本文

暗黙的に signed char 型から unsigned long long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(signed char a)
{
    unsigned long long b = a; /* W0173 */
    foo(a); /* W0173 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0174
@section W0174
@cindex W0174

@subsection メッセージ本文

暗黙的に signed short 型から unsigned long long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(short a)
{
    unsigned long long b = a; /* W0174 */
    foo(a); /* W0174 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0175
@section W0175
@cindex W0175

@subsection メッセージ本文

暗黙的に signed int 型から unsigned long long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(int a)
{
    unsigned long long b = a; /* W0175 */
    foo(a); /* W0175 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0176
@section W0176
@cindex W0176

@subsection メッセージ本文

暗黙的に signed long 型から unsigned long long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(long a)
{
    unsigned long long b = a; /* W0176 */
    foo(a); /* W0176 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0177
@section W0177
@cindex W0177

@subsection メッセージ本文

暗黙的に signed long long 型から unsigned char 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(long long a)
{
    unsigned char b = a; /* W0177 */
    foo(a); /* W0177 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0178
@section W0178
@cindex W0178

@subsection メッセージ本文

暗黙的に signed long long 型から unsigned short 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(long long a)
{
    unsigned short b = a; /* W0178 */
    foo(a); /* W0178 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0179
@section W0179
@cindex W0179

@subsection メッセージ本文

暗黙的に signed long long 型から unsigned int 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(long long a)
{
    unsigned int b = a; /* W0179 */
    foo(a); /* W0179 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0180
@section W0180
@cindex W0180

@subsection メッセージ本文

暗黙的に signed long long 型から unsigned long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(long long a)
{
    unsigned long b = a; /* W0180 */
    foo(a); /* W0180 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0181} 暗黙的に signed long long 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0181
@section W0181
@cindex W0181

@subsection メッセージ本文

暗黙的に signed long long 型から unsigned long long 型に型変換されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、
結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(long long a)
{
    unsigned long long b = a; /* W0181 */
    foo(a); /* W0181 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0157} 暗黙的に signed char 型から unsigned char 型に型変換されています。
@item @ref{W0158} 暗黙的に signed char 型から unsigned short 型に型変換されています。
@item @ref{W0159} 暗黙的に signed char 型から unsigned int 型に型変換されています。
@item @ref{W0160} 暗黙的に signed char 型から unsigned long 型に型変換されています。
@item @ref{W0161} 暗黙的に signed short 型から unsigned char 型に型変換されています。
@item @ref{W0162} 暗黙的に signed short 型から unsigned short 型に型変換されています。
@item @ref{W0163} 暗黙的に signed short 型から unsigned int 型に型変換されています。
@item @ref{W0164} 暗黙的に signed short 型から unsigned long 型に型変換されています。
@item @ref{W0165} 暗黙的に signed int 型から unsigned char 型に型変換されています。
@item @ref{W0166} 暗黙的に signed int 型から unsigned short 型に型変換されています。
@item @ref{W0167} 暗黙的に signed int 型から unsigned int 型に型変換されています。
@item @ref{W0168} 暗黙的に signed int 型から unsigned long 型に型変換されています。
@item @ref{W0169} 暗黙的に signed long 型から unsigned char 型に型変換されています。
@item @ref{W0170} 暗黙的に signed long 型から unsigned short 型に型変換されています。
@item @ref{W0171} 暗黙的に signed long 型から unsigned int 型に型変換されています。
@item @ref{W0172} 暗黙的に signed long 型から unsigned long 型に型変換されています。
@item @ref{W0173} 暗黙的に signed char 型から unsigned long long 型に型変換されています。
@item @ref{W0174} 暗黙的に signed short 型から unsigned long long 型に型変換されています。
@item @ref{W0175} 暗黙的に signed int 型から unsigned long long 型に型変換されています。
@item @ref{W0176} 暗黙的に signed long 型から unsigned long long 型に型変換されています。
@item @ref{W0177} 暗黙的に signed long long 型から unsigned char 型に型変換されています。
@item @ref{W0178} 暗黙的に signed long long 型から unsigned short 型に型変換されています。
@item @ref{W0179} 暗黙的に signed long long 型から unsigned int 型に型変換されています。
@item @ref{W0180} 暗黙的に signed long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0182
@section W0182
@cindex W0182

@subsection メッセージ本文

暗黙的に unsigned char 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(unsigned char a)
{
    float b = a; /* W0182 */
    foo(a); /* W0182 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0183
@section W0183
@cindex W0183

@subsection メッセージ本文

暗黙的に unsigned char 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(unsigned char a)
{
    double b = a; /* W0183 */
    foo(a); /* W0183 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0184
@section W0184
@cindex W0184

@subsection メッセージ本文

暗黙的に unsigned char 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(unsigned char a)
{
    long double b = a; /* W0184 */
    foo(a); /* W0184 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0185
@section W0185
@cindex W0185

@subsection メッセージ本文

暗黙的に signed char 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(signed char a)
{
    float b = a; /* W0185 */
    foo(a); /* W0185 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0186
@section W0186
@cindex W0186

@subsection メッセージ本文

暗黙的に signed char 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(signed char a)
{
    double b = a; /* W0186 */
    foo(a); /* W0186 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0187
@section W0187
@cindex W0187

@subsection メッセージ本文

暗黙的に signed char 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(signed char a)
{
    long double b = a; /* W0187 */
    foo(a); /* W0187 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0188
@section W0188
@cindex W0188

@subsection メッセージ本文

暗黙的に signed short 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(short a)
{
    float b = a; /* W0188 */
    foo(a); /* W0188 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0189
@section W0189
@cindex W0189

@subsection メッセージ本文

暗黙的に signed short 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(short a)
{
    double b = a; /* W0189 */
    foo(a); /* W0189 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0190
@section W0190
@cindex W0190

@subsection メッセージ本文

暗黙的に signed short 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(short a)
{
    long double b = a; /* W0190 */
    foo(a); /* W0190 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0191
@section W0191
@cindex W0191

@subsection メッセージ本文

暗黙的に unsigned short 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(unsigned short a)
{
    float b = a; /* W0191 */
    foo(a); /* W0191 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0192
@section W0192
@cindex W0192

@subsection メッセージ本文

暗黙的に unsigned short 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(unsigned short a)
{
    double b = a; /* W0192 */
    foo(a); /* W0192 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0193
@section W0193
@cindex W0193

@subsection メッセージ本文

暗黙的に unsigned short 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(unsigned short a)
{
    long double b = a; /* W0193 */
    foo(a); /* W0193 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0194
@section W0194
@cindex W0194

@subsection メッセージ本文

暗黙的に signed int 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(int a)
{
    float b = a; /* W0194 */
    foo(a); /* W0194 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0195
@section W0195
@cindex W0195

@subsection メッセージ本文

暗黙的に signed int 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(int a)
{
    double b = a; /* W0195 */
    foo(a); /* W0195 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0196
@section W0196
@cindex W0196

@subsection メッセージ本文

暗黙的に signed int 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(int a)
{
    long double b = a; /* W0196 */
    foo(a); /* W0196 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0197
@section W0197
@cindex W0197

@subsection メッセージ本文

暗黙的に unsigned int 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(unsigned int a)
{
    float b = a; /* W0197 */
    foo(a); /* W0197 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0198
@section W0198
@cindex W0198

@subsection メッセージ本文

暗黙的に unsigned int 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(unsigned int a)
{
    double b = a; /* W0198 */
    foo(a); /* W0198 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0199
@section W0199
@cindex W0199

@subsection メッセージ本文

暗黙的に unsigned int 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(unsigned int a)
{
    long double b = a; /* W0199 */
    foo(a); /* W0199 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0200
@section W0200
@cindex W0200

@subsection メッセージ本文

暗黙的に signed long 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(long a)
{
    float b = a; /* W0200 */
    foo(a); /* W0200 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0201
@section W0201
@cindex W0201

@subsection メッセージ本文

暗黙的に signed long 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(long a)
{
    double b = a; /* W0201 */
    foo(a); /* W0201 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0202
@section W0202
@cindex W0202

@subsection メッセージ本文

暗黙的に signed long 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(long a)
{
    long double b = a; /* W0202 */
    foo(a); /* W0202 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0203
@section W0203
@cindex W0203

@subsection メッセージ本文

暗黙的に unsigned long 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(unsigned long a)
{
    float b = a; /* W0203 */
    foo(a); /* W0203 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0204
@section W0204
@cindex W0204

@subsection メッセージ本文

暗黙的に unsigned long 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(unsigned long a)
{
    double b = a; /* W0204 */
    foo(a); /* W0204 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0205
@section W0205
@cindex W0205

@subsection メッセージ本文

暗黙的に unsigned long 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(unsigned long a)
{
    long double b = a; /* W0205 */
    foo(a); /* W0205 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0206
@section W0206
@cindex W0206

@subsection メッセージ本文

暗黙的に signed long long 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(long long a)
{
    float b = a; /* W0206 */
    foo(a); /* W0206 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0207
@section W0207
@cindex W0207

@subsection メッセージ本文

暗黙的に signed long long 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(long long a)
{
    double b = a; /* W0207 */
    foo(a); /* W0207 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0208
@section W0208
@cindex W0208

@subsection メッセージ本文

暗黙的に signed long long 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(long long a)
{
    long double b = a; /* W0208 */
    foo(a); /* W0208 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0209
@section W0209
@cindex W0209

@subsection メッセージ本文

暗黙的に unsigned long long 型から float 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(unsigned long long a)
{
    float b = a; /* W0209 */
    foo(a); /* W0209 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0210
@section W0210
@cindex W0210

@subsection メッセージ本文

暗黙的に unsigned long long 型から double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(unsigned long long a)
{
    double b = a; /* W0210 */
    foo(a); /* W0210 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0211} 暗黙的に unsigned long long 型から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0211
@section W0211
@cindex W0211

@subsection メッセージ本文

暗黙的に unsigned long long 型から long double 型に型変換されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long double a);

void bar(unsigned long long a)
{
    long double b = a; /* W0211 */
    foo(a); /* W0211 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0182} 暗黙的に unsigned char 型から float 型に型変換されています。
@item @ref{W0183} 暗黙的に unsigned char 型から double 型に型変換されています。
@item @ref{W0184} 暗黙的に unsigned char 型から long double 型に型変換されています。
@item @ref{W0185} 暗黙的に signed char 型から float 型に型変換されています。
@item @ref{W0186} 暗黙的に signed char 型から double 型に型変換されています。
@item @ref{W0187} 暗黙的に signed char 型から long double 型に型変換されています。
@item @ref{W0188} 暗黙的に signed short 型から float 型に型変換されています。
@item @ref{W0189} 暗黙的に signed short 型から double 型に型変換されています。
@item @ref{W0190} 暗黙的に signed short 型から long double 型に型変換されています。
@item @ref{W0191} 暗黙的に unsigned short 型から float 型に型変換されています。
@item @ref{W0192} 暗黙的に unsigned short 型から double 型に型変換されています。
@item @ref{W0193} 暗黙的に unsigned short 型から long double 型に型変換されています。
@item @ref{W0194} 暗黙的に signed int 型から float 型に型変換されています。
@item @ref{W0195} 暗黙的に signed int 型から double 型に型変換されています。
@item @ref{W0196} 暗黙的に signed int 型から long double 型に型変換されています。
@item @ref{W0197} 暗黙的に unsigned int 型から float 型に型変換されています。
@item @ref{W0198} 暗黙的に unsigned int 型から double 型に型変換されています。
@item @ref{W0199} 暗黙的に unsigned int 型から long double 型に型変換されています。
@item @ref{W0200} 暗黙的に signed long 型から float 型に型変換されています。
@item @ref{W0201} 暗黙的に signed long 型から double 型に型変換されています。
@item @ref{W0202} 暗黙的に signed long 型から long double 型に型変換されています。
@item @ref{W0203} 暗黙的に unsigned long 型から float 型に型変換されています。
@item @ref{W0204} 暗黙的に unsigned long 型から double 型に型変換されています。
@item @ref{W0205} 暗黙的に unsigned long 型から long double 型に型変換されています。
@item @ref{W0206} 暗黙的に signed long long 型から float 型に型変換されています。
@item @ref{W0207} 暗黙的に signed long long 型から double 型に型変換されています。
@item @ref{W0208} 暗黙的に signed long long 型から long double 型に型変換されています。
@item @ref{W0209} 暗黙的に unsigned long long 型から float 型に型変換されています。
@item @ref{W0210} 暗黙的に unsigned long long 型から double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0212
@section W0212
@cindex W0212

@subsection メッセージ本文

暗黙的に float 型から char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(float a)
{
    char b = a; /* W0212 */
    foo(a); /* W0212 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0213
@section W0213
@cindex W0213

@subsection メッセージ本文

暗黙的に float 型から signed char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(float a)
{
    signed char b = a; /* W0213 */
    foo(a); /* W0213 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0214
@section W0214
@cindex W0214

@subsection メッセージ本文

暗黙的に float 型から unsigned char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(float a)
{
    unsigned char b = a; /* W0214 */
    foo(a); /* W0214 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0215
@section W0215
@cindex W0215

@subsection メッセージ本文

暗黙的に float 型から signed short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(float a)
{
    short b = a; /* W0215 */
    foo(a); /* W0215 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0216
@section W0216
@cindex W0216

@subsection メッセージ本文

暗黙的に float 型から unsigned short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(float a)
{
    unsigned short b = a; /* W0216 */
    foo(a); /* W0216 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0217
@section W0217
@cindex W0217

@subsection メッセージ本文

暗黙的に float 型から signed int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(float a)
{
    int b = a; /* W0217 */
    foo(a); /* W0217 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0218
@section W0218
@cindex W0218

@subsection メッセージ本文

暗黙的に float 型から unsigned int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(float a)
{
    unsigned int b = a; /* W0218 */
    foo(a); /* W0218 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0219
@section W0219
@cindex W0219

@subsection メッセージ本文

暗黙的に float 型から signed long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(float a)
{
    long b = a; /* W0219 */
    foo(a); /* W0219 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0220
@section W0220
@cindex W0220

@subsection メッセージ本文

暗黙的に float 型から unsigned long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(float a)
{
    unsigned long b = a; /* W0220 */
    foo(a); /* W0220 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0221
@section W0221
@cindex W0221

@subsection メッセージ本文

暗黙的に double 型から char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(double a)
{
    char b = a; /* W0221 */
    foo(a); /* W0221 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0222
@section W0222
@cindex W0222

@subsection メッセージ本文

暗黙的に double 型から signed char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(double a)
{
    signed char b = a; /* W0222 */
    foo(a); /* W0222 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0223
@section W0223
@cindex W0223

@subsection メッセージ本文

暗黙的に double 型から unsigned char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(double a)
{
    unsigned char b = a; /* W0223 */
    foo(a); /* W0223 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0224
@section W0224
@cindex W0224

@subsection メッセージ本文

暗黙的に double 型から signed short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(double a)
{
    short b = a; /* W0224 */
    foo(a); /* W0224 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0225
@section W0225
@cindex W0225

@subsection メッセージ本文

暗黙的に double 型から unsigned short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(double a)
{
    unsigned short b = a; /* W0225 */
    foo(a); /* W0225 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0226
@section W0226
@cindex W0226

@subsection メッセージ本文

暗黙的に double 型から signed int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(double a)
{
    int b = a; /* W0226 */
    foo(a); /* W0226 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0227
@section W0227
@cindex W0227

@subsection メッセージ本文

暗黙的に double 型から unsigned int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(double a)
{
    unsigned int b = a; /* W0227 */
    foo(a); /* W0227 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0228
@section W0228
@cindex W0228

@subsection メッセージ本文

暗黙的に double 型から signed long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(double a)
{
    long b = a; /* W0228 */
    foo(a); /* W0228 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0229
@section W0229
@cindex W0229

@subsection メッセージ本文

暗黙的に double 型から unsigned long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(double a)
{
    unsigned long b = a; /* W0229 */
    foo(a); /* W0229 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0230
@section W0230
@cindex W0230

@subsection メッセージ本文

暗黙的に long double 型から char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(char a);

void bar(long double a)
{
    char b = a; /* W0230 */
    foo(a); /* W0230 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0231
@section W0231
@cindex W0231

@subsection メッセージ本文

暗黙的に long double 型から signed char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(long double a)
{
    signed char b = a; /* W0231 */
    foo(a); /* W0231 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0232
@section W0232
@cindex W0232

@subsection メッセージ本文

暗黙的に long double 型から unsigned char 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(long double a)
{
    unsigned char b = a; /* W0232 */
    foo(a); /* W0232 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0233
@section W0233
@cindex W0233

@subsection メッセージ本文

暗黙的に long double 型から signed short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(long double a)
{
    short b = a; /* W0233 */
    foo(a); /* W0233 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0234
@section W0234
@cindex W0234

@subsection メッセージ本文

暗黙的に long double 型から unsigned short 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(long double a)
{
    unsigned short b = a; /* W0234 */
    foo(a); /* W0234 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0235
@section W0235
@cindex W0235

@subsection メッセージ本文

暗黙的に long double 型から signed int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(long double a)
{
    int b = a; /* W0235 */
    foo(a); /* W0235 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0236
@section W0236
@cindex W0236

@subsection メッセージ本文

暗黙的に long double 型から unsigned int 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(long double a)
{
    unsigned int b = a; /* W0236 */
    foo(a); /* W0236 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0237
@section W0237
@cindex W0237

@subsection メッセージ本文

暗黙的に long double 型から signed long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(long double a)
{
    long b = a; /* W0237 */
    foo(a); /* W0237 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0238
@section W0238
@cindex W0238

@subsection メッセージ本文

暗黙的に long double 型から unsigned long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(long double a)
{
    unsigned long b = a; /* W0238 */
    foo(a); /* W0238 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0239
@section W0239
@cindex W0239

@subsection メッセージ本文

暗黙的に float 型から signed long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(float a)
{
    long long b = a; /* W0239 */
    foo(a); /* W0239 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0240
@section W0240
@cindex W0240

@subsection メッセージ本文

暗黙的に float 型から unsigned long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(float a)
{
    unsigned long long b = a; /* W0240 */
    foo(a); /* W0240 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0241
@section W0241
@cindex W0241

@subsection メッセージ本文

暗黙的に double 型から signed long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(double a)
{
    long long b = a; /* W0241 */
    foo(a); /* W0241 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0242
@section W0242
@cindex W0242

@subsection メッセージ本文

暗黙的に double 型から unsigned long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(double a)
{
    unsigned long long b = a; /* W0242 */
    foo(a); /* W0242 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0243
@section W0243
@cindex W0243

@subsection メッセージ本文

暗黙的に long double 型から signed long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(long double a)
{
    long long b = a; /* W0243 */
    foo(a); /* W0243 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0244} 暗黙的に long double 型から unsigned long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0244
@section W0244
@cindex W0244

@subsection メッセージ本文

暗黙的に long double 型から unsigned long long 型に型変換されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long long a);

void bar(long double a)
{
    unsigned long long b = a; /* W0244 */
    foo(a); /* W0244 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0212} 暗黙的に float 型から char 型に型変換されています。
@item @ref{W0213} 暗黙的に float 型から signed char 型に型変換されています。
@item @ref{W0214} 暗黙的に float 型から unsigned char 型に型変換されています。
@item @ref{W0215} 暗黙的に float 型から signed short 型に型変換されています。
@item @ref{W0216} 暗黙的に float 型から unsigned short 型に型変換されています。
@item @ref{W0217} 暗黙的に float 型から signed int 型に型変換されています。
@item @ref{W0218} 暗黙的に float 型から unsigned int 型に型変換されています。
@item @ref{W0219} 暗黙的に float 型から signed long 型に型変換されています。
@item @ref{W0220} 暗黙的に float 型から unsigned long 型に型変換されています。
@item @ref{W0221} 暗黙的に double 型から char 型に型変換されています。
@item @ref{W0222} 暗黙的に double 型から signed char 型に型変換されています。
@item @ref{W0223} 暗黙的に double 型から unsigned char 型に型変換されています。
@item @ref{W0224} 暗黙的に double 型から signed short 型に型変換されています。
@item @ref{W0225} 暗黙的に double 型から unsigned short 型に型変換されています。
@item @ref{W0226} 暗黙的に double 型から signed int 型に型変換されています。
@item @ref{W0227} 暗黙的に double 型から unsigned int 型に型変換されています。
@item @ref{W0228} 暗黙的に double 型から signed long 型に型変換されています。
@item @ref{W0229} 暗黙的に double 型から unsigned long 型に型変換されています。
@item @ref{W0230} 暗黙的に long double 型から char 型に型変換されています。
@item @ref{W0231} 暗黙的に long double 型から signed char 型に型変換されています。
@item @ref{W0232} 暗黙的に long double 型から unsigned char 型に型変換されています。
@item @ref{W0233} 暗黙的に long double 型から signed short 型に型変換されています。
@item @ref{W0234} 暗黙的に long double 型から unsigned short 型に型変換されています。
@item @ref{W0235} 暗黙的に long double 型から signed int 型に型変換されています。
@item @ref{W0236} 暗黙的に long double 型から unsigned int 型に型変換されています。
@item @ref{W0237} 暗黙的に long double 型から signed long 型に型変換されています。
@item @ref{W0238} 暗黙的に long double 型から unsigned long 型に型変換されています。
@item @ref{W0239} 暗黙的に float 型から signed long long 型に型変換されています。
@item @ref{W0240} 暗黙的に float 型から unsigned long long 型に型変換されています。
@item @ref{W0241} 暗黙的に double 型から signed long long 型に型変換されています。
@item @ref{W0242} 暗黙的に double 型から unsigned long long 型に型変換されています。
@item @ref{W0243} 暗黙的に long double 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0245
@section W0245
@cindex W0245

@subsection メッセージ本文

暗黙的に unsigned char 型から signed short 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(unsigned char a)
{
    short b = a; /* W0245 */
    foo(a); /* W0245 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0246
@section W0246
@cindex W0246

@subsection メッセージ本文

暗黙的に unsigned char 型から signed int 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(unsigned char a)
{
    int b = a; /* W0246 */
    foo(a); /* W0246 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0247
@section W0247
@cindex W0247

@subsection メッセージ本文

暗黙的に unsigned char 型から signed long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(unsigned char a)
{
    long b = a; /* W0247 */
    foo(a); /* W0247 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0248
@section W0248
@cindex W0248

@subsection メッセージ本文

暗黙的に unsigned short 型から signed int 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(unsigned short a)
{
    int b = a; /* W0248 */
    foo(a); /* W0248 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0249
@section W0249
@cindex W0249

@subsection メッセージ本文

暗黙的に unsigned short 型から signed long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(unsigned short a)
{
    long b = a; /* W0249 */
    foo(a); /* W0249 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0250
@section W0250
@cindex W0250

@subsection メッセージ本文

暗黙的に unsigned int 型から signed long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(unsigned int a)
{
    long b = a; /* W0250 */
    foo(a); /* W0250 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0251
@section W0251
@cindex W0251

@subsection メッセージ本文

暗黙的に unsigned char 型から signed long long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(unsigned char a)
{
    long long b = a; /* W0251 */
    foo(a); /* W0251 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0252
@section W0252
@cindex W0252

@subsection メッセージ本文

暗黙的に unsigned short 型から signed long long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(unsigned short a)
{
    long long b = a; /* W0252 */
    foo(a); /* W0252 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0253
@section W0253
@cindex W0253

@subsection メッセージ本文

暗黙的に unsigned int 型から signed long long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(unsigned int a)
{
    long long b = a; /* W0253 */
    foo(a); /* W0253 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0254} 暗黙的に unsigned long 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0254
@section W0254
@cindex W0254

@subsection メッセージ本文

暗黙的に unsigned long 型から signed long long 型に型変換されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long long a);

void bar(unsigned long a)
{
    long long b = a; /* W0254 */
    foo(a); /* W0254 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0245} 暗黙的に unsigned char 型から signed short 型に型変換されています。
@item @ref{W0246} 暗黙的に unsigned char 型から signed int 型に型変換されています。
@item @ref{W0247} 暗黙的に unsigned char 型から signed long 型に型変換されています。
@item @ref{W0248} 暗黙的に unsigned short 型から signed int 型に型変換されています。
@item @ref{W0249} 暗黙的に unsigned short 型から signed long 型に型変換されています。
@item @ref{W0250} 暗黙的に unsigned int 型から signed long 型に型変換されています。
@item @ref{W0251} 暗黙的に unsigned char 型から signed long long 型に型変換されています。
@item @ref{W0252} 暗黙的に unsigned short 型から signed long long 型に型変換されています。
@item @ref{W0253} 暗黙的に unsigned int 型から signed long long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0255
@section W0255
@cindex W0255

@subsection メッセージ本文

char 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    char a = 0;
    return a; /* W0255 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0256
@section W0256
@cindex W0256

@subsection メッセージ本文

char 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    char a = 0;
    return a; /* W0256 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0257
@section W0257
@cindex W0257

@subsection メッセージ本文

char 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    char a = 0;
    return a; /* W0257 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0258
@section W0258
@cindex W0258

@subsection メッセージ本文

char 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    char a = 0;
    return a; /* W0258 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0259
@section W0259
@cindex W0259

@subsection メッセージ本文

char 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    char a = 0;
    return a; /* W0259 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0260
@section W0260
@cindex W0260

@subsection メッセージ本文

char 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    char a = 0;
    return a; /* W0260 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0261
@section W0261
@cindex W0261

@subsection メッセージ本文

char 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    char a = 0;
    return a; /* W0261 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0262
@section W0262
@cindex W0262

@subsection メッセージ本文

char 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    char a = 0;
    return a; /* W0262 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0263
@section W0263
@cindex W0263

@subsection メッセージ本文

char 型の値が関数 `float %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    char a = 0;
    return a; /* W0263 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0264
@section W0264
@cindex W0264

@subsection メッセージ本文

char 型の値が関数 `double %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    char a = 0;
    return a; /* W0264 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0265
@section W0265
@cindex W0265

@subsection メッセージ本文

char 型の値が関数 `long double %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    char a = 0;
    return a; /* W0265 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0266
@section W0266
@cindex W0266

@subsection メッセージ本文

char 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    char a = 0;
    return a; /* W0266 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0267} char 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0267
@section W0267
@cindex W0267

@subsection メッセージ本文

char 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

単なる @code{char} 型からの暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    char a = 0;
    return a; /* W0267 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0255} char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0256} char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0257} char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0258} char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0259} char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0260} char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0261} char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0262} char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0263} char 型の値が関数 `float %s()' から返されています。
@item @ref{W0264} char 型の値が関数 `double %s()' から返されています。
@item @ref{W0265} char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0266} char 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0268
@section W0268
@cindex W0268

@subsection メッセージ本文

unsigned char 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
char func(void)
{
    unsigned char a = 0;
    return a; /* W0268 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0269
@section W0269
@cindex W0269

@subsection メッセージ本文

signed char 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。

@subsection サンプルコード

@verbatim
char func(void)
{
    signed char a = 0;
    return a; /* W0269 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0270
@section W0270
@cindex W0270

@subsection メッセージ本文

signed short 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    short a = 0;
    return a; /* W0270 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0271
@section W0271
@cindex W0271

@subsection メッセージ本文

unsigned short 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    unsigned short a = 0;
    return a; /* W0271 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0272
@section W0272
@cindex W0272

@subsection メッセージ本文

signed int 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    int a = 0;
    return a; /* W0272 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0273
@section W0273
@cindex W0273

@subsection メッセージ本文

unsigned int 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    unsigned int a = 0;
    return a; /* W0273 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0274
@section W0274
@cindex W0274

@subsection メッセージ本文

signed long 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    long a = 0;
    return a; /* W0274 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0275
@section W0275
@cindex W0275

@subsection メッセージ本文

unsigned long 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    unsigned long a = 0;
    return a; /* W0275 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0276
@section W0276
@cindex W0276

@subsection メッセージ本文

signed long long 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    long long a = 0;
    return a; /* W0276 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0277} unsigned long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0277
@section W0277
@cindex W0277

@subsection メッセージ本文

unsigned long long 型の値が関数 `char %s()' から返されています。

@subsection 内容

単なる @code{char} 型への暗黙のキャストは処理系定義です。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    unsigned long long a = 0;
    return a; /* W0277 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0268} unsigned char 型の値が関数 `char %s()' から返されています。
@item @ref{W0269} signed char 型の値が関数 `char %s()' から返されています。
@item @ref{W0270} signed short 型の値が関数 `char %s()' から返されています。
@item @ref{W0271} unsigned short 型の値が関数 `char %s()' から返されています。
@item @ref{W0272} signed int 型の値が関数 `char %s()' から返されています。
@item @ref{W0273} unsigned int 型の値が関数 `char %s()' から返されています。
@item @ref{W0274} signed long 型の値が関数 `char %s()' から返されています。
@item @ref{W0275} unsigned long 型の値が関数 `char %s()' から返されています。
@item @ref{W0276} signed long long 型の値が関数 `char %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0278
@section W0278
@cindex W0278

@subsection メッセージ本文

unsigned char 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    unsigned char a = 0;
    return a; /* W0278 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0279
@section W0279
@cindex W0279

@subsection メッセージ本文

unsigned short 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    unsigned short a = 0;
    return a; /* W0279 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0280
@section W0280
@cindex W0280

@subsection メッセージ本文

unsigned short 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    unsigned short a = 0;
    return a; /* W0280 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0281
@section W0281
@cindex W0281

@subsection メッセージ本文

unsigned int 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    unsigned int a = 0;
    return a; /* W0281 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0282
@section W0282
@cindex W0282

@subsection メッセージ本文

unsigned int 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    unsigned int a = 0;
    return a; /* W0282 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0283
@section W0283
@cindex W0283

@subsection メッセージ本文

unsigned int 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    unsigned int a = 0;
    return a; /* W0283 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0284
@section W0284
@cindex W0284

@subsection メッセージ本文

unsigned long 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    unsigned long a = 0;
    return a; /* W0284 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0285
@section W0285
@cindex W0285

@subsection メッセージ本文

unsigned long 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    unsigned long a = 0;
    return a; /* W0285 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0286
@section W0286
@cindex W0286

@subsection メッセージ本文

unsigned long 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    unsigned long a = 0;
    return a; /* W0286 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0287
@section W0287
@cindex W0287

@subsection メッセージ本文

unsigned long 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    unsigned long a = 0;
    return a; /* W0287 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0288
@section W0288
@cindex W0288

@subsection メッセージ本文

unsigned long long 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    unsigned long long a = 0;
    return a; /* W0288 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0289
@section W0289
@cindex W0289

@subsection メッセージ本文

unsigned long long 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    unsigned long long a = 0;
    return a; /* W0289 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0290
@section W0290
@cindex W0290

@subsection メッセージ本文

unsigned long long 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    unsigned long long a = 0;
    return a; /* W0290 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0291
@section W0291
@cindex W0291

@subsection メッセージ本文

unsigned long long 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    unsigned long long a = 0;
    return a; /* W0291 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0292} unsigned long long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0292
@section W0292
@cindex W0292

@subsection メッセージ本文

unsigned long long 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    unsigned long long a = 0;
    return a; /* W0292 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0278} unsigned char 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0279} unsigned short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0280} unsigned short 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0281} unsigned int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0282} unsigned int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0283} unsigned int 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0284} unsigned long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0285} unsigned long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0286} unsigned long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0287} unsigned long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0288} unsigned long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0289} unsigned long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0290} unsigned long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0291} unsigned long long 型の値が関数 `signed long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0293
@section W0293
@cindex W0293

@subsection メッセージ本文

signed char 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    signed char a = 0;
    return a; /* W0293 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0294
@section W0294
@cindex W0294

@subsection メッセージ本文

signed char 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    signed char a = 0;
    return a; /* W0294 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0295
@section W0295
@cindex W0295

@subsection メッセージ本文

signed char 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    signed char a = 0;
    return a; /* W0295 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0296
@section W0296
@cindex W0296

@subsection メッセージ本文

signed char 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    signed char a = 0;
    return a; /* W0296 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0297
@section W0297
@cindex W0297

@subsection メッセージ本文

signed short 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    short a = 0;
    return a; /* W0297 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0298
@section W0298
@cindex W0298

@subsection メッセージ本文

signed short 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    short a = 0;
    return a; /* W0298 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0299
@section W0299
@cindex W0299

@subsection メッセージ本文

signed short 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    short a = 0;
    return a; /* W0299 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0300
@section W0300
@cindex W0300

@subsection メッセージ本文

signed short 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    short a = 0;
    return a; /* W0300 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0301
@section W0301
@cindex W0301

@subsection メッセージ本文

signed int 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    int a = 0;
    return a; /* W0301 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0302
@section W0302
@cindex W0302

@subsection メッセージ本文

signed int 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    int a = 0;
    return a; /* W0302 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0303
@section W0303
@cindex W0303

@subsection メッセージ本文

signed int 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    int a = 0;
    return a; /* W0303 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0304
@section W0304
@cindex W0304

@subsection メッセージ本文

signed int 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    int a = 0;
    return a; /* W0304 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0305
@section W0305
@cindex W0305

@subsection メッセージ本文

signed long 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    long a = 0;
    return a; /* W0305 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0306
@section W0306
@cindex W0306

@subsection メッセージ本文

signed long 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    long a = 0;
    return a; /* W0306 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0307
@section W0307
@cindex W0307

@subsection メッセージ本文

signed long 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    long a = 0;
    return a; /* W0307 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0308
@section W0308
@cindex W0308

@subsection メッセージ本文

signed long 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    long a = 0;
    return a; /* W0308 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0309
@section W0309
@cindex W0309

@subsection メッセージ本文

signed char 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    signed char a = 0;
    return a; /* W0309 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0310
@section W0310
@cindex W0310

@subsection メッセージ本文

signed short 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    short a = 0;
    return a; /* W0310 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0311
@section W0311
@cindex W0311

@subsection メッセージ本文

signed int 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    int a = 0;
    return a; /* W0311 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0312
@section W0312
@cindex W0312

@subsection メッセージ本文

signed long 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    long a = 0;
    return a; /* W0312 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0313
@section W0313
@cindex W0313

@subsection メッセージ本文

signed long long 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    long long a = 0;
    return a; /* W0313 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0314
@section W0314
@cindex W0314

@subsection メッセージ本文

signed long long 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    long long a = 0;
    return a; /* W0314 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0315
@section W0315
@cindex W0315

@subsection メッセージ本文

signed long long 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    long long a = 0;
    return a; /* W0315 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0316
@section W0316
@cindex W0316

@subsection メッセージ本文

signed long long 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。
また、より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    long long a = 0;
    return a; /* W0316 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0317} signed long long 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0317
@section W0317
@cindex W0317

@subsection メッセージ本文

signed long long 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

符号つき型から符号なし型への暗黙のキャストにより、結果が意図せず負の数から大きな正の数になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    long long a = 0;
    return a; /* W0317 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0293} signed char 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0294} signed char 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0295} signed char 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0296} signed char 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0297} signed short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0298} signed short 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0299} signed short 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0300} signed short 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0301} signed int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0302} signed int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0303} signed int 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0304} signed int 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0305} signed long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0306} signed long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0307} signed long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0308} signed long 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0309} signed char 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0310} signed short 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0311} signed int 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0312} signed long 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0313} signed long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0314} signed long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0315} signed long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0316} signed long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0318
@section W0318
@cindex W0318

@subsection メッセージ本文

unsigned char 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned char a = 0;
    return a; /* W0318 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0319
@section W0319
@cindex W0319

@subsection メッセージ本文

unsigned char 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned char a = 0;
    return a; /* W0319 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0320
@section W0320
@cindex W0320

@subsection メッセージ本文

unsigned char 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned char a = 0;
    return a; /* W0320 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0321
@section W0321
@cindex W0321

@subsection メッセージ本文

signed char 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned char a = 0;
    return a; /* W0321 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0322
@section W0322
@cindex W0322

@subsection メッセージ本文

signed char 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned char a = 0;
    return a; /* W0322 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0323
@section W0323
@cindex W0323

@subsection メッセージ本文

signed char 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned char a = 0;
    return a; /* W0323 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0324
@section W0324
@cindex W0324

@subsection メッセージ本文

signed short 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    short a = 0;
    return a; /* W0324 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0325
@section W0325
@cindex W0325

@subsection メッセージ本文

signed short 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    short a = 0;
    return a; /* W0325 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0326
@section W0326
@cindex W0326

@subsection メッセージ本文

signed short 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    short a = 0;
    return a; /* W0326 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0327
@section W0327
@cindex W0327

@subsection メッセージ本文

unsigned short 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned short a = 0;
    return a; /* W0327 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0328
@section W0328
@cindex W0328

@subsection メッセージ本文

unsigned short 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned short a = 0;
    return a; /* W0328 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0329
@section W0329
@cindex W0329

@subsection メッセージ本文

unsigned short 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned short a = 0;
    return a; /* W0329 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0330
@section W0330
@cindex W0330

@subsection メッセージ本文

signed int 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    int a = 0;
    return a; /* W0330 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0331
@section W0331
@cindex W0331

@subsection メッセージ本文

signed int 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    int a = 0;
    return a; /* W0331 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0332
@section W0332
@cindex W0332

@subsection メッセージ本文

signed int 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    int a = 0;
    return a; /* W0332 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0333
@section W0333
@cindex W0333

@subsection メッセージ本文

unsigned int 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned int a = 0;
    return a; /* W0333 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0334
@section W0334
@cindex W0334

@subsection メッセージ本文

unsigned int 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned int a = 0;
    return a; /* W0334 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0335
@section W0335
@cindex W0335

@subsection メッセージ本文

unsigned int 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned int a = 0;
    return a; /* W0335 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0336
@section W0336
@cindex W0336

@subsection メッセージ本文

signed long 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    long a = 0;
    return a; /* W0336 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0337
@section W0337
@cindex W0337

@subsection メッセージ本文

signed long 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    long a = 0;
    return a; /* W0337 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0338
@section W0338
@cindex W0338

@subsection メッセージ本文

signed long 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    long a = 0;
    return a; /* W0338 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0339
@section W0339
@cindex W0339

@subsection メッセージ本文

unsigned long 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned long a = 0;
    return a; /* W0339 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0340
@section W0340
@cindex W0340

@subsection メッセージ本文

unsigned long 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned long a = 0;
    return a; /* W0340 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0341
@section W0341
@cindex W0341

@subsection メッセージ本文

unsigned long 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned long a = 0;
    return a; /* W0341 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0342
@section W0342
@cindex W0342

@subsection メッセージ本文

signed long long 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    long long a = 0;
    return a; /* W0342 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0343
@section W0343
@cindex W0343

@subsection メッセージ本文

signed long long 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    long long a = 0;
    return a; /* W0343 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0344
@section W0344
@cindex W0344

@subsection メッセージ本文

signed long long 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    long long a = 0;
    return a; /* W0344 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0345
@section W0345
@cindex W0345

@subsection メッセージ本文

unsigned long long 型の値が関数 `float %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
float func(void)
{
    unsigned long long a = 0;
    return a; /* W0345 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0346
@section W0346
@cindex W0346

@subsection メッセージ本文

unsigned long long 型の値が関数 `double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
double func(void)
{
    unsigned long long a = 0;
    return a; /* W0346 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0347} unsigned long long 型の値が関数 `long double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0347
@section W0347
@cindex W0347

@subsection メッセージ本文

unsigned long long 型の値が関数 `long double %s()' から返されています。

@subsection 内容

整数型から浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long double func(void)
{
    unsigned long long a = 0;
    return a; /* W0347 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0318} unsigned char 型の値が関数 `float %s()' から返されています。
@item @ref{W0319} unsigned char 型の値が関数 `double %s()' から返されています。
@item @ref{W0320} unsigned char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0321} signed char 型の値が関数 `float %s()' から返されています。
@item @ref{W0322} signed char 型の値が関数 `double %s()' から返されています。
@item @ref{W0323} signed char 型の値が関数 `long double %s()' から返されています。
@item @ref{W0324} signed short 型の値が関数 `float %s()' から返されています。
@item @ref{W0325} signed short 型の値が関数 `double %s()' から返されています。
@item @ref{W0326} signed short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0327} unsigned short 型の値が関数 `float %s()' から返されています。
@item @ref{W0328} unsigned short 型の値が関数 `double %s()' から返されています。
@item @ref{W0329} unsigned short 型の値が関数 `long double %s()' から返されています。
@item @ref{W0330} signed int 型の値が関数 `float %s()' から返されています。
@item @ref{W0331} signed int 型の値が関数 `double %s()' から返されています。
@item @ref{W0332} signed int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0333} unsigned int 型の値が関数 `float %s()' から返されています。
@item @ref{W0334} unsigned int 型の値が関数 `double %s()' から返されています。
@item @ref{W0335} unsigned int 型の値が関数 `long double %s()' から返されています。
@item @ref{W0336} signed long 型の値が関数 `float %s()' から返されています。
@item @ref{W0337} signed long 型の値が関数 `double %s()' から返されています。
@item @ref{W0338} signed long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0339} unsigned long 型の値が関数 `float %s()' から返されています。
@item @ref{W0340} unsigned long 型の値が関数 `double %s()' から返されています。
@item @ref{W0341} unsigned long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0342} signed long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0343} signed long long 型の値が関数 `double %s()' から返されています。
@item @ref{W0344} signed long long 型の値が関数 `long double %s()' から返されています。
@item @ref{W0345} unsigned long long 型の値が関数 `float %s()' から返されています。
@item @ref{W0346} unsigned long long 型の値が関数 `double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0348
@section W0348
@cindex W0348

@subsection メッセージ本文

float 型の値が関数 `char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    float a = 0;
    return a; /* W0348 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0349
@section W0349
@cindex W0349

@subsection メッセージ本文

float 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    float a = 0;
    return a; /* W0349 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0350
@section W0350
@cindex W0350

@subsection メッセージ本文

float 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    float a = 0;
    return a; /* W0350 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0351
@section W0351
@cindex W0351

@subsection メッセージ本文

float 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    float a = 0;
    return a; /* W0351 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0352
@section W0352
@cindex W0352

@subsection メッセージ本文

float 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    float a = 0;
    return a; /* W0352 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0353
@section W0353
@cindex W0353

@subsection メッセージ本文

float 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    float a = 0;
    return a; /* W0353 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0354
@section W0354
@cindex W0354

@subsection メッセージ本文

float 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    float a = 0;
    return a; /* W0354 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0355
@section W0355
@cindex W0355

@subsection メッセージ本文

float 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    float a = 0;
    return a; /* W0355 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0356
@section W0356
@cindex W0356

@subsection メッセージ本文

float 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    float a = 0;
    return a; /* W0356 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0357
@section W0357
@cindex W0357

@subsection メッセージ本文

double 型の値が関数 `char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    double a = 0;
    return a; /* W0357 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0358
@section W0358
@cindex W0358

@subsection メッセージ本文

double 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    double a = 0;
    return a; /* W0358 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0359
@section W0359
@cindex W0359

@subsection メッセージ本文

double 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    double a = 0;
    return a; /* W0359 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0360
@section W0360
@cindex W0360

@subsection メッセージ本文

double 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    double a = 0;
    return a; /* W0360 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0361
@section W0361
@cindex W0361

@subsection メッセージ本文

double 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    double a = 0;
    return a; /* W0361 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0362
@section W0362
@cindex W0362

@subsection メッセージ本文

double 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    double a = 0;
    return a; /* W0362 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0363
@section W0363
@cindex W0363

@subsection メッセージ本文

double 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    double a = 0;
    return a; /* W0363 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0364
@section W0364
@cindex W0364

@subsection メッセージ本文

double 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    double a = 0;
    return a; /* W0364 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0365
@section W0365
@cindex W0365

@subsection メッセージ本文

double 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    double a = 0;
    return a; /* W0365 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0366
@section W0366
@cindex W0366

@subsection メッセージ本文

long double 型の値が関数 `char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
char func(void)
{
    long double a = 0;
    return a; /* W0366 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0367
@section W0367
@cindex W0367

@subsection メッセージ本文

long double 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    long double a = 0;
    return a; /* W0367 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0368
@section W0368
@cindex W0368

@subsection メッセージ本文

long double 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    long double a = 0;
    return a; /* W0368 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0369
@section W0369
@cindex W0369

@subsection メッセージ本文

long double 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    long double a = 0;
    return a; /* W0369 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0370
@section W0370
@cindex W0370

@subsection メッセージ本文

long double 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    long double a = 0;
    return a; /* W0370 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0371
@section W0371
@cindex W0371

@subsection メッセージ本文

long double 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    long double a = 0;
    return a; /* W0371 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0372
@section W0372
@cindex W0372

@subsection メッセージ本文

long double 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    long double a = 0;
    return a; /* W0372 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0373
@section W0373
@cindex W0373

@subsection メッセージ本文

long double 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    long double a = 0;
    return a; /* W0373 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0374
@section W0374
@cindex W0374

@subsection メッセージ本文

long double 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    long double a = 0;
    return a; /* W0374 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0375
@section W0375
@cindex W0375

@subsection メッセージ本文

float 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    float a = 0;
    return a; /* W0375 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0376
@section W0376
@cindex W0376

@subsection メッセージ本文

float 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    float a = 0;
    return a; /* W0376 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0377
@section W0377
@cindex W0377

@subsection メッセージ本文

double 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    double a = 0;
    return a; /* W0377 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0378
@section W0378
@cindex W0378

@subsection メッセージ本文

double 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    double a = 0;
    return a; /* W0378 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0379
@section W0379
@cindex W0379

@subsection メッセージ本文

long double 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    long double a = 0;
    return a; /* W0379 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0380} long double 型の値が関数 `unsigned long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0380
@section W0380
@cindex W0380

@subsection メッセージ本文

long double 型の値が関数 `unsigned long long %s()' から返されています。

@subsection 内容

浮動小数点型から整数型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
unsigned long long func(void)
{
    long double a = 0;
    return a; /* W0380 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0348} float 型の値が関数 `char %s()' から返されています。
@item @ref{W0349} float 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0350} float 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0351} float 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0352} float 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0353} float 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0354} float 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0355} float 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0356} float 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0357} double 型の値が関数 `char %s()' から返されています。
@item @ref{W0358} double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0359} double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0360} double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0361} double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0362} double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0363} double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0364} double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0365} double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0366} long double 型の値が関数 `char %s()' から返されています。
@item @ref{W0367} long double 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0368} long double 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0369} long double 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0370} long double 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0371} long double 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0372} long double 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0373} long double 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0374} long double 型の値が関数 `unsigned long %s()' から返されています。
@item @ref{W0375} float 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0376} float 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0377} double 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0378} double 型の値が関数 `unsigned long long %s()' から返されています。
@item @ref{W0379} long double 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0381
@section W0381
@cindex W0381

@subsection メッセージ本文

signed short 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    short a = 0;
    return a; /* W0381 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0382
@section W0382
@cindex W0382

@subsection メッセージ本文

unsigned short 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    unsigned short a = 0;
    return a; /* W0382 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0383
@section W0383
@cindex W0383

@subsection メッセージ本文

signed int 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    int a = 0;
    return a; /* W0383 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0384
@section W0384
@cindex W0384

@subsection メッセージ本文

signed int 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
short func(void)
{
    int a = 0;
    return a; /* W0384 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0385
@section W0385
@cindex W0385

@subsection メッセージ本文

unsigned int 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    unsigned int a = 0;
    return a; /* W0385 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0386
@section W0386
@cindex W0386

@subsection メッセージ本文

unsigned int 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    unsigned int a = 0;
    return a; /* W0386 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0387
@section W0387
@cindex W0387

@subsection メッセージ本文

signed long 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    long a = 0;
    return a; /* W0387 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0388
@section W0388
@cindex W0388

@subsection メッセージ本文

signed long 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
short func(void)
{
    long a = 0;
    return a; /* W0388 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0389
@section W0389
@cindex W0389

@subsection メッセージ本文

signed long 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
int func(void)
{
    long a = 0;
    return a; /* W0389 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0390
@section W0390
@cindex W0390

@subsection メッセージ本文

unsigned long 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    unsigned long a = 0;
    return a; /* W0390 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0391
@section W0391
@cindex W0391

@subsection メッセージ本文

unsigned long 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    unsigned long a = 0;
    return a; /* W0391 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0392
@section W0392
@cindex W0392

@subsection メッセージ本文

unsigned long 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    unsigned long a = 0;
    return a; /* W0392 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0393
@section W0393
@cindex W0393

@subsection メッセージ本文

signed long long 型の値が関数 `signed char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
signed char func(void)
{
    long long a = 0;
    return a; /* W0393 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0394
@section W0394
@cindex W0394

@subsection メッセージ本文

signed long long 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
short func(void)
{
    long long a = 0;
    return a; /* W0394 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0395
@section W0395
@cindex W0395

@subsection メッセージ本文

signed long long 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
int func(void)
{
    long long a = 0;
    return a; /* W0395 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0396
@section W0396
@cindex W0396

@subsection メッセージ本文

signed long long 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
long func(void)
{
    long long a = 0;
    return a; /* W0396 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0397
@section W0397
@cindex W0397

@subsection メッセージ本文

unsigned long long 型の値が関数 `unsigned char %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned char func(void)
{
    unsigned long long a = 0;
    return a; /* W0397 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0398
@section W0398
@cindex W0398

@subsection メッセージ本文

unsigned long long 型の値が関数 `unsigned short %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned short func(void)
{
    unsigned long long a = 0;
    return a; /* W0398 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0399
@section W0399
@cindex W0399

@subsection メッセージ本文

unsigned long long 型の値が関数 `unsigned int %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned int func(void)
{
    unsigned long long a = 0;
    return a; /* W0399 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0400} unsigned long long 型の値が関数 `unsigned long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0400
@section W0400
@cindex W0400

@subsection メッセージ本文

unsigned long long 型の値が関数 `unsigned long %s()' から返されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。
また、小さいデータ型にキャストされた結果を表現することができない場合の処理は処理系依存です。

@subsection サンプルコード

@verbatim
unsigned long func(void)
{
    unsigned long long a = 0;
    return a; /* W0400 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0381} signed short 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0382} unsigned short 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0383} signed int 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0384} signed int 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0385} unsigned int 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0386} unsigned int 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0387} signed long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0388} signed long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0389} signed long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0390} unsigned long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0391} unsigned long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0392} unsigned long 型の値が関数 `unsigned int %s()' から返されています。
@item @ref{W0393} signed long long 型の値が関数 `signed char %s()' から返されています。
@item @ref{W0394} signed long long 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0395} signed long long 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0396} signed long long 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0397} unsigned long long 型の値が関数 `unsigned char %s()' から返されています。
@item @ref{W0398} unsigned long long 型の値が関数 `unsigned short %s()' から返されています。
@item @ref{W0399} unsigned long long 型の値が関数 `unsigned int %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0401
@section W0401
@cindex W0401

@subsection メッセージ本文

unsigned char 型の値が関数 `signed short %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
short func(void)
{
    unsigned char a = 0;
    return a; /* W0401 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0402
@section W0402
@cindex W0402

@subsection メッセージ本文

unsigned char 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    unsigned char a = 0;
    return a; /* W0402 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0403
@section W0403
@cindex W0403

@subsection メッセージ本文

unsigned char 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    unsigned char a = 0;
    return a; /* W0403 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0404
@section W0404
@cindex W0404

@subsection メッセージ本文

unsigned short 型の値が関数 `signed int %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
int func(void)
{
    unsigned short a = 0;
    return a; /* W0404 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0405
@section W0405
@cindex W0405

@subsection メッセージ本文

unsigned short 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    unsigned short a = 0;
    return a; /* W0405 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0406
@section W0406
@cindex W0406

@subsection メッセージ本文

unsigned int 型の値が関数 `signed long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long func(void)
{
    unsigned int a = 0;
    return a; /* W0406 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0407
@section W0407
@cindex W0407

@subsection メッセージ本文

unsigned char 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    unsigned char a = 0;
    return a; /* W0407 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0408
@section W0408
@cindex W0408

@subsection メッセージ本文

unsigned short 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    unsigned short a = 0;
    return a; /* W0408 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0409
@section W0409
@cindex W0409

@subsection メッセージ本文

unsigned int 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    unsigned int a = 0;
    return a; /* W0409 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0410} unsigned long 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0410
@section W0410
@cindex W0410

@subsection メッセージ本文

unsigned long 型の値が関数 `signed long long %s()' から返されています。

@subsection 内容

符号なし型から符号つき型への暗黙のキャストにより、結果が意図せず負の数になる可能性があります。

@subsection サンプルコード

@verbatim
long long func(void)
{
    unsigned long a = 0;
    return a; /* W0410 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0401} unsigned char 型の値が関数 `signed short %s()' から返されています。
@item @ref{W0402} unsigned char 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0403} unsigned char 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0404} unsigned short 型の値が関数 `signed int %s()' から返されています。
@item @ref{W0405} unsigned short 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0406} unsigned int 型の値が関数 `signed long %s()' から返されています。
@item @ref{W0407} unsigned char 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0408} unsigned short 型の値が関数 `signed long long %s()' から返されています。
@item @ref{W0409} unsigned int 型の値が関数 `signed long long %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0411
@section W0411
@cindex W0411

@subsection メッセージ本文

列挙体は、最初だけ初期化するか、全てを初期化するか、全く初期化しないかのいずれかにしてください。

@subsection 内容

“列挙型の初期化が不十分”と判断されるのは、サンプルコードのような初期化の場合です。
このような初期化を行うと、@code{spring} や @code{winter} がどのような値で初期化されているのかがわかりづらくなります。
また、意図的に行っているのか、一部の初期化を忘れているのかの判断も難しくなります。
以上より、混乱を招く可能性の高い記述だと言えます。

@subsection サンプルコード
@verbatim
enum SEASON1 { /* W0411 */
    SPRING,
    SUMMER = 4,
    AUTUMN = 8,
    WINTER
};

enum SEASON2 { /* OK */
    SPRING,
    SUMMER,
    AUTUMN,
    WINTER
};

enum SEASON3 { /* OK */
    SPRING = 0,
    SUMMER = 1,
    AUTUMN = 2,
    WINTER = 3
};

enum SEASON4 { /* OK */
    SPRING = 1,
    SUMMER,
    AUTUMN,
    WINTER
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0413
@section W0413
@cindex W0413

@subsection メッセージ本文

制御文の本体が `@{@}' で囲まれたブロックになっていません。

@subsection 内容

波括弧がなければ、本体がどこまでなのかが直感的にわかりづらくなるデメリットがあります。
また、制御文における本体が単一文で済まなくなったときに、波括弧をつけ忘れるリスクもあります。

@subsection サンプルコード

@verbatim
if (x > 0)
    x++; /* W0413 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0414} 制御文の本体が同じ行にあり、`@{@}' で囲まれたブロックになっていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0414
@section W0414
@cindex W0414

@subsection メッセージ本文

制御文の本体が同じ行にあり、`@{@}' で囲まれたブロックになっていません。

@subsection 内容

波括弧がなければ、本体がどこまでなのかが直感的にわかりづらくなるデメリットがあります。
また、制御文における本体が単一文で済まなくなったときに、波括弧をつけ忘れるリスクもあります。

@subsection サンプルコード

@verbatim
if (x > 0) x++; /* W0414 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0413} 制御文の本体が `@{@}' で囲まれたブロックになっていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0421
@section W0421
@cindex W0421

@subsection メッセージ本文

値が NULL になるポインタに対して間接参照が行われています。

@subsection 内容

@code{NULL} ポインタを間接参照するときの動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int *p)
{
    int b;

    if (p) {
        b = *p; /* OK */
    }
    else {
        b = *p; /* W0421 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1004} ここで該当変数に NULL の値を割り当てました。
@item @ref{C1005} ここで該当変数に NULL の可能性がある値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0422
@section W0422
@cindex W0422

@subsection メッセージ本文

値が NULL になることがあるポインタに対して間接参照が行われています。

@subsection 内容

@code{NULL} ポインタを間接参照するときの動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int *p)
{
    int b;

    if (p) {
        b = *p; /* OK */
    }

    b = *p; /* W0422 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1004} ここで該当変数に NULL の値を割り当てました。
@item @ref{C1005} ここで該当変数に NULL の可能性がある値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0423
@section W0423
@cindex W0423

@subsection メッセージ本文

値が NULL になるポインタに対して算術演算を行っています。

@subsection 内容

@code{NULL} ポインタに対して算術演算するときの動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *func(int *p)
{
    if (p) {
        return p + 1; /* OK */
    }
    else {
        return p + 1; /* W0423 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1004} ここで該当変数に NULL の値を割り当てました。
@item @ref{C1005} ここで該当変数に NULL の可能性がある値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0424
@section W0424
@cindex W0424

@subsection メッセージ本文

値が NULL になることがあるポインタに対して算術演算を行っています。

@subsection 内容

@code{NULL} ポインタに対して算術演算するときの動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *func(int *p)
{
    int a;

    if (p) {
        a = *(p + 1); /* OK */
    }

    return p + 1; /* W0424 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1004} ここで該当変数に NULL の値を割り当てました。
@item @ref{C1005} ここで該当変数に NULL の可能性がある値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0425
@section W0425
@cindex W0425

@subsection メッセージ本文

一つの行に複数の宣言または文が存在します。

@subsection 内容

1 行中に複数の宣言や文を書くことは文法上の誤りではありませんが、コードがやや複雑になります。

@subsection サンプルコード

@verbatim
int a, b; /* W0425 */
int a; int b; /* W0425 */
struct C { int i; } c = { 0 }; c.i = a; /* W0425 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0431
@section W0431
@cindex W0431

@subsection メッセージ本文

この行は以前の同じ深さのインデントより左にずれています。

@subsection 内容

インデントの付け方に一貫性が保たれていないと、解析性が低下します。

@subsection サンプルコード

@verbatim
void func()
{
    int a;
int b; /* W0431 */
    a = var();
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0432} この行はプロジェクトのインデントスタイルと合っていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0432
@section W0432
@cindex W0432

@subsection メッセージ本文

この行はプロジェクトのインデントスタイルと合っていません。

@subsection 内容

インデントの付け方に一貫性が保たれていないと、解析性が低下します。

@subsection サンプルコード

@verbatim
void func()
{
    int a;
      int b; /* W0432 */
    a = var();
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0431} この行は以前の同じ深さのインデントより左にずれています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0440
@section W0440
@cindex W0440

@subsection メッセージ本文

この閉じカッコ `@}' は、対応する開きカッコ `@{' に合うようなインデントに置かれていません。

@subsection 内容

制御文の開き波括弧と閉じ波括弧の配置を合っていないコードはスタイルの統一感がないという意味で解析性が低下します。

@subsection サンプルコード

@verbatim
void func()
{
    if (x == 0)
    {
        if (y == 0)
        {
            ...snip...
    } /* W0440 */
        } /* W0440 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0441
@section W0441
@cindex W0441

@subsection メッセージ本文

接尾辞がない整数リテラルの型が、int 型ではありません。

@subsection 内容

整数定数の型が @code{int} 型でない場合、どのような型になるかは、接尾語の有無、サイズ、@code{int} の処理系依存のサイズなどによって決まります。
従って、接尾語がない場合、整数定数の型が不明確となり解析性が低下します。

@subsection サンプルコード

@verbatim
int i = 0x1234; /* W0441 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0442
@section W0442
@cindex W0442

@subsection メッセージ本文

関数形式マクロが定義されています。

@subsection 内容

関数形式マクロは関数呼び出しのオーバーヘッドがない分だけ効率性にメリットがある反面、
実引数に対する型チェックが行われない、ブレークポイント等を用いたデバッグが行いにくい、などのデメリットがあります。

@subsection サンプルコード

@verbatim
#define MAX(a, b) (a < b ? b : a) /* W0442 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0443} この関数形式マクロは関数で置き換えることができる可能性があります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0443
@section W0443
@cindex W0443

@subsection メッセージ本文

この関数形式マクロは関数で置き換えることができる可能性があります。

@subsection 内容

関数形式マクロは関数呼び出しのオーバーヘッドがない分だけ効率性にメリットがある反面、
実引数に対する型チェックが行われない、ブレークポイント等を用いたデバッグが行いにくい、などのデメリットがあります。

@subsection サンプルコード

@verbatim
#define MACRO(a, b) (a * b) /* W0443 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0442} 関数形式マクロが定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0444
@section W0444
@cindex W0444

@subsection メッセージ本文

`#' 演算子と `##' 演算子が一つのマクロ定義内で使われています。

@subsection 内容

プリプロセッサが @code{#} 演算子や @code{##} 演算子を評価する順番は、 ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define MACRO(a) L ## #a /* W0444 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0445} 複数の `##' 演算子が一つのマクロ定義内で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0445
@section W0445
@cindex W0445

@subsection メッセージ本文

複数の `##' 演算子が一つのマクロ定義内で使われています。

@subsection 内容

プリプロセッサが @code{#} 演算子や @code{##} 演算子を評価する順番は、 ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define MACRO(prefix, name, suffix) int i = prefix##name##suffix /* W0445 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0444} `#' 演算子と `##' 演算子が一つのマクロ定義内で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0446
@section W0446
@cindex W0446

@subsection メッセージ本文

代入演算の結果値が使われています。

@subsection 内容

1 つの式の中に、複数の代入演算子や複合代入演算子を使用すると、文が複雑になります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;
    int b;

    a = b += 3; /* W0446 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0447
@section W0447
@cindex W0447

@subsection メッセージ本文

カンマ演算子が for 文の制御式以外で使われています。

@subsection 内容

カンマ演算子は複数の式を一つの文で書きたいときに使用します。主な用途は @code{for} 文です。@code{for} 文以外で使用するとコードが複雑になります。

@subsection サンプルコード

@verbatim
int a = 1;
int b = 0;

int c = (b = a, a); /* W0447 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0456
@section W0456
@cindex W0456

@subsection メッセージ本文

外部結合を持つオブジェクトあるいは関数 `%s' が、ヘッダファイル内で定義されています。

@subsection 内容

ヘッダファイルは通常は複数のファイルからインクルードされることを想定します。このようなヘッダファイルに外部結合を持つオブジェクトや関数が定義されていると、インクルードされている数分定義されることになり、通常はリンクエラーとなります。

@subsection サンプルコード

@file{test.h}
@verbatim
int num = 1; /* W0456 */

int func(void) /* W0456 */
{
    return num;
}
@end verbatim

@file{test.c}
@verbatim
#include "test.h"
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0457
@section W0457
@cindex W0457

@subsection メッセージ本文

関数の宣言あるいは定義で、戻り値型が明示的に定義されていないので、暗黙的に int 型と定義されます。

@subsection 内容

関数宣言の際に型を明示しなければ、暗黙的に @code{int} 型の関数として宣言されます。これはコードを省略したい動機で使われることもあるかもしれませんが、コードの明確さが失われ、解析性を低下させます。

@subsection サンプルコード

@verbatim
func1(void); /* W0457 */

func2(void) /* W0457 */
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0458
@section W0458
@cindex W0458

@subsection メッセージ本文

オブジェクトの宣言あるいは定義で、型が明示的に定義されていないので、暗黙的に int 型と定義されます。

@subsection 内容

オブジェクト宣言の際に型を明示しなければ、暗黙的に @code{int} 型の関数として宣言されます。これはコードを省略したい動機で使われることもあるかもしれませんが、コードの明確さが失われ、解析性を低下させます。

@subsection サンプルコード

@verbatim
a; /* W0458 */
b = 0; /* W0458 */
extern c; /* W0458 */
static d; /* W0458 */

int func(e) /* W0458 */
{
    const f = e; /* W0458 */
    return f;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0459
@section W0459
@cindex W0459

@subsection メッセージ本文

変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。

@subsection 内容

変数を明示的に初期化しない場合、静的変数とグローバル変数は暗黙的に 0 で初期化されますが、自動変数は不定になります。
従って、そのような自動変数を使用すると予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int a;

if(a > 0) { /* W0459 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1003} ここで該当変数が初期値を指定せずに定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0460
@section W0460
@cindex W0460

@subsection メッセージ本文

変数 `%s' の値は、この式の評価時点では設定されていないことがあります。

@subsection 内容

変数を明示的に初期化しない場合、静的変数とグローバル変数は暗黙的に 0 で初期化されますが、自動変数は不定になります。
従って、そのような自動変数を使用すると予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    int b;

    if (a == 0) {
        b = 1;
    }

    if (b > 0) { /* W0460 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1003} ここで該当変数が初期値を指定せずに定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0461
@section W0461
@cindex W0461

@subsection メッセージ本文

値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。

@subsection 内容

変数を明示的に初期化しない場合、静的変数とグローバル変数は暗黙的に 0 で初期化されますが、自動変数は不定になります。
従って、そのような自動変数を使用すると予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern int func1(const int *);

void func2(int a)
{
  int b;

  func1(&a); /* OK */
  func1(&b); /* W0461 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1003} ここで該当変数が初期値を指定せずに定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0462
@section W0462
@cindex W0462

@subsection メッセージ本文

値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。

@subsection 内容

変数を明示的に初期化しない場合、静的変数とグローバル変数は暗黙的に 0 で初期化されますが、自動変数は不定になります。
従って、そのような自動変数を使用すると予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern int func1(const int *);

int func2(int a)
{
    int b;

    if (a > 10) {
        b = a + 10;
    }

    func1(&b); /* W0462 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1003} ここで該当変数が初期値を指定せずに定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0477
@section W0477
@cindex W0477

@subsection メッセージ本文

マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。

@subsection 内容

このようなマクロ定義は、プロジェクトやプログラマに特有のものになりがちなため、
外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define BEGIN { /* W0477 */
#define END } /* W0477 */

void func()
BEGIN
    ...snip...
END
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0478
@section W0478
@cindex W0478

@subsection メッセージ本文

このマクロは、認識不可能なコードの断片を定義しています。

@subsection 内容

このようなマクロ定義は、プロジェクトやプログラマに特有のものになりがちなため、
外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define MALLOC_OR_DIE(ptr, size) ptr = malloc(size); if (!ptr) exit(1); /* W0478 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0479
@section W0479
@cindex W0479

@subsection メッセージ本文

このマクロ定義は typedef 宣言に置換することができます。

@subsection 内容

外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define foo unsigned int /* W0479 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0480
@section W0480
@cindex W0480

@subsection メッセージ本文

このマクロは、制御文のキーワード、演算子、あるいは区切り文字を定義しています。

@subsection 内容

外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define PLUS + /* W0480 */
#define LOOP while /* W0480 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0481
@section W0481
@cindex W0481

@subsection メッセージ本文

このマクロは、`@{@}' で囲まれたブロックを定義しています。

@subsection 内容

外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define SETUP(a, b) /* W0481 */ \
    { \
        if (a) \
            b = 0; \
        else \
            b = 1; \
    }
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0482
@section W0482
@cindex W0482

@subsection メッセージ本文

このマクロは、いずれかの型指定子を定義しています。

@subsection 内容

外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define COMPOSITE struct /* W0482 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0483} このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0483
@section W0483
@cindex W0483

@subsection メッセージ本文

このマクロは、記憶域クラス指定子と型修飾子の組みを定義しています。

@subsection 内容

外部の人が見たときの解析性が大幅に低下します。

@subsection サンプルコード

@verbatim
#define PRIVATE_FINAL static const /* W0483 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0477} マクロ定義の中に、対になっていない `[]'、`()'、`@{@}' が存在します。
@item @ref{W0478} このマクロは、認識不可能なコードの断片を定義しています。
@item @ref{W0479} このマクロ定義は typedef 宣言に置換することができます。
@item @ref{W0480} このマクロは、制御文のキーワード、あるいは句読文字を定義しています。
@item @ref{W0481} このマクロは、`@{@}' で囲まれたブロックを定義しています。
@item @ref{W0482} このマクロは、いずれかの型指定子を定義しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0488
@section W0488
@cindex W0488

@subsection メッセージ本文

関数呼び出し `()'、配列添字演算 `[]'、あるいは構造体/共用体メンバ演算 `->' または `.' が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、
チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
while (func(&a, &b) < 0 && i > 0) { /* W0488 */
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0489} 単項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0490} 二項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0489
@section W0489
@cindex W0489

@subsection メッセージ本文

単項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、
チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(unsigned int a, unsigned int b)
{
    unsigned int c = !a && b; /* W0489 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0488} 関数呼び出し `()' 、配列添字演算 `[]' 、あるいは構造体/共用体メンバ演算 `->' または `.' が、&& あるいは || と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0490} 二項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0490
@section W0490
@cindex W0490

@subsection メッセージ本文

二項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、
チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(unsigned int a, unsigned int b, unsigned int c)
{
    unsigned int d = a && b || c; /* W0490 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0488} 関数呼び出し `()' 、配列添字演算 `[]' 、あるいは構造体/共用体メンバ演算 `->' または `.' が、&& あるいは || と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0489} 単項演算子が、`&&' あるいは `||' と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0491
@section W0491
@cindex W0491

@subsection メッセージ本文

同じ識別子名 `%s' は他の名前空間内の宣言でも使われています。

@subsection 内容

名前空間が異なるからといって、同じ名前の識別子を使用すると、コードが紛らわしくなります。

@subsection サンプルコード

@verbatim
extern int foo;

struct foo { /* W0491 */
    int a;
    int b;
};
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0492} 同じ識別子名 `%s' が構造体/共用体のメンバの他に、ラベル、タグ、または通常の識別子としても使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0492
@section W0492
@cindex W0492

@subsection メッセージ本文

同じ識別子名 `%s' が構造体/共用体のメンバの他に、ラベル、タグ、または通常の識別子としても使われています。

@subsection 内容

名前空間が異なるからといって、同じ名前の識別子を使用すると、コードが紛らわしくなります。

@subsection サンプルコード

@verbatim
extern int foo;

struct a {
    int foo; /* W0492 */
    int b;
};

void func(void)
{
    struct a a;
    int b; /* W0492 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0491} 同じ識別子名 `%s' は他の名前空間内の宣言でも使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0493
@section W0493
@cindex W0493

@subsection メッセージ本文

構造体あるいは共用体の値を関数の実引数として渡しています。

@subsection 内容

引数にオブジェクトの値を渡すと、それらの要素のサイズ分スタックメモリを消費することになり、パフォーマンスの面でデメリットがあります。

@subsection サンプルコード

@verbatim
struct STR {
    long a;
    long b;
};

extern int foo(struct STR s);

void func(void)
{
    struct STR s = { 0 };

    foo(s); /* W0493 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0495
@section W0495
@cindex W0495

@subsection メッセージ本文

演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int x = a % b  * c; /* W0495 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0496
@section W0496
@cindex W0496

@subsection メッセージ本文

三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c, int d, int e)
{
    int f = a ? b : c ? d : e; /* W0496 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0497
@section W0497
@cindex W0497

@subsection メッセージ本文

シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a << b << c; /* W0497 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0498
@section W0498
@cindex W0498

@subsection メッセージ本文

二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a - b + c; /* W0498 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0499
@section W0499
@cindex W0499

@subsection メッセージ本文

+ - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a << b >> c; /* W0499 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0500
@section W0500
@cindex W0500

@subsection メッセージ本文

二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a * b + c;  /* W0500 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0501
@section W0501
@cindex W0501

@subsection メッセージ本文

三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a ? a : a + c; /* W0501 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0502} + - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0502
@section W0502
@cindex W0502

@subsection メッセージ本文

+ - * / % 以外の二項演算子が、異なる優先順位の二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。

@subsection 内容

演算子の評価順序は ISO C90 で定められているため、曖昧さはありませんが、チーム内のメンバ全員がその順序を把握することは容易ではありません。
従って、ほとんどのメンバにとって評価順序が不明確になるため、解析性が低下します。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    int d = a != b << c; /* W0502 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0495} 演算子 % が、他の算術演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0496} 三項演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0497} シフト演算子、関係演算子、あるいは等価演算子が複数回使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0498} 二項演算子 + - * / のうち、同じ優先順位の異なる演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0499} + - * / % 以外の二項演算子のうち、同じ優先順位の異なる二項演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0500} 二項演算子 + - * / のうち、異なる優先順位の演算子が共に使われています。`()' で結合を明確にすることを勧めます。
@item @ref{W0501} 三項演算子が、二項演算子と共に使われています。`()' で結合を明確にすることを勧めます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0508
@section W0508
@cindex W0508

@subsection メッセージ本文

`&&' あるいは `||' 演算子の右オペランドに副作用があります。

@subsection 内容

&& 演算子および || 演算子は短絡評価の方式で処理されます。
したがって、これらの右オペランドに副作用を含む式がある場合、
その副作用の有無が左オペランドに依存することになります。
これは非常に紛らわしく、バグが入り込む可能性を高めます。

@subsection サンプルコード

@verbatim
if ((a == b) && ((c = func()) == d)) /* W0508 */
@end verbatim

@code{c} には、 @code{a==b} の評価が真の場合にのみ @code{func()} の戻り値が代入されます。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0511
@section W0511
@cindex W0511

@subsection メッセージ本文

C++ コメント `//' が使われています。

@subsection 内容

@code{//} コメントは ISO C90 で規定されておらず、言語拡張に該当します。言語拡張を使用すると移植性が低下します。

@subsection サンプルコード

@verbatim
// W0511
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0512
@section W0512
@cindex W0512

@subsection メッセージ本文

`++' あるいは `--' 演算子の結果が式の中で使われています。

@subsection 内容

このような式では @code{++} 演算子や @code{--} 演算子の評価順の認識誤りがあれば、意図しない結果になる可能性が高いです。
見た目にも複雑な式になり、理解が困難かつ誤った理解をしやすいなどのデメリットもあります。

@subsection サンプルコード

@verbatim
a = b++ + --c + d++; /* W0512 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0525
@section W0525
@cindex W0525

@subsection メッセージ本文

1 ビットの名前が付いたフィールドが符号付き型として宣言されています。

@subsection 内容

1 ビットの符号付ビットフィールドで表すことができるのは "-1" と "0" のみで、"1" を表すことはできません。
このようなビットフィールドは用途が考えづらく、理解が困難です。

@subsection サンプルコード

@verbatim
struct ST {
    int bit:1; /* W0525 */
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0528
@section W0528
@cindex W0528

@subsection メッセージ本文

このマクロは、8 進数定数を定義しています。

@subsection 内容

0 で始まる定数は 8 進数として解釈されます。 10 進数と比べて紛らわしいです。

@subsection サンプルコード

@verbatim
#define MACRO 0123 /* W0528 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0529} 8 進数リテラルが使われています。
@item @ref{W0530} 文字定数または文字列リテラルの中で、8 進拡張表記が使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0529
@section W0529
@cindex W0529

@subsection メッセージ本文

8 進数リテラルが使われています。

@subsection 内容

0 で始まる定数は 8 進数として解釈されます。 10 進数と比べて紛らわしいです。

@subsection サンプルコード

@verbatim
#define MACRO 0123

int a = 0123; /* W0529 */
int b = MACRO; /* W0529 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0528} このマクロは、8 進数定数を定義しています。
@item @ref{W0530} 文字定数または文字列リテラルの中で、8 進拡張表記が使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0530
@section W0530
@cindex W0530

@subsection メッセージ本文

文字定数または文字列リテラルの中で、8 進拡張表記が使われています。

@subsection 内容

0 で始まる定数は 8 進数として解釈されます。 10 進数と比べて紛らわしいです。

@subsection サンプルコード

@verbatim
char *s = "\012"; /* W0530 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0528} このマクロは、8 進数定数を定義しています。
@item @ref{W0529} 8 進数リテラルが使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0532
@section W0532
@cindex W0532

@subsection メッセージ本文

switch 文の case 節、default 節から出るために break 文が使われていますが、case 節の末尾に記述されていません。

@subsection 内容

@code{break} 文は、@code{case} 文内の末尾でのみ使用されるべきです。

@subsection サンプルコード

@verbatim
switch (x) {
case 1:
    if (y == 0) {
        break; /* W0532 */
    }
    ...snip...
    break;
case 2:
    ...snip...
    break;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0534
@section W0534
@cindex W0534

@subsection メッセージ本文

制御変数 `%s' は、この for 文制御式で初期化されていません。

@subsection 内容

ループ制御変数は必ずしも @code{for} 文の初期化式の中で初期化しないといけないわけではありません。
しかし、@code{for} 文以前のどこかから初期化文を探すよりも、@code{for} 文の初期化式に初期化文が書いている方がわかりやすいといえます。

@subsection サンプルコード

@verbatim
int i = 0;
int j;

for (; i < 10; i++) { /* W0534 */
}

for (j = 0; i < 20; i++) { /* W0534 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0535
@section W0535
@cindex W0535

@subsection メッセージ本文

for 文の制御式の中にカンマ演算子が使われています。

@subsection 内容

@code{for} 文におけるカンマ演算子の使用は、@code{for} 文以外での使用よりはデメリットが少ないと言えます。
しかし、程度は小さいながらも解析性を低下させることに変わりはありません。

@subsection サンプルコード

@verbatim
int i, j, k = 0;

for (i = 0, j = 0; i < 10; i++, j++, k--) { /* W0535 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0538
@section W0538
@cindex W0538

@subsection メッセージ本文

この default ラベルは、switch 文内の最後のラベルではありません。

@subsection 内容

@code{switch} 文において @code{default} 節が末尾でない場合、その節以降の @code{case} 節が判定されません。
これは、ほどんどの場合プログラマの意図ではないと想定されます。

@subsection サンプルコード

@verbatim
switch (x) {
default: /* W0538 */
    ...snip...
case 1:
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0540
@section W0540
@cindex W0540

@subsection メッセージ本文

空の仮引数並びの関数が定義されています。`void' が省略されています。

@subsection 内容

引数を持たない関数定義で @code{void} を使用しない書き方は、古い形式の関数定義と見なされ、意図しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func() /* W0540 */
{
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0541
@section W0541
@cindex W0541

@subsection メッセージ本文

マクロで隠蔽されないインラインアセンブリコードです。

@subsection 内容

アセンブラコードは環境によって変わるため、複数の関数に点在させると、別の環境に移植するときの変更コストが大きくなります。

@subsection サンプルコード

@verbatim
#define ASM_CODE asm("movl %ecx, %eax")

void foo(int arg1, int *arg2, int arg3)
{
    asm("movl %ecx, %eax"); /* W0541 */
    __asm__("movl %ecx, (%eax)"); /* W0541 */

    asm { /* W0541 */
        xorl eax, eax
    }

    ASM_CODE; /* OK */

    __asm__ volatile ( /* W0541 */
            "int $0x80"
            : "=a" (r)
              "+b" (arg1),
              "+c" (arg2),
              "+d" (arg3)
            : "a" (128)
            : "memory", "cc");
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W0542
@section W0542
@cindex W0542

@subsection メッセージ本文

関数宣言の仮引数の一部にのみ識別子が存在します。

@subsection 内容

関数定義の仮引数名が対応する宣言の仮引数名と異なる場合、その関数の仕様変更が未完了となる可能性があります。

@subsection サンプルコード

@verbatim
void func(int i, char, int, char c); /* W0542 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0543
@section W0543
@cindex W0543

@subsection メッセージ本文

この関数宣言における仮引数の識別子は、以前の宣言の仮引数の識別子と異なります。

@subsection 内容

関数定義の仮引数名が対応する宣言の仮引数名と異なる場合、その関数の仕様変更が未完了となる可能性があります。

@subsection サンプルコード

@verbatim
void func(int i1, int i2);

void func(int i2, int i1) /* W0543 */
{
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0544} 関数宣言の仮引数の識別子と関数ポインタの宣言の仮引数の識別子が異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0544
@section W0544
@cindex W0544

@subsection メッセージ本文

関数宣言の仮引数の識別子と関数ポインタの宣言の仮引数の識別子が異なります。

@subsection 内容

関数定義の仮引数名が対応する宣言の仮引数名と異なる場合、その関数の仕様変更が未完了となる可能性があります。

@subsection サンプルコード

@verbatim
void func(int i1, int i2);
void (*p)(int i2, int i1) = &func; /* W0544 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0543} この関数宣言における仮引数の識別子は、以前の宣言の仮引数の識別子と異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0546
@section W0546
@cindex W0546

@subsection メッセージ本文

switch 文の case ラベルあるいは default ラベルが、ネストされたブロックの中に存在します。

@subsection 内容

@code{switch} 文中の入れ子ブロックの中に @code{case} 節や @code{default} 節を記述することは可能ですが、文が複雑になります。
また、入れ子ブロックが条件文になっている場合には構造化定理の側面から見ても怪しいものになってしまいます。

@subsection サンプルコード

@verbatim
switch (x) {
case 1:
    if (y > 0) {
    case 2: /* W0546 */
        break;
    }
    ...snip...
    break;
default:
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0549
@section W0549
@cindex W0549

@subsection メッセージ本文

マクロの仮引数が `()' で囲まれていません。

@subsection 内容

マクロ仮引数が式である場合に、演算子の優先順位に関して問題が生じる可能性があります。

@subsection サンプルコード

@verbatim
#define ADD(a, b) a + b /* W0549 */

int x = 3 * ADD(1, 2);
@end verbatim

上記コードでは、 @code{3 * (1 + 2) = 9} ではなく、@code{(3 * 1) + 2 = 5} が @code{x} に代入されます。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0551
@section W0551
@cindex W0551

@subsection メッセージ本文

共用体型指定子が定義されています。

@subsection 内容

共用体では、メンバがどのような順番でメモリに配置されるかが環境依存になります。従って、移植性が低下します。

@subsection サンプルコード

@verbatim
union UNI { /* W0551 */
    int a;
    short b;
    long c;
};
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0552} 共用体型のオブジェクトが定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0552
@section W0552
@cindex W0552

@subsection メッセージ本文

共用体型のオブジェクトが定義されています。

@subsection 内容

共用体では、メンバがどのような順番でメモリに配置されるかが環境依存になります。従って、移植性が低下します。

@subsection サンプルコード

@verbatim
union UNI {
    int a;
    short b;
    long c;
};

union UNI u; /* W0552 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0551} 共用体型指定子が定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0553
@section W0553
@cindex W0553

@subsection メッセージ本文

関数を指すポインタが、異なる関数ポインタ型へキャストされています。

@subsection 内容

異なる関数ポインタ型へのキャストを使用しても問題ない処理系が多いですが、中には関数ポインタのキャストを実施した時点でアボートするような処理系も存在します。

@subsection サンプルコード

@verbatim
extern int func(void);

void (*p)(int) = (void (*)(int)) &func; /* W0553 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0554
@section W0554
@cindex W0554

@subsection メッセージ本文

`#pragma' の実引数 `%s' は認識できません。この `#pragma' 指令は無視されました。

@subsection 内容

@code{#pragma} ディレクティブで実行できる命令の内容や種類は処理系依存になります。従って、@code{#pragma} ディレクティブを使用するだけで移植性が低下します。

@subsection サンプルコード

@verbatim
#pragma SystemSpecificPragmaName 5 /* W0544 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0555
@section W0555
@cindex W0555

@subsection メッセージ本文

この関数はプロジェクト中で間接的に再帰呼び出しされています。

@subsection 内容

再帰関数は、効率性の面で「処理が遅くなる」、「スタックを想定以上に使用してしまう可能性がある」などのデメリットがあります。
また、無限ループに陥る可能性があるため危険だという側面もあります。

@subsection サンプルコード

@file{test1.c}
@verbatim
int func1(int i) /* W0555 */
{
    if (i < 10) {
        return i + 1;
    }
    else {
        return func3(i);
    }
}
@end verbatim

@file{test2.c}
@verbatim
int func2(int i) /* W0555 */
{
    return func1(i) + 2;
}
@end verbatim

@file{test3.c}
@verbatim
int func3(int i) /* W0555 */
{
    return func2(i) + 3;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0556} この呼び出しを含む関数は、再帰呼び出しされています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0556
@section W0556
@cindex W0556

@subsection メッセージ本文

この呼び出しを含む関数は、再帰呼び出しされています。

@subsection 内容

再帰関数は、効率性の面で、「処理が遅くなる」、「スタックを想定以上に使用してしまう可能性がある」、などのデメリットがあります。
また、無限ループに陥る可能性があるため危険だという側面もあります。

@subsection サンプルコード

@verbatim
int func(int i)
{
    if (i == 0) {
        return 0;
    }
    else {
        return func(i - 1); /* W0556 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0555} この関数はプロジェクト中で間接的に再帰呼び出しされています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0559
@section W0559
@cindex W0559

@subsection メッセージ本文

`!' 演算子のオペランドが算術演算あるいはビット演算の式になっています。

@subsection 内容

正しい単項演算子の使い方をしていません。ビット単位の論理積 `&' または論理和 `|' を使用すべきです。

@subsection サンプルコード

@verbatim
int func(int a, int b)
{
    if (!(a || b)) {
        return 0;
    }
    else {
        return !(a & b); /* W0559 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0560} `~' 演算子のオペランドがブール型式になっています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0560
@section W0560
@cindex W0560

@subsection メッセージ本文

`~' 演算子のオペランドがブール型式になっています。

@subsection 内容

正しい単項演算子の使い方をしていません。論理否定演算子 `!' を使用すべきです。

@subsection サンプルコード

@verbatim
int func(int a, int b)
{
    return ~((a < b) && (b > 0)); /* W0560 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0559} `!' 演算子のオペランドが算術演算あるいはビット演算の式になっています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0561
@section W0561
@cindex W0561

@subsection メッセージ本文

`*p++' の意味は、`(*p)++' ではなく、`*(p++)' です。`*' 演算子は冗長です。

@subsection 内容

プログラムの動作に寄与しない文の具体例としてサンプルコードの例が挙げられます。
この文は @code{*(p++)} と同義になるため、@code{p++} とした場合と処理結果は変わりません。
従って @code{*} 演算子が冗長といえます。冗長な記述が削除されずにコード中に残ることで解析性が低下します。

@subsection サンプルコード

@verbatim
*p++; /* W0561 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0562
@section W0562
@cindex W0562

@subsection メッセージ本文

初期化子の中に余分な `@{@}' があります。

@subsection 内容

ここでの余分な波括弧とは、配列の初期化子でいうとサンプルコードの配列 @code{ng} における外側から一つ内側にある波括弧です。
このような波括弧は冗長であり、配列要素の数を変えるときなどに修正ミスを生じやすくさせます。

@subsection サンプルコード

@verbatim
int ng[3][2] = { { {1, 2}, { 3, 4}, { 5, 6 } } }; /* W0562 */

int ok[3][2] = { { 1, 2 }, { 3, 4 }, { 5, 6 } }; /* OK */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0563
@section W0563
@cindex W0563

@subsection メッセージ本文

このブロックの外側からラベル `%s' へジャンプした場合、ローカル変数は初期化されません。

@subsection 内容

不定値を使うことで予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int b)
{
    if (a == 0) {
        if (b != 0) {
            goto ERR;
        }
    }
    else {
        int c = 0;
    ERR:  /* W0563 */
        b = c;
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0564} この goto 文がラベル `%s' へジャンプした場合、ローカル変数は初期化されません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0564
@section W0564
@cindex W0564

@subsection メッセージ本文

この goto 文がラベル `%s' へジャンプした場合、ローカル変数は初期化されません。

@subsection 内容

不定値を使うことで予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int b)
{
    if (a == 0) {
        int c = 0;
    RETRY:
        b = c;
    }

    if (b != 0) {
        goto RETRY; /* W0564 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0563} このブロックの外側からラベル `%s' へジャンプした場合、ローカル変数は初期化されません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0565
@section W0565
@cindex W0565

@subsection メッセージ本文

汎整数型を volatile ポインタ型(あるいはその逆)へキャストしています。

@subsection 内容

このようなキャストの動作は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
unsigned int a = 0xFFFFU;
volatile unsigned int *b = (volatile unsigned int *) a; /* W0565 */
unsigned int c = (unsigned int) b; /* W0565 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0566} 汎整数型を関数ポインタ型(またはその逆)へキャストしています。
@item @ref{W0567} 汎整数型をオブジェクトを指すポインタ(あるいはその逆)へキャストしています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0566
@section W0566
@cindex W0566

@subsection メッセージ本文

汎整数型を関数ポインタ型(またはその逆)へキャストしています。

@subsection 内容

このようなキャストの動作は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
unsigned int addr = 0xFFFFFFFFU;
void (*p)(int, long) = (void (*)(int, long)) addr; /* W0566 */
int i = (int) p; /* W0566 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0565} 汎整数型を volatile ポインタ型(あるいはその逆)へキャストしています。
@item @ref{W0567} 汎整数型をオブジェクトを指すポインタ(あるいはその逆)へキャストしています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0567
@section W0567
@cindex W0567

@subsection メッセージ本文

汎整数型をオブジェクトを指すポインタ(あるいはその逆)へキャストしています。

@subsection 内容

このようなキャストの動作は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
unsigned int addr = 0xFFFFFFFFU;
void (*p)(int, long) = (void (*)(int, long)) addr; /* W0567 */
int i = (int) p; /* W0567 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0565} 汎整数型を volatile ポインタ型(あるいはその逆)へキャストしています。
@item @ref{W0566} 汎整数型を関数ポインタ型(またはその逆)へキャストしています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0568
@section W0568
@cindex W0568

@subsection メッセージ本文

符号付き定数式の値を左シフト演算した結果は、未定義になります。

@subsection 内容

このようなシフト演算は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
int a = 0x7FFFFFFF << 1; /* W0568 */
int b = -5 << 1; /* W0568 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0569} 符号付きの式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0570} 符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0569
@section W0569
@cindex W0569

@subsection メッセージ本文

符号付きの式の値を左シフト演算した結果は、未定義になります。

@subsection 内容

このようなシフト演算は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
int func(int a)
{
    if (a >= 0x40000000) {
        return a << 1; /* W0569 */
    }

    if (a < 0) {
        return a << 1; /* W0569 */
    }

    return a << 1;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0568} 符号付き定数式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0570} 符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0570
@section W0570
@cindex W0570

@subsection メッセージ本文

符号付きの式の値を左シフト演算した結果は、未定義になることがあります。

@subsection 内容

このようなシフト演算は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
int func(int a)
{
    if (a >= 0x10000000) {
        return a << 1; /* W0570 */
    }

    if (a < 10) {
        return a << 1; /* W0570 */
    }

    return a << 1;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0568} 符号付き定数式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0569} 符号付きの式の値を左シフト演算した結果は、未定義になります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0571
@section W0571
@cindex W0571

@subsection メッセージ本文

符号付きデータの右シフト演算には、処理系によって論理シフトと算術シフトの両方の可能性があります。

@subsection 内容

このような符号付き型の演算は、符号ビットがゼロになる(論理シフト)場合と符号ビットを複製したものに置き換わる(算術シフト)場合があり、
どちらになるかは処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
int func(int a)
{
    return a >> 3; /* W0571 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0572} 符号付きのデータに対するビット演算は処理系定義の結果になります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0572
@section W0572
@cindex W0572

@subsection メッセージ本文

符号付きのデータに対するビット演算は処理系定義の結果になります。

@subsection 内容

このような符号付き型の演算は、符号ビットがゼロになる(論理シフト)場合と符号ビットを複製したものに置き換わる(算術シフト)場合があり、
どちらになるかは処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
void func(short a)
{
    short b;

    b = a >> 8; /* W0572 */
    b <<= 1; /* W0572 */
    b = a & 15; /* W0572 */
    b = a | 15; /* W0572 */
    b = a ^ 15; /* W0572 */
    b = ~a; /* W0572 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0571} 符号付きデータの右シフト演算には、処理系によって論理シフトと算術シフトの両方の可能性があります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0573
@section W0573
@cindex W0573

@subsection メッセージ本文

`[]' 内の走査セットの `-' 文字は、処理系定義になります。

@subsection 内容

このような変換指定子の動作は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
char c;
scanf("%[a-z]", &c); /* W0573 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W0574
@section W0574
@cindex W0574

@subsection メッセージ本文

基本ソース文字集合に含まれない文字が、文字定数の中で使われています。

@subsection 内容

基本ソース文字集合以外の文字の処理は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
const char c = '$'; /* W0574 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0575} 基本ソース文字集合に含まれない文字が、文字列リテラルの中で使われています。
@item @ref{W0576} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のコメントの中で使われています。
@item @ref{W0577} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のこの前処理指令の中で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0575
@section W0575
@cindex W0575

@subsection メッセージ本文

基本ソース文字集合に含まれない文字が、文字列リテラルの中で使われています。

@subsection 内容

基本ソース文字集合以外の文字の処理は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
const char *str = "@$"; /* W0575 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0574} 基本ソース文字集合に含まれない文字が、文字定数の中で使われています。
@item @ref{W0576} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のコメントの中で使われています。
@item @ref{W0577} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のこの前処理指令の中で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0576
@section W0576
@cindex W0576

@subsection メッセージ本文

基本ソース文字集合に含まれない文字が、ソースファイル `%s' のコメントの中で使われています。

@subsection 内容

基本ソース文字集合以外の文字の処理は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
/* $ W0576 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0574} 基本ソース文字集合に含まれない文字が、文字定数の中で使われています。
@item @ref{W0575} 基本ソース文字集合に含まれない文字が、文字列リテラルの中で使われています。
@item @ref{W0577} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のこの前処理指令の中で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0577
@section W0577
@cindex W0577

@subsection メッセージ本文

基本ソース文字集合に含まれない文字が、ソースファイル `%s' のこの前処理指令の中で使われています。

@subsection 内容

基本ソース文字集合以外の文字の処理は処理系定義のため移植性が低下します。

@subsection サンプルコード

@verbatim
#define MACRO $ /* W0577 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0574} 基本ソース文字集合に含まれない文字が、文字定数の中で使われています。
@item @ref{W0575} 基本ソース文字集合に含まれない文字が、文字列リテラルの中で使われています。
@item @ref{W0576} 基本ソース文字集合に含まれない文字が、ソースファイル `%s' のコメントの中で使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0578
@section W0578
@cindex W0578

@subsection メッセージ本文

暗黙的に汎整数型 `%s' の複合式からより大きな型 `%s' に型変換されています。

@subsection 内容

サンプルコードの関数では
@code{int} 型変数 @code{a} の 2 乗した値が @code{int} 型の範囲に収まらないことを想定して
 @code{long} 型変数 @code{b} へ代入しています。
しかし、環境によっては @code{a * a} の演算はいったん @code{int} 型として結果を出したあとに
 @code{b} へ代入される場合があります。その場合、@code{a} の値によっては情報の損失が起こります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    long b = a * a; /* W0578 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0579
@section W0579
@cindex W0579

@subsection メッセージ本文

汎整数型 `%s' の複合式を、より大きな型 `%s' にキャストしています。

@subsection 内容

サンプルコードの関数では
@code{int} 型変数 @code{a} の 2 乗した値が @code{int} 型の範囲に収まらないことを想定して
 @code{long} 型変数 @code{b} へ代入しています。
しかし、環境によっては @code{a * a} の演算はいったん @code{int} 型として結果を出したあとに
 @code{b} へ代入される場合があります。その場合、@code{a} の値によっては情報の損失が起こります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    long b = (long) (a * a); /* W0579 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W0580
@section W0580
@cindex W0580

@subsection メッセージ本文

ローカルな静的変数のアドレスが、より長い寿命を持つポインタに代入されています。

@subsection 内容

ローカルで @code{static} な変数のアドレスが、結合またはより広いスコープを持つポインタに代入されています。
静的記憶域期間を持つため、危険ではありませんが、データ隠蔽の原則に反します。

@subsection サンプルコード

@verbatim
int *p;

void func(void)
{
    static int i = 0;

    p = &i; /* W0580 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0581
@section W0581
@cindex W0581

@subsection メッセージ本文

実引数の個数か型が、この関数の以前の使用時と異なります。

@subsection 内容

足りない引数がある場合は補われますが、値は不定になります。
従って、その不定値を使用する部分の処理に不具合が生じる危険性が高いといえます。

@subsection サンプルコード

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0581 */
    default:
        return foo(b, c); /* W0581 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0582} 実引数の個数か型が、この後で見つかる関数プロトタイプ宣言と異なります。
@item @ref{W0583} 実引数の個数か型が、この後で見つかる関数定義と異なります。
@item @ref{W0584} %s 番目の実引数の型が、関数定義の中の仮引数の型と異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0582
@section W0582
@cindex W0582

@subsection メッセージ本文

実引数の個数か型が、この後で見つかる関数プロトタイプ宣言と異なります。

@subsection 内容

足りない引数がある場合は補われますが、値は不定になります。
従って、その不定値を使用する部分の処理に不具合が生じる危険性が高いといえます。

@subsection サンプルコード

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0582 */
    default:
        return foo(b, c); /* W0582 */
    }
}

extern int foo(int, short, long);
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0581} 実引数の個数か型が、この関数の以前の使用時と異なります。
@item @ref{W0583} 実引数の個数か型が、この後で見つかる関数定義と異なります。
@item @ref{W0584} %s 番目の実引数の型が、関数定義の中の仮引数の型と異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0583
@section W0583
@cindex W0583

@subsection メッセージ本文

実引数の個数か型が、この後で見つかる関数定義と異なります。

@subsection 内容

足りない引数がある場合は補われますが、値は不定になります。
従って、その不定値を使用する部分の処理に不具合が生じる危険性が高いといえます。

@subsection サンプルコード

@verbatim
int func(int a, short b, long c)
{
    switch (a) {
    case 0:
        return foo(a, b, c);
    case 1:
        return foo(a, c, b); /* W0583 */
    default:
        return foo(b, c); /* W0583 */
    }
}

int foo(int a, short b, long c)
{
    return a + b + c;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0581} 実引数の個数か型が、この関数の以前の使用時と異なります。
@item @ref{W0582} 実引数の個数か型が、この後で見つかる関数プロトタイプ宣言と異なります。
@item @ref{W0584} %s 番目の実引数の型が、関数定義の中の仮引数の型と異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0584
@section W0584
@cindex W0584

@subsection メッセージ本文

%s 番目の実引数の型が、関数定義の中の仮引数の型と異なります。

@subsection 内容

実引数の型と仮引数の型が異なる場合、値が暗黙的に変換されます。

@subsection サンプルコード

@verbatim
extern void func1(a, b)
long a;
double b;
{
    ...snip...
}

void func2(void)
{
    int a = 0;
    long b = 0;

    func1(a, b); /* W0584 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0581} 実引数の個数か型が、この関数の以前の使用時と異なります。
@item @ref{W0582} 実引数の個数か型が、この後で見つかる関数プロトタイプ宣言と異なります。
@item @ref{W0583} 実引数の個数か型が、この後で見つかる関数定義と異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0585
@section W0585
@cindex W0585

@subsection メッセージ本文

制御変数 `%s' はインクリメント式に現れません。

@subsection 内容

ループ変数の増分を増分式で行わずにループ本体中で行うとループの仕様がわかりにくくなります。

@subsection サンプルコード

@verbatim
int i, j;

for (i = j = 0; i < 10; j++) { /* W0585 */
    i++;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0586
@section W0586
@cindex W0586

@subsection メッセージ本文

typedef`%s' が二つ以上の場所で宣言されています。

@subsection 内容

@code{typedef} 名はリンケージを持ちません。同一の @code{typedef} を複数宣言しても、それらの @code{typedef} 名は別物として扱われます。
これは非常に紛らわしく、コードの可読性を低下させます。

@subsection サンプルコード

@file{test1.c}
@verbatim
typedef int *INT_PTR; /* W0586 */

void func1(INT_PTR)
{
    ...snip...
}
@end verbatim

@file{test2.c}
@verbatim
typedef int *INT_PTR; /* W0586 */

void func2(INT_PTR)
{
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0589
@section W0589
@cindex W0589

@subsection メッセージ本文

オブジェクト `%s' は、定義されている翻訳単位の内の、関数 `%s' のみから参照されています。

@subsection 内容

グローバルな可視性を持ちながら、局所的な参照をされています。グローバルなオブジェクトの数が多いと、プログラム全体を理解する場合の可読性が減少します。

@subsection サンプルコード

@file{test1.c}
@verbatim
void func1(void) /* W0589 & W0591 */
{
    ...snip...
}

void func2(void)
{
    func1();
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0591
@section W0591
@cindex W0591

@subsection メッセージ本文

関数 `%s' は、定義されている翻訳単位の内でのみ参照されています。

@subsection 内容

グローバルな関数の数が多いと、プログラム全体を理解する場合の可読性が減少します。

@subsection サンプルコード

@file{test1.c}
@verbatim
void func1(void) /* W0589 & W0591 */
{
    ...snip...
}

void func2(void)
{
    func1();
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0593
@section W0593
@cindex W0593

@subsection メッセージ本文

オブジェクト `%s' は、定義されている翻訳単位の中でのみ参照されています。

@subsection 内容

グローバルなオブジェクトの数が多いと、プログラム全体を理解する場合の可読性が減少します。

@subsection サンプルコード

@file{test1.c}
@verbatim
int a = 100; /* W0593 */

void func1(void)
{
    a += 1;
}

void func2(void)
{
    func1();
    a += 2;
}
@end verbatim

@file{test2.c}
@verbatim
extern void func2(void);

void func3(void)
{
    func2();
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0597
@section W0597
@cindex W0597

@subsection メッセージ本文

副作用完了点の間で `%s' が二回以上変更されています。評価順序は未定義です。

@subsection 内容

同一の変数が副作用完了点の間に 2 度以上アクセスされた場合、その評価順序は ISO 規格では未定義のため、予期しない動作が生じる可能性があります。

@subsection サンプルコード

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    a = b * a++; /* W0597 */
    a = bar(&a) * a++; /* W0597 */
    b = bar(&a) * (a++ + --a); /* W0597, W0599 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0598} 副作用完了点の間で `%s' が二回以上変更される可能性があります。評価順序は未定義です。
@item @ref{W0599} 副作用完了点の間で `%s' が変えられ、参照されています。評価順序は未定義です。
@item @ref{W0600} 副作用完了点の間で `%s' が変えられ、参照される可能性があります。評価順序は未定義です。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0598
@section W0598
@cindex W0598

@subsection メッセージ本文

副作用完了点の間で `%s' が二回以上変更される可能性があります。評価順序は未定義です。

@subsection 内容

同一の変数が副作用完了点の間に 2 度以上アクセスされた場合、その評価順序は ISO 規格では未定義のため、予期しない動作が生じる可能性があります。

@subsection サンプルコード

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    b = bar(&a) * a++; /* W0598 */
    b = bar(&a) + bar(&a); /* W0598 */
    b = bar(&a) + baz(&a); /* W0600 */
    b = baz(&a) + baz(&a);
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0597} 副作用完了点の間で `%s' が二回以上変更されています。評価順序は未定義です。
@item @ref{W0599} 副作用完了点の間で `%s' が変えられ、参照されています。評価順序は未定義です。
@item @ref{W0600} 副作用完了点の間で `%s' が変えられ、参照される可能性があります。評価順序は未定義です。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0599
@section W0599
@cindex W0599

@subsection メッセージ本文

副作用完了点の間で `%s' が変えられ、参照されています。評価順序は未定義です。

@subsection 内容


同一の変数が副作用完了点の間に 2 度以上アクセスされた場合、その評価順序は ISO 規格では未定義のため、予期しない動作が生じる可能性があります。

@subsection サンプルコード

@verbatim
extern void bar(int, int, int);

void foo(int a, int b, int *c)
{
    b = (a + 1) + a++; /* W0599 */
    b = c[a] + c[++a]; /* W0599 */
    bar(a, a++, c[a]); /* W0599 */
    bar(a, a, c[a++]); /* W0599 */
    a = a + b;
    c[a] = a++ + b; /* W0599 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0597} 副作用完了点の間で `%s' が二回以上変更されています。評価順序は未定義です。
@item @ref{W0598} 副作用完了点の間で `%s' が二回以上変更される可能性があります。評価順序は未定義です。
@item @ref{W0600} 副作用完了点の間で `%s' が変えられ、参照される可能性があります。評価順序は未定義です。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0600
@section W0600
@cindex W0600

@subsection メッセージ本文

副作用完了点の間で `%s' が変えられ、参照される可能性があります。評価順序は未定義です。

@subsection 内容

同一の変数が副作用完了点の間に 2 度以上アクセスされた場合、その評価順序は ISO 規格では未定義のため、予期しない動作が生じる可能性があります。

@subsection サンプルコード

@verbatim
extern int bar(int *);
extern int baz(const int *);

void foo(int a, int b)
{
    b = bar(&a) * a; /* W0600 */
    b = baz(&a) * a;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0597} 副作用完了点の間で `%s' が二回以上変更されています。評価順序は未定義です。
@item @ref{W0598} 副作用完了点の間で `%s' が二回以上変更される可能性があります。評価順序は未定義です。
@item @ref{W0599} 副作用完了点の間で `%s' が変えられ、参照されています。評価順序は未定義です。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0605
@section W0605
@cindex W0605

@subsection メッセージ本文

繰り返し文を終了させる目的で、break 文が二つ以上使用されています。

@subsection 内容

繰り返し文で複数の @code{break} 文が使用されている場合、コードの構造が複雑になり、
構造化定理(「順次」「反復」「分岐」)に基づいたコードで実現できる保守性に関するメリットを損ないます。

@subsection サンプルコード

@verbatim
while (n > 0) {
    if (n == 1) {
        break;
    }

    if (n == 2) {
        break; /* W0605 */
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0606
@section W0606
@cindex W0606

@subsection メッセージ本文

共用体に浮動小数点型のメンバがあります。

@subsection 内容

浮動小数点型のメンバ変数に対して共用体を使ってビット単位でアクセスする場合の動作はコンパイラ依存なので、移植性を低下させます。

@subsection サンプルコード

@verbatim
union UNI { /* W0606 */
    float a;
    int b;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0607
@section W0607
@cindex W0607

@subsection メッセージ本文

値が負になる整数式が符号無し型に変換されています。

@subsection 内容

明らかに負になることが明らかな整数は、負の数として扱われることが想定されます。
そのような値が符号無し型に変換されることで意図しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    if (a < 0) {
        unsigned int b = (unsigned int) a; /* W0607 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0608} 値が負になることがありうる整数式が符号無し型に変換されています。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0608
@section W0608
@cindex W0608

@subsection メッセージ本文

値が負になることがありうる整数式が符号無し型に変換されています。

@subsection 内容

明らかに負になることが明らかな整数は、負の数として扱われることが想定されます。
そのような値が符号無し型に変換されることで意図しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void fuu(int a)
{
    unsigned char b;

    if (a < 256) {
        b = (unsigned char) a; /* W0608 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0607} 値が負になる整数式が符号無し型に変換されています。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0609
@section W0609
@cindex W0609

@subsection メッセージ本文

この論理演算の結果は常に真になります。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    if (a < 0) {
        if (a != 0) { /* W0609 */
            ...snip...
        }
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0610} この論理演算の結果は常に偽になります。
@item @ref{W0611} この繰り返し文の制御式の値は常に真です。
@item @ref{W0612} この if 条件式の値は常に真です。
@item @ref{W0613} この制御式の値は常に偽になります。
@item @ref{W0614} この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0610
@section W0610
@cindex W0610

@subsection メッセージ本文

この論理演算の結果は常に偽になります。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    if (a < 0) {
        if (a == 0) { /* W0610 */
        }
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0609} この論理演算の結果は常に真になります。
@item @ref{W0611} この繰り返し文の制御式の値は常に真です。
@item @ref{W0612} この if 条件式の値は常に真です。
@item @ref{W0613} この制御式の値は常に偽になります。
@item @ref{W0614} この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0611
@section W0611
@cindex W0611

@subsection メッセージ本文

この繰り返し文の制御式の値は常に真です。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    if ( a > 0 ) {
        while (a != 0) { /* W0611 */
            ...snip...
        }
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0609} この論理演算の結果は常に真になります。
@item @ref{W0610} この論理演算の結果は常に偽になります。
@item @ref{W0612} この if 条件式の値は常に真です。
@item @ref{W0613} この制御式の値は常に偽になります。
@item @ref{W0614} この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0612
@section W0612
@cindex W0612

@subsection メッセージ本文

この if 条件式の値は常に真です。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
int i;

for (i = 0; i < 10; i++) {
    if (i < 20) { /* W0612 */
        ...snip...
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0609} この論理演算の結果は常に真になります。
@item @ref{W0610} この論理演算の結果は常に偽になります。
@item @ref{W0611} この繰り返し文の制御式の値は常に真です。
@item @ref{W0613} この制御式の値は常に偽になります。
@item @ref{W0614} この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0613
@section W0613
@cindex W0613

@subsection メッセージ本文

この制御式の値は常に偽になります。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
int i;

for (i = 0; i < 10; i++) {
    if (i > 10) { /* W0613 */
        ...snip...
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0609} この論理演算の結果は常に真になります。
@item @ref{W0610} この論理演算の結果は常に偽になります。
@item @ref{W0611} この繰り返し文の制御式の値は常に真です。
@item @ref{W0612} この if 条件式の値は常に真です。
@item @ref{W0614} この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0614
@section W0614
@cindex W0614

@subsection メッセージ本文

この `do-while' 制御式の値は常に偽になります。繰り返し文の本体は一回のみ実行されます。

@subsection 内容

処理フローが意図通りであるか不明確で、混乱を招く可能性があります。
意図通りでない場合、コードの信頼性が疑われます。
また、不必要な処理がある場合は、コードが冗長になります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    if (a == 0) {
        do {
        } while (a > 0); /* W0614 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0609} この論理演算の結果は常に真になります。
@item @ref{W0610} この論理演算の結果は常に偽になります。
@item @ref{W0611} この繰り返し文の制御式の値は常に真です。
@item @ref{W0612} この if 条件式の値は常に真です。
@item @ref{W0613} この制御式の値は常に偽になります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0622
@section W0622
@cindex W0622

@subsection メッセージ本文

関数がブロックスコープ内で宣言されています。

@subsection 内容

この関数は、ファイルスコープ内で宣言されるべきです。このような記述は解析性を低下させます。

@subsection サンプルコード

@verbatim
int func1(void)
{
    extern int func2(void); /* W0622 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0623
@section W0623
@cindex W0623

@subsection メッセージ本文

外部結合のオブジェクトが、ブロックスコープ内で宣言されています。

@subsection 内容

このオブジェクトは、ファイルスコープ内で宣言されるべきです。このような記述は解析性を低下させます。

@subsection サンプルコード

@verbatim
int func(void)
{
    extern int i; /* W0623 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0624
@section W0624
@cindex W0624

@subsection メッセージ本文

#define あるいは #undef がブロックの中に存在します。

@subsection 内容

@code{#define}、@code{#undef} は、ファイルスコープ内で宣言されるべきです。このような記述は解析性を低下させます。

@subsection サンプルコード

@verbatim
#define MACRO 0

int foo(void)
{
#if defined(MACRO)
#undef MACRO    /* W0624 */
#define MACRO 1 /* W0624 */
#endif

    return MACRO;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0625
@section W0625
@cindex W0625

@subsection メッセージ本文

外部結合の定義または宣言の中で `%s' が使われていますが、その typedef がヘッダファイルの中で宣言されていません。

@subsection 内容

@code{typedef} 宣言はヘッダファイル内でのみ行うべきです。このような記述は保守性を低下させます。

@subsection サンプルコード

@verbatim
typedef int *INT_PTR; /* W0625 */

extern INT_PTR func(void);

INT_PTR func(void)
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.8.0

@node W0626
@section W0626
@cindex W0626

@subsection メッセージ本文

ワイド文字またはワイド文字列リテラルが使われています。

@subsection 内容

ワイド文字またはワイド文字列リテラルを使用するコードは実行環境のロケールに依存
することになります。

@subsection サンプルコード

@verbatim
const wchar_t a = L'あ'; /* W0626 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0627
@section W0627
@cindex W0627

@subsection メッセージ本文

一行に、空文(`;' だけの文)が、他のコードの後にあります。

@subsection 内容

他の文と空文が 1 行で書かれている場合、空文の意図が不明確になります。

@subsection サンプルコード

@verbatim
if (0); /* W0627 */
{
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0628
@section W0628
@cindex W0628

@subsection メッセージ本文

関数 `%s' が定義されていますが、このプロジェクトでは使われていません。

@subsection 内容

使用されていない関数は無駄な要素といえます。コード中に無駄な要素があることで解析性が低下します。

@subsection サンプルコード

@file{test1.c}
@verbatim
int func1(void)
{
    return 0;
}

void func2(void) /* W0628 */
{
    ...snip...
}
@end verbatim

@file{test2.c}
@verbatim
extern int func1(void);

int main(void)
{
    return func1();
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0629} static 関数 `%s()' は、この翻訳単位の中で使われていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0629
@section W0629
@cindex W0629

@subsection メッセージ本文

static 関数 `%s()' は、この翻訳単位の中で使われていません。

@subsection 内容

使用されていない関数は無駄な要素といえます。コード中に無駄な要素があることで解析性が低下します。

@subsection サンプルコード

@verbatim
static int func1(void) /* W0629 */
{
    return 1;
}

int func2(void)
{
    return 1;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0628} 関数 `%s' が定義されていますが、このプロジェクトでは使われていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0632
@section W0632
@cindex W0632

@subsection メッセージ本文

`@code{#include <%s>}' の中で ' や " 文字を使うと、未定義の動作になります。

@subsection 内容

`@code{'}'、`@code{"}' または `@code{/*}' を @code{#include} 文で使用すると、未定義の動作になります。

@subsection サンプルコード

@verbatim
#include <NG'_header.h> /* W0632 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0633} `#include "%s"' の中で ' 文字を使うと、未定義の動作になります。
@item @ref{W0634} `#include' 行の中で `\' を使っています。パス区切り文字としては `/' を勧めます。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0633
@section W0633
@cindex W0633

@subsection メッセージ本文

`@code{#include "%s"}' の中で ' 文字を使うと、未定義の動作になります。

@subsection 内容

`@code{'}' を @code{#include} 文で使用すると、未定義の動作になります。

@subsection サンプルコード

@verbatim
#include "NG'_header.h" /* W0633 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0632} `#include <%s>' の中で ' や " 文字を使うと、未定義の動作になります。
@item @ref{W0634} `#include' 行の中で `\' を使っています。パス区切り文字としては `/' を勧めます。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0634
@section W0634
@cindex W0634

@subsection メッセージ本文

`#include' 行の中で `\' を使っています。パス区切り文字としては `/' を勧めます。

@subsection 内容

@code{\} は PC 環境におけるパス区切り文字であり、@code{#include} 文で使用することで移植性を損ないます。

@subsection サンプルコード

@verbatim
#include "..\ng\header.h" /* W0634 */
#include "..\\ng\\header.h" /* W0634 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0632} `#include <%s>' の中で ' や " 文字を使うと、未定義の動作になります。
@item @ref{W0633} `#include "%s"' の中で ' 文字を使うと、未定義の動作になります。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0635
@section W0635
@cindex W0635

@subsection メッセージ本文

%s 番目の変換指定子と、対応する実引数の型が合いません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a)
{
    printf("Apple %f\n", a); /* W0635 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0636} %s 番目の変換指定子に対応する実引数が存在しません。
@item @ref{W0637} 関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
@item @ref{W0638} この関数呼び出しには、少なくとも一つの実引数が必要です。
@item @ref{W0639} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0640} scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0636
@section W0636
@cindex W0636

@subsection メッセージ本文

%s 番目の変換指定子に対応する実引数が存在しません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int b, int c)
{
    printf("Banana %d, %d, %d\n", a, b); /* W0636 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0635} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0637} 関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
@item @ref{W0638} この関数呼び出しには、少なくとも一つの実引数が必要です。
@item @ref{W0639} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0640} scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0637
@section W0637
@cindex W0637

@subsection メッセージ本文

関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int a, int b)
{
    printf("Orange %d\n", a, b); /* W0637 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0635} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0636} %s 番目の変換指定子に対応する実引数が存在しません。
@item @ref{W0638} この関数呼び出しには、少なくとも一つの実引数が必要です。
@item @ref{W0639} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0640} scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0638
@section W0638
@cindex W0638

@subsection メッセージ本文

この関数呼び出しには、少なくとも一つの実引数が必要です。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
printf(); /* W0638 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0635} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0636} %s 番目の変換指定子に対応する実引数が存在しません。
@item @ref{W0637} 関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
@item @ref{W0639} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0640} scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0639
@section W0639
@cindex W0639

@subsection メッセージ本文

%s 番目の変換指定子と、対応する実引数の型が合いません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int a;

scanf("%f",  &a); /* W0639 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0635} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0636} %s 番目の変換指定子に対応する実引数が存在しません。
@item @ref{W0637} 関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
@item @ref{W0638} この関数呼び出しには、少なくとも一つの実引数が必要です。
@item @ref{W0640} scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0640
@section W0640
@cindex W0640

@subsection メッセージ本文

scanf 関数の実引数にはデータを格納するオブジェクトのポインタを渡さなければいけません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int a;

fscanf(stdin, "%d", a); /* W0640 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0635} %s 番目の変換指定子と、対応する実引数の型が合いません。
@item @ref{W0636} %s 番目の変換指定子に対応する実引数が存在しません。
@item @ref{W0637} 関数呼び出しに、変換指定子の数よりも多くの実引数が存在します。
@item @ref{W0638} この関数呼び出しには、少なくとも一つの実引数が必要です。
@item @ref{W0639} %s 番目の変換指定子と、対応する実引数の型が合いません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0641
@section W0641
@cindex W0641

@subsection メッセージ本文

浮動小数点数型をオブジェクトへのポインタ(あるいはその逆)へキャストしています。

@subsection 内容

このようなキャストは未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int *foo(const float f)
{
    return (int *) f; /* W0641 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0642
@section W0642
@cindex W0642

@subsection メッセージ本文

register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    register int a[3];

    int *p1 = a; /* W0642 */
    int *p2 = &a[1]; /* W0642 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0643} このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。
@item @ref{W0644} void 式の値を使用しようとしています。void 式は値をもちません。
@item @ref{W0645} 仮引数の型には、void 型を使うことができません。
@item @ref{W0646} 通常の文字列リテラルとワイド文字列リテラルが隣接しています。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0643
@section W0643
@cindex W0643

@subsection メッセージ本文

このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define MACRO(x) #x
const char *str = MACRO(foo\); /* W0643 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0642} register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。
@item @ref{W0644} void 式の値を使用しようとしています。void 式は値をもちません。
@item @ref{W0645} 仮引数の型には、void 型を使うことができません。
@item @ref{W0646} 通常の文字列リテラルとワイド文字列リテラルが隣接しています。
@end itemize

@subsection 対応バージョン

1.16.0

@node W0644
@section W0644
@cindex W0644

@subsection メッセージ本文

void 式の値を使用しようとしています。void 式は値をもちません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(void);

int bar(void)
{
    return (int) foo(); /* W0644 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0642} register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。
@item @ref{W0643} このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。
@item @ref{W0645} 仮引数の型には、void 型を使うことができません。
@item @ref{W0646} 通常の文字列リテラルとワイド文字列リテラルが隣接しています。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0645
@section W0645
@cindex W0645

@subsection メッセージ本文

仮引数の型には、void 型を使うことができません。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern void func(a) /* W0645 */
void a;
{
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0642} register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。
@item @ref{W0643} このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。
@item @ref{W0644} void 式の値を使用しようとしています。void 式は値をもちません。
@item @ref{W0646} 通常の文字列リテラルとワイド文字列リテラルが隣接しています。
@end itemize

@subsection 対応バージョン

1.14.0

@node W0646
@section W0646
@cindex W0646

@subsection メッセージ本文

通常の文字列リテラルとワイド文字列リテラルが隣接しています。

@subsection 内容

未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
static const char *str = "foo" L"bar"; /* W0646 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0642} register 指定で宣言されたオブジェクトのアドレスを得ることは不可能です。
@item @ref{W0643} このマクロで構成された文字列リテラルは、`"' で囲まれていない不正な形式です。マクロ内の `#' 演算子が `\' が末尾にある実引数に適用された結果である可能性があります。
@item @ref{W0644} void 式の値を使用しようとしています。void 式は値をもちません。
@item @ref{W0645} 仮引数の型には、void 型を使うことができません。
@end itemize

@subsection 対応バージョン

1.16.0

@node W0649
@section W0649
@cindex W0649

@subsection メッセージ本文

シフト演算子の右オペランドの値が負の定数です。結果は未定義になります。

@subsection 内容

このようなシフト演算は未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    return i << -1; /* W0649 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0650} シフト演算子の右オペランドの値が左オペランドの型 `%s' で表されるビット数に対して大きすぎます。結果は未定義になります。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0650
@section W0650
@cindex W0650

@subsection メッセージ本文

シフト演算子の右オペランドの値が左オペランドの型 `%s' で表されるビット数に対して大きすぎます。結果は未定義になります。

@subsection 内容

このようなシフト演算は未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
unsigned int foo(unsigned int i)
{
    return i << 32; /* W0650 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0649} シフト演算子の右オペランドの値が負の定数です。結果は未定義になります。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0653
@section W0653
@cindex W0653

@subsection メッセージ本文

配列、構造体あるいは共用体の初期値が `@{@}' で囲まれていません。

@subsection 内容

適合しない型の変数を用いて、構造体や共用体を初期化することは ISO C90 で未定義なので、
予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct ST {
    int i;
};

int a[3] = 0; /* W0653 */
struct ST s = 0; /* W0653 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0654} 構造体あるいは共用体の初期化子は、同じ構造体型あるいは共用体型の値でなければなりません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0654
@section W0654
@cindex W0654

@subsection メッセージ本文

構造体あるいは共用体の初期化子は、同じ構造体型あるいは共用体型の値でなければなりません。

@subsection 内容

適合しない型の変数を用いて、構造体や共用体を初期化することは ISO C90 で未定義なので、
予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct A {
    int i;
};

struct B {
    int j;
};

struct A a = { 0 };
struct B b = a; /* W0654 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0653} 配列、構造体あるいは共用体の初期値が `@{@}' で囲まれていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0655
@section W0655
@cindex W0655

@subsection メッセージ本文

サイズが未定義のビットフィールド式です。

@subsection 内容

ビットフィールド式に対して @code{sizeof} 演算子を使用することは無意味です。

@subsection サンプルコード

@verbatim
struct ST {
    unsigned int a:2;
    unsigned int b:4;
};

void func(void)
{
    struct ST s = { 0 };
    int i = sizeof(s.a); /* W0655 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0656
@section W0656
@cindex W0656

@subsection メッセージ本文

%s 番目の変換指定子は、ISO C 標準規格でサポートされません。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int count)
{
    printf("There are %Ld apples\n", count); /* W0656 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0657
@section W0657
@cindex W0657

@subsection メッセージ本文

%s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(int count)
{
    printf("There are %Ld apples\n", count); /* W0657 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0658
@section W0658
@cindex W0658

@subsection メッセージ本文

%s 番目の変換指定子 `o' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(unsigned int count)
{
    printf("There are %Lo apples\n", count); /* W0658 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0659
@section W0659
@cindex W0659

@subsection メッセージ本文

%s 番目の変換指定子 `u' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード
@verbatim
void func(unsigned int count)
{
    printf("There are %Lu apples\n", count); /* W0659 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0660
@section W0660
@cindex W0660

@subsection メッセージ本文

%s 番目の変換指定子 `x' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(unsigned int count)
{
    printf("There are %Lx apples\n", count); /* W0660 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0661
@section W0661
@cindex W0661

@subsection メッセージ本文

%s 番目の変換指定子 `X' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(unsigned int count)
{
    printf("There are %LX apples\n", count); /* W0661 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0662
@section W0662
@cindex W0662

@subsection メッセージ本文

%s 番目の変換指定子 `f' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double count)
{
    printf("There are %lf apples\n", count); /* W0662 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0663
@section W0663
@cindex W0663

@subsection メッセージ本文

%s 番目の変換指定子 `e' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double count)
{
    printf("There are %le apples\n", count); /* W0663 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0664
@section W0664
@cindex W0664

@subsection メッセージ本文

%s 番目の変換指定子 `E' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double count)
{
    printf("There are %lE apples\n", count); /* W0664 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0665
@section W0665
@cindex W0665

@subsection メッセージ本文

%s 番目の変換指定子 `g' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double count)
{
    printf("There are %lg apples\n", count); /* W0665 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0666
@section W0666
@cindex W0666

@subsection メッセージ本文

%s 番目の変換指定子 `G' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double count)
{
    printf("There are %lG apples\n", count); /* W0666 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0667
@section W0667
@cindex W0667

@subsection メッセージ本文

%s 番目の変換指定子 `c' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(char count)
{
    printf("There are %hc apples\n", count); /* W0667 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0668
@section W0668
@cindex W0668

@subsection メッセージ本文

%s 番目の変換指定子 `%' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(double percent)
{
    printf("There is %f%l% apple juice\n", percent); /* W0668 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0669
@section W0669
@cindex W0669

@subsection メッセージ本文

%s 番目の変換指定子 `s' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(char *s)
{
    printf("There are %hs apples\n", s); /* W0669 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0670
@section W0670
@cindex W0670

@subsection メッセージ本文

%s 番目の変換指定子 `n' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int n;

    printf("There are %Ln apples\n", &n); /* W0670 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0671
@section W0671
@cindex W0671

@subsection メッセージ本文

%s 番目の変換指定子 `p' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(char *p)
{
    printf("p points to %lp\n", p); /* W0671 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0672
@section W0672
@cindex W0672

@subsection メッセージ本文

%s 番目に無効な変換指定子が使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    printf("%0", &a); /* W0672 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0673
@section W0673
@cindex W0673

@subsection メッセージ本文

%s 番目の変換指定子は、ISO C 標準規格でサポートされません。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%y", &a); /* W0673 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0674
@section W0674
@cindex W0674

@subsection メッセージ本文

%s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%Ld", &a); /* W0674 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0675
@section W0675
@cindex W0675

@subsection メッセージ本文

%s 番目の変換指定子 `o' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%Lo", &a); /* W0675 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0676
@section W0676
@cindex W0676

@subsection メッセージ本文

%s 番目の変換指定子 `u' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%Lu", &a); /* W0676 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0677
@section W0677
@cindex W0677

@subsection メッセージ本文

%s 番目の変換指定子 `x/X' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%Lx", &a); /* W0677 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0678
@section W0678
@cindex W0678

@subsection メッセージ本文

%s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    double a;

    scanf("%lle", &a); /* W0678 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0679
@section W0679
@cindex W0679

@subsection メッセージ本文

%s 番目の変換指定子 `s' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    char a[256];

    scanf("%lls", a); /* W0679 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0680
@section W0680
@cindex W0680

@subsection メッセージ本文

%s 番目の変換指定子 `p' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    void *a;

    scanf("%lp", &a); /* W0680 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0681
@section W0681
@cindex W0681

@subsection メッセージ本文

%s 番目の変換指定子 `%' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    int a;

    scanf("%d%l%", &a); /* W0681 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0682
@section W0682
@cindex W0682

@subsection メッセージ本文

%s 番目の変換指定子 `[' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    char buf[256];

    scanf("%L[0-9]", buf); /* W0682 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0683
@section W0683
@cindex W0683

@subsection メッセージ本文

%s 番目の変換指定子 `c' に無効なフラグが使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    char a;

    scanf("%Lc", &a); /* W0683 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0684
@section W0684
@cindex W0684

@subsection メッセージ本文

%s 番目に無効な変換指定子が使われています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(void)
{
    long a;

    scanf("%l", &a); /* W0684 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0685
@section W0685
@cindex W0685

@subsection メッセージ本文

`[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
char c;
scanf("%[z-a]", &c); /* W0685 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0686} 走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0686
@section W0686
@cindex W0686

@subsection メッセージ本文

走査セット(`[]' に囲まれた文字の並び)の中に同じ文字が二つ以上記述されています。

@subsection 内容

未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
char c;
scanf("%[abcda]", &c); /* W0686 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0655} サイズが未定義のビットフィールド式です。
@item @ref{W0656} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0657} %s 番目の変換指定子 `i' あるいは 'd' に無効なフラグが使われています。
@item @ref{W0658} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0659} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0660} %s 番目の変換指定子 `x' に無効なフラグが使われています。
@item @ref{W0661} %s 番目の変換指定子 `X' に無効なフラグが使われています。
@item @ref{W0662} %s 番目の変換指定子 `f' に無効なフラグが使われています。
@item @ref{W0663} %s 番目の変換指定子 `e' に無効なフラグが使われています。
@item @ref{W0664} %s 番目の変換指定子 `E' に無効なフラグが使われています。
@item @ref{W0665} %s 番目の変換指定子 `g' に無効なフラグが使われています。
@item @ref{W0666} %s 番目の変換指定子 `G' に無効なフラグが使われています。
@item @ref{W0667} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0668} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0669} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0670} %s 番目の変換指定子 `n' に無効なフラグが使われています。
@item @ref{W0671} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0672} %s 番目に無効な変換指定子が使われています。
@item @ref{W0673} %s 番目の変換指定子は、ISO C 標準規格でサポートされません。
@item @ref{W0674} %s 番目の変換指定子 `d/i/n' に無効なフラグが使われています。
@item @ref{W0675} %s 番目の変換指定子 `o' に無効なフラグが使われています。
@item @ref{W0676} %s 番目の変換指定子 `u' に無効なフラグが使われています。
@item @ref{W0677} %s 番目の変換指定子 `x/X' に無効なフラグが使われています。
@item @ref{W0678} %s 番目の変換指定子 `e/E/f/g/G' に無効なフラグが使われています。
@item @ref{W0679} %s 番目の変換指定子 `s' に無効なフラグが使われています。
@item @ref{W0680} %s 番目の変換指定子 `p' に無効なフラグが使われています。
@item @ref{W0681} %s 番目の変換指定子 `%' に無効なフラグが使われています。
@item @ref{W0682} %s 番目の変換指定子 `[' に無効なフラグが使われています。
@item @ref{W0683} %s 番目の変換指定子 `c' に無効なフラグが使われています。
@item @ref{W0684} %s 番目に無効な変換指定子が使われています。
@item @ref{W0685} `[]' の走査セット内の `-' の前にある文字が `-' の後にある文字より大きいです。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0687
@section W0687
@cindex W0687

@subsection メッセージ本文

defined 演算子を削除する目的で #undef を使っています。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#undef defined /* W0687 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0688} #line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。
@item @ref{W0689} #line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。
@item @ref{W0690} #line 指令の後に行番号が記述されていません。
@item @ref{W0691} `##' 演算子の結果が有効な前処理字句ではありません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0688
@section W0688
@cindex W0688

@subsection メッセージ本文

#line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#line 35000 "test.c" /* W0688 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0687} defined 演算子を削除する目的で #undef を使っています。
@item @ref{W0689} #line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。
@item @ref{W0690} #line 指令の後に行番号が記述されていません。
@item @ref{W0691} `##' 演算子の結果が有効な前処理字句ではありません。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0689
@section W0689
@cindex W0689

@subsection メッセージ本文

#line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#line 35 * 100 /* W0689 */
#line 35 * 100 "test.c" /* W0689 */
#line 35 L"あいう.c" /* W0689 */
#line __FILE__ 35 /* W0689 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0687} defined 演算子を削除する目的で #undef を使っています。
@item @ref{W0688} #line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。
@item @ref{W0690} #line 指令の後に行番号が記述されていません。
@item @ref{W0691} `##' 演算子の結果が有効な前処理字句ではありません。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0690
@section W0690
@cindex W0690

@subsection メッセージ本文

#line 指令の後に行番号が記述されていません。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#line LINE1000 /* W0690 */
#line __FILE__ 35 /* W0690 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0687} defined 演算子を削除する目的で #undef を使っています。
@item @ref{W0688} #line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。
@item @ref{W0689} #line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。
@item @ref{W0691} `##' 演算子の結果が有効な前処理字句ではありません。
@end itemize

@subsection 対応バージョン

1.2.0

@node W0691
@section W0691
@cindex W0691

@subsection メッセージ本文

`##' 演算子の結果が有効な前処理字句ではありません。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define MACRO(a, b) a ## b

double d = (double) MACRO(-, 123); /* W0691 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0687} defined 演算子を削除する目的で #undef を使っています。
@item @ref{W0688} #line 指令の後に、1 から 32767 の範囲の行番号が記述されていません。
@item @ref{W0689} #line 指令の構文が `#line 汎整数定数 "文字列"' の形式と合っていません。
@item @ref{W0690} #line 指令の後に行番号が記述されていません。
@end itemize

@subsection 対応バージョン

1.16.0

@node W0692
@section W0692
@cindex W0692

@subsection メッセージ本文

関数形式マクロ `%s' に実引数が与えられていません。

@subsection 内容

このような記述は ISO C99 のみで使用可能なので、移植性を低下させます。

@subsection サンプルコード

@verbatim
#define MACRO(a) #a

const char *s = (char *) MACRO(); /* W0692 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0693} 関数形式マクロがその定義よりも少ない実引数で呼び出されています。
@end itemize

@subsection 対応バージョン

1.16.0

@node W0693
@section W0693
@cindex W0693

@subsection メッセージ本文

関数形式マクロがその定義よりも少ない実引数で呼び出されています。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

このような記述は、言語制約違反になりますので、移植性を低下させます。

@subsection サンプルコード

@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0692} 関数形式マクロ `%s' に実引数が与えられていません。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W0694
@section W0694
@cindex W0694

@subsection メッセージ本文

`assert' という名称の関数を呼び出す目的で、assert マクロが抑制されています。未定義の結果になります。

@subsection 内容

@code{assert} という名前の関数を作成すると、未定義の結果になります。

@subsection サンプルコード

@verbatim
#undef assert
extern void assert(int);

void foo(void)
{
    assert("should not be reached" == ""); /* W0694 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W0695
@section W0695
@cindex W0695

@subsection メッセージ本文

assert マクロを #undef してその名前の関数を呼び出しできるようにすると、未定義の結果になります。

@subsection 内容

@code{assert} マクロの定義解消や再定義は、未定義の動作になります。したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#undef assert /* W0695 */
extern void assert(int a);
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0696
@section W0696
@cindex W0696

@subsection メッセージ本文

この `#if...' で使われているマクロ `%s' は定義されていません。

@subsection 内容

通常、未定義マクロは 0 に置き換えられるため、未定義の動作というわけではありませんが、プリプロセッサに依存した処理といえますので、移植性を低下させます。
また、マクロが未定義であることはプログラマの意図しないことの可能性もあります。その場合は、動作上のバグにつながります。

@subsection サンプルコード

@verbatim
#define MACRO (1)

#if MACRO == 1
    ...snip...
#endif

#undef MACRO

#if MACRO == 2 /* W0696 */
    ...snip...
#endif
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0697
@section W0697
@cindex W0697

@subsection メッセージ本文

戻り値を返すように定義された関数 `%s' の中に、暗黙の `return;' 文で終了するパスが存在します。

@subsection 内容

式を持たない @code{return} 文は不定値を返します。

@subsection サンプルコード

@verbatim
int func(int value) /* W0697 */
{
    if (value == 0) {
        return 0;
    }
    /* No return statement at the end of this function. */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0698} 戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。
@item @ref{W0699} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、return 文に値を戻すための式が記述されていません。
@item @ref{W0700} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、値を戻す return 文がありません。
@end itemize

@subsection 対応バージョン

1.14.0

@node W0698
@section W0698
@cindex W0698

@subsection メッセージ本文

戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。

@subsection 内容

式を持たない @code{return} 文は不定値を返します。

@subsection サンプルコード

@verbatim
int func(void)
{
    return; /* W0698 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0698} 戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。
@item @ref{W0699} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、return 文に値を戻すための式が記述されていません。
@item @ref{W0700} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、値を戻す return 文がありません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0699
@section W0699
@cindex W0699

@subsection メッセージ本文

関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、return 文に値を戻すための式が記述されていません。

@subsection 内容

式を持たない @code{return} 文は不定値を返します。

@subsection サンプルコード

@verbatim
extern func(void)
{
    return; /* W0699 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0697} 戻り値を返すように定義された関数 `%s' の中に、暗黙の `return;' 文で終了するパスが存在します。
@item @ref{W0698} 戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。
@item @ref{W0700} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、値を戻す return 文がありません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0700
@section W0700
@cindex W0700

@subsection メッセージ本文

関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、値を戻す return 文がありません。

@subsection 内容

式を持たない @code{return} 文は不定値を返します。

@subsection サンプルコード

@verbatim
extern func(void) /* W0700 */
{
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0697} 戻り値を返すように定義された関数 `%s' の中に、暗黙の `return;' 文で終了するパスが存在します。
@item @ref{W0698} 戻り値を返すように定義された関数 `%s' の中で、`return;' 文が見つかりました。
@item @ref{W0699} 関数 `%s()' は、戻り値の型が明示されていないため、戻り値の型は暗黙的な int ですが、return 文に値を戻すための式が記述されていません。
@end itemize

@subsection 対応バージョン

1.14.0

@node W0703
@section W0703
@cindex W0703

@subsection メッセージ本文

タグ `%s' がより広い有効範囲をもつ同じ識別子の宣言を隠しています。

@subsection 内容

ローカル変数がグローバル変数を隠蔽することで、ローカル領域でグローバル変数を使用している箇所が影響を受ける可能性があります。

@subsection サンプルコード

@verbatim
union FOO {
    ...snip...
};

void func(void)
{
    struct FOO { /* W0703 */
        ...snip...
    };
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0704} この `%s' の宣言は、より広い有効範囲をもつ同じ識別子の宣言を隠しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0704
@section W0704
@cindex W0704

@subsection メッセージ本文

この `%s' の宣言は、より広い有効範囲をもつ同じ識別子の宣言を隠しています。

@subsection 内容

ローカル変数がグローバル変数を隠蔽することで、ローカル領域でグローバル変数を使用している箇所が影響を受ける可能性があります。

@subsection サンプルコード

@verbatim
int a;

void func(void)
{
    double a; /* W0704 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0703} タグ `%s' がより広い有効範囲をもつ同じ識別子の宣言を隠しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0705
@section W0705
@cindex W0705

@subsection メッセージ本文

配列の添字が領域外を指すことがあります。

@subsection 内容

配列の領域外にアクセスする動作は未定義の動作になります。したがって予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(unsigned int a)
{
    int buf[10];

    if (a < 10) {
        buf[a] = 0;
    }

    ...snip...

    buf[a] = 5; /* W0705 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0707
@section W0707
@cindex W0707

@subsection メッセージ本文

配列の添字が領域外を指す定数です。

@subsection 内容

配列の領域外にアクセスする動作は未定義の動作になります。したがって予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern int a[5];

int foo(void)
{
    int i = a[5]; /* W0707 */
    return i;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0708
@section W0708
@cindex W0708

@subsection メッセージ本文

for 文の制御変数 `%s' は繰り返し文本体の中で値を変えられています。

@subsection 内容

ループ本体でループ制御変数を変更することが、すぐさま構造化定理に違反することにはなりませんが、
どのように反復するかを判断しにくくなり、修正やテスト時に混乱のもとになります。

@subsection サンプルコード

@verbatim
int i, j;

for (i = j = 0; i < 10; j++) {
    i++; /* W0708 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0711
@section W0711
@cindex W0711

@subsection メッセージ本文

関係演算子の右側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a + b) > (c > d); /* W0711 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0712} 関係演算子の左側のオペランドが実質的なブール型の式です。
@item @ref{W0713} 関係演算子の両側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0712
@section W0712
@cindex W0712

@subsection メッセージ本文

関係演算子の左側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) > (c + d); /* W0712 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0711} 関係演算子の右側のオペランドが実質的なブール型の式です。
@item @ref{W0713} 関係演算子の両側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0713
@section W0713
@cindex W0713

@subsection メッセージ本文

関係演算子の両側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) > (c > d); /* W0713 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0711} 関係演算子の右側のオペランドが実質的なブール型の式です。
@item @ref{W0712} 関係演算子の左側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0714
@section W0714
@cindex W0714

@subsection メッセージ本文

`&' 演算子の両側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) & (c > d); /* W0714 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0715} `|' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0716} ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0717} ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
@item @ref{W0718} ビット演算子あるいは算術演算子の右側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0715
@section W0715
@cindex W0715

@subsection メッセージ本文

`|' 演算子の両側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) | (c > d); /* W0715 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0714} `&' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0716} ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0717} ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
@item @ref{W0718} ビット演算子あるいは算術演算子の右側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0716
@section W0716
@cindex W0716

@subsection メッセージ本文

ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c, int d)
{
    return (a > b) + (c > d); /* W0716 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0714} `&' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0715} `|' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0717} ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
@item @ref{W0718} ビット演算子あるいは算術演算子の右側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.10.0

@node W0717
@section W0717
@cindex W0717

@subsection メッセージ本文

ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。

@subsection 内容


このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c)
{
    return (a > b) + c; /* W0717 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0714} `&' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0715} `|' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0716} ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0717} ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.10.0

@node W0718
@section W0718
@cindex W0718

@subsection メッセージ本文

ビット演算子あるいは算術演算子の右側のオペランドが実質的なブール型の式です。

@subsection 内容


このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
int func(int a, int b, int c)
{
    return a + (b > c);  /* W0718 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0714} `&' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0715} `|' 演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0716} ビット演算子あるいは算術演算子の両側のオペランドが実質的なブール型の式です。
@item @ref{W0717} ビット演算子あるいは算術演算子の左側のオペランドが実質的なブール型の式です。
@end itemize

@subsection 対応バージョン

1.10.0

@node W0719
@section W0719
@cindex W0719

@subsection メッセージ本文

シフト演算子の右オペランドが、潜在型 `%s' のビット幅以上の定数値です。

@subsection 内容

このようなシフト演算は汎整数拡張後の型の範囲を超えていないため、
未定義の動作にはなりませんが、
汎整数拡張が生じない型の変数への代入に変更した時点で未定義の動作になりますので、
潜在的な危険を伴います。

@subsection サンプルコード

@verbatim
int foo(char c)
{
    return c << 31; /* W0719 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0720
@section W0720
@cindex W0720

@subsection メッセージ本文

浮動小数点型の値が変換先の型の範囲に入りきりません。

@subsection 内容

このような式は未定義の動作になります。したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
signed char sc1 = (signed char) 127.5; /* OK */
signed char sc2 = (signed char) 128.5; /* W0720 */

signed char sc3 = (signed char) -128.5; /* OK */
signed char sc4 = (signed char) -129.5; /* W0720 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0721
@section W0721
@cindex W0721

@subsection メッセージ本文

この汎整数型は、ポインタの値を保持するのに十分な大きさをもちません。

@subsection 内容

上記のような変換により、ポインタ型変数の一部の情報が欠落したものが整数型に代入されることになります。
したがって、代入先の値はもはや正しいアドレスを指していないことになります。

@subsection サンプルコード

@verbatim
void func(int *p)
{
    /* when short is 16 bit long and pointer is 32 bit long */
    unsigned short us = (unsigned short) p; /* W0721 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0722
@section W0722
@cindex W0722

@subsection メッセージ本文

符号付きの式の値がオーバーフローしています。

@subsection 内容

値が型で表現可能な範囲を超えてしまう(オーバーフローする)と、どのような値が代入されるかは未定義です。
したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int func(int a)
{
    /* when int is 32 bit long */
    if (a < 0) {
        return a + 1; /* OK */
    }
    else if (a < 2147483647) {
        return a + 1; /* OK */
    }

    return a + 1; /* W0722 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0723} 符号付きの式の値がオーバーフローする可能性があります。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0723
@section W0723
@cindex W0723

@subsection メッセージ本文

符号付きの式の値がオーバーフローする可能性があります。

@subsection 内容

値が型で表現可能な範囲を超えてしまう(オーバーフローする)と、どのような値が代入されるかは未定義です。
したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int func(int a)
{
    /* when int is 32 bit long */
    if (a < 0) {
        return a + 1; /* OK */
    }
    else if (a < 2000000000) {
        return a + 1; /* OK */
    }

    return a + 1; /* W0723 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0722} 符号付きの式の値がオーバーフローしています。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0724
@section W0724
@cindex W0724

@subsection メッセージ本文

条件付きインクルード指令によって、認識できない前処理指令が無視されました。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

認識できない前処理指令を見つけたときの対処方法は処理系定義です。したがって、移植性が低下します。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W0726
@section W0726
@cindex W0726

@subsection メッセージ本文

修飾子付き void 型の戻り値が定義された関数 `%s()' の中で、`return 式;' が見つかりました。

@subsection 内容

値を戻してはならない関数であるにも関わらず、明示的な @code{return} 文があります。このような記述は誤りです。

@subsection サンプルコード

@verbatim
const void func(int a)
{
    if (a == 0) {
        return 0; /* W0726 */
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0727
@section W0727
@cindex W0727

@subsection メッセージ本文

列挙型にない値を使っています。

@subsection 内容

このような列挙型の使い方は文法的には合法ですが、本来の列挙型変数として使用されるべき情報を損失するという意味で問題があります。

@subsection サンプルコード

@verbatim
enum Fruits {
    APPLE = 1,
    BANANA,
    ORANGE
};

enum Fruits fruit = 5; /* W0727 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0728} 列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。
@item @ref{W0729} 列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。
@item @ref{W0730} 列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。
@item @ref{W0731} switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0728
@section W0728
@cindex W0728

@subsection メッセージ本文

列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。

@subsection 内容

このような列挙型の使い方は文法的には合法ですが、本来の列挙型変数として使用されるべき情報を損失するという意味で問題があります。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

extern void func1(enum Color);

void func2(void)
{
    func1(ORANGE); /* W0728 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0727} 列挙型にない値を使っています。
@item @ref{W0729} 列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。
@item @ref{W0730} 列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。
@item @ref{W0731} switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0729
@section W0729
@cindex W0729

@subsection メッセージ本文

列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。

@subsection 内容

このような列挙型の使い方は文法的には合法ですが、本来の列挙型変数として使用されるべき情報を損失するという意味で問題があります。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

void func(void)
{
    enum Color c;

    c = ORANGE; /* W0729 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0727} 列挙型にない値を使っています。
@item @ref{W0728} 列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。
@item @ref{W0730} 列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。
@item @ref{W0731} switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0730
@section W0730
@cindex W0730

@subsection メッセージ本文

列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。

@subsection 内容

このような列挙型の使い方は文法的には合法ですが、本来の列挙型変数として使用されるべき情報を損失するという意味で問題があります。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE };

enum Color func(void)
{
    return ORANGE; /* W0730 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0727} 列挙型にない値を使っています。
@item @ref{W0728} 列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。
@item @ref{W0729} 列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。
@item @ref{W0731} switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0731
@section W0731
@cindex W0731

@subsection メッセージ本文

switch 文の case ラベルの値 `%s' は制御式の列挙型に属していません。

@subsection 内容

このような列挙型の使い方は文法的には合法ですが、本来の列挙型変数として使用されるべき情報を損失するという意味で問題があります。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE, GRAPE };

int func(enum Color c)
{
    switch (c) {
    case RED:
        return 1;
    case GRAPE: /* W0731 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0727} 列挙型にない値を使っています。
@item @ref{W0728} 列挙型の関数仮引数に、別の列挙型の列挙定数が実引数として渡されています。
@item @ref{W0729} 列挙型のオブジェクトに、別の列挙型の列挙定数が代入されています。
@item @ref{W0730} 列挙型の戻り値が定義された関数で、別の列挙型の列挙定数が戻されています。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0732
@section W0732
@cindex W0732

@subsection メッセージ本文

`&&' 演算子の両側のオペランドがビット演算の式あるいは算術式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
extern void func(unsigned int a, unsigned int b,unsigned int c, unsigned int d)
{
    int r;
    r = (a + b) && (c - d); /* W0732 */
    r = (a * b) && (c / d); /* W0732 */

    r = (a << b) && (c << d); /* W0732 */
    r = (a >> b) && (c >> d); /* W0732 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0733} `||' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0734} 論理演算子の左側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0735} 論理演算子の右側のオペランドがビット演算の式あるいは算術式です。
@end itemize

@subsection 対応バージョン

1.12.0

@node W0733
@section W0733
@cindex W0733

@subsection メッセージ本文

`||' 演算子の両側のオペランドがビット演算の式あるいは算術式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
extern void func(unsigned int a, unsigned int b,unsigned int c, unsigned int d)
{
    int r;
    r = (a + b) || (c - d); /* W0733 */
    r = (a * b) || (c / d); /* W0733 */

    r = (a << b) || (c << d); /* W0733 */
    r = (a >> b) || (c >> d); /* W0733 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0732} `&&' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0734} 論理演算子の左側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0735} 論理演算子の右側のオペランドがビット演算の式あるいは算術式です。
@end itemize

@subsection 対応バージョン

1.12.0

@node W0734
@section W0734
@cindex W0734

@subsection メッセージ本文

論理演算子の左側のオペランドがビット演算の式あるいは算術式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
extern void func(unsigned int a, unsigned int b, unsigned int c)
{
    int r;
    r = (a + b) && c; /* W0734 */
    r = (a - b) && c; /* W0734 */

    r = (a << b) || c; /* W0734 */
    r = (a >> b) || c; /* W0734 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0732} `&&' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0733} `||' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0735} 論理演算子の右側のオペランドがビット演算の式あるいは算術式です。
@end itemize

@subsection 対応バージョン

1.12.0

@node W0735
@section W0735
@cindex W0735

@subsection メッセージ本文

論理演算子の右側のオペランドがビット演算の式あるいは算術式です。

@subsection 内容

このような記述は誤りの可能性があります。

@subsection サンプルコード

@verbatim
extern void func(unsigned int a, unsigned int b, unsigned int c)
{
    int r;
    r = a && (b + c); /* W0735 */
    r = a && (b - c); /* W0735 */

    r = a || (b >> c); /* W0735 */
    r = a || (b << c); /* W0735 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0732} `&&' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0733} `||' 演算子の両側のオペランドがビット演算の式あるいは算術式です。
@item @ref{W0734} 論理演算子の左側のオペランドがビット演算の式あるいは算術式です。
@end itemize

@subsection 対応バージョン

1.12.0

@node W0736
@section W0736
@cindex W0736

@subsection メッセージ本文

ファイルスコープで宣言された静的変数 `%s' は 1 つの関数内でしか読み書きされていません。

@subsection 内容

グローバル変数が、1 つの関数内でしか使用されていません。このような変数は、保守性を低下させます。

@subsection サンプルコード

@verbatim
static int a = 10; /* W0736 */

int func1(void)
{
    return 0;
}

int func2(void)
{
    return ++a;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0737
@section W0737
@cindex W0737

@subsection メッセージ本文

`enum %s' の内容が不明です。列挙体タグが内容を指定せずに宣言されています。

@subsection 内容

定義していない列挙体のタグを使用することは言語制約違反になります。したがって、移植性を低下させます。

@subsection サンプルコード

@verbatim
extern enum Foo foo; /* W0737 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0738
@section W0738
@cindex W0738

@subsection メッセージ本文

正の整数定数の値がより小さな符号無し型への暗黙の型変換を行ったため、切り捨てられます。

@subsection 内容

値が型で表現可能な範囲を超えてしまう(オーバーフローする)ことで、代入先には元々の定数の値がそのまま入らなくなります。
つまり、プログラマの意図しない値が代入されることになり、不具合につながります。

@subsection サンプルコード

@verbatim
/* when char is 8 bit long */
const unsigned char uc1 = 255; /* OK */
const unsigned char uc2 = 256; /* W0738 */

/* when int is 32 bit long */
const unsigned int ui1 = 4294967295; /* OK */
const unsigned int ui2 = 4294967296; /* W0738 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0739
@section W0739
@cindex W0739

@subsection メッセージ本文

定数式における符号無し減算の結果が負になりました。

@subsection 内容

値が型で表現可能な範囲を超えてしまうことで、代入先には元々の定数の値がそのまま入らなくなります。
つまり、プログラマの意図しない値が代入されることになり、不具合につながります。

@subsection サンプルコード

@verbatim
const unsigned int ui1 = 3U - 3U; /* OK */
const unsigned int ui2 = 3U - 5U; /* W0739 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0740} 定数式における符号無し加算の結果が最大値を超えました。
@item @ref{W0741} 定数式における符号無し乗算の結果が最大値を超えました。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0740
@section W0740
@cindex W0740

@subsection メッセージ本文

定数式における符号無し加算の結果が最大値を超えました。

@subsection 内容

値が型で表現可能な範囲を超えてしまうことで、代入先には元々の定数の値がそのまま入らなくなります。
つまり、プログラマの意図しない値が代入されることになり、不具合につながります。

@subsection サンプルコード

@verbatim
/* when int is 32 bit long */
const unsigned int ui1 = 4294967294U + 1U; /* OK */
const unsigned int ui2 = 4294967295U + 1U; /* W0740 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0739} 定数式における符号無し減算の結果が負になりました。
@item @ref{W0741} 定数式における符号無し乗算の結果が最大値を超えました。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0741
@section W0741
@cindex W0741

@subsection メッセージ本文

定数式における符号無し乗算の結果が最大値を超えました。

@subsection 内容

値が型で表現可能な範囲を超えてしまうことで、代入先には元々の定数の値がそのまま入らなくなります。
つまり、プログラマの意図しない値が代入されることになり、不具合につながります。

@subsection サンプルコード

@verbatim
/* when int is 32 bit long */
const unsigned int ui1 = 2000000000U * 2U; /* OK */
const unsigned int ui2 = 3000000000U * 2U; /* W0741 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0739} 定数式における符号無し減算の結果が負になりました。
@item @ref{W0740} 定数式における符号無し加算の結果が最大値を超えました。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0742
@section W0742
@cindex W0742

@subsection メッセージ本文

負の整数定数式が符号無し型に変換されています。

@subsection 内容

この変換は文法的に問題ありませんが、プログラマの意図どおりでない可能性が高いです。

@subsection サンプルコード

@verbatim
#define MACRO (50)

unsigned int ui;

ui = MACRO - 100; /* W0742 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0743
@section W0743
@cindex W0743

@subsection メッセージ本文

整数定数式の値は、変換先の符号付きの結果の型で表現できる範囲を超えています。

@subsection 内容

値が型で表現可能な範囲を超えてしまうことで、代入先には元々の定数の値がそのまま入らなくなります。
つまり、プログラマの意図しない値が代入されることになり、不具合につながります。
また、このような処理は、動作が処理系定義になります。したがって、移植性を低下させます。

@subsection サンプルコード

@verbatim
/* when char is 8 bit long */
const signed char sc1 = 127; /* OK */
const signed char sc2 = 128; /* W0743 */

/* when int is 32 bit long */
const int si1 = 2147483647; /* OK */
const int si2 = 2147483648; /* W0743 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0744
@section W0744
@cindex W0744

@subsection メッセージ本文

この制御式の値は偽になる定数のため、制御文本体は実行されません。

@subsection 内容

到達しないコードがあるため、信頼性が低下します。

@subsection サンプルコード

@verbatim
#define MACRO1 (0)
#define MACRO2 (1)

if (MACRO1 == MACRO2) { /* W0744 */
    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0745
@section W0745
@cindex W0745

@subsection メッセージ本文

配列の添字が、領域外を指しています。

@subsection 内容

配列の領域外にアクセスする動作は未定義の動作になります。したがって予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
void func(unsigned int a)
{
    int buf[10];

    if (a > 5 && a < 10) {
        buf[a + 5] = 0; /* W0745 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0747
@section W0747
@cindex W0747

@subsection メッセージ本文

暗黙的に signed short 型から signed char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(short a)
{
    signed char b = a; /* W0747 */
    foo(a); /* W0747 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0748
@section W0748
@cindex W0748

@subsection メッセージ本文

暗黙的に unsigned short 型から unsigned char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(unsigned short a)
{
      unsigned char b = a; /* W0748 */
      foo(a); /* W0748 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0749
@section W0749
@cindex W0749

@subsection メッセージ本文

暗黙的に signed int 型から signed char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(int a)
{
    signed char b = a; /* W0749 */
    foo(a); /* W0749 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0750
@section W0750
@cindex W0750

@subsection メッセージ本文

暗黙的に signed int 型から signed short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(int a)
{
    short b = a; /* W0750 */
    foo(a); /* W0750 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0751
@section W0751
@cindex W0751

@subsection メッセージ本文

暗黙的に unsigned int 型から unsigned char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(unsigned int a)
{
    unsigned char b = a; /* W0751 */
    foo(a); /* W0751 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0752
@section W0752
@cindex W0752

@subsection メッセージ本文

暗黙的に unsigned int 型から unsigned short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(unsigned int a)
{
    unsigned short b = a; /* W0752 */
    foo(a); /* W0752 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0753
@section W0753
@cindex W0753

@subsection メッセージ本文

暗黙的に signed long 型から signed char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(long a)
{
    signed char b = a; /* W0753 */
    foo(a); /* W0753 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0754
@section W0754
@cindex W0754

@subsection メッセージ本文

暗黙的に signed long 型から signed short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(long a)
{
    short b = a; /* W0754 */
    foo(a); /* W0754 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0755
@section W0755
@cindex W0755

@subsection メッセージ本文

暗黙的に signed long 型から signed int 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(long a)
{
    int b = a; /* W0755 */
    foo(a); /* W0755 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0756
@section W0756
@cindex W0756

@subsection メッセージ本文

暗黙的に unsigned long 型から unsigned char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(unsigned long a)
{
    unsigned char b = a; /* W0756 */
    foo(a); /* W0756 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0757
@section W0757
@cindex W0757

@subsection メッセージ本文

暗黙的に unsigned long 型から unsigned short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(unsigned long a)
{
    unsigned short b = a; /* W0757 */
    foo(a); /* W0757 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0758
@section W0758
@cindex W0758

@subsection メッセージ本文

暗黙的に unsigned long 型から unsigned int 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(unsigned long a)
{
    unsigned int b = a; /* W0758 */
    foo(a); /* W0758 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0759
@section W0759
@cindex W0759

@subsection メッセージ本文

暗黙的に signed long long 型から signed char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(signed char a);

void bar(long long a)
{
    signed char b = a; /* W0759 */
    foo(a); /* W0759 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0760
@section W0760
@cindex W0760

@subsection メッセージ本文

暗黙的に signed long long 型から signed short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(short a);

void bar(long long a)
{
    short b = a; /* W0760 */
    foo(a); /* W0760 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0761
@section W0761
@cindex W0761

@subsection メッセージ本文

暗黙的に signed long long 型から signed int 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(int a);

void bar(long long a)
{
    int b = a; /* W0761 */
    foo(a); /* W0761 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0762
@section W0762
@cindex W0762

@subsection メッセージ本文

暗黙的に signed long long 型から signed long 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(long a);

void bar(long long a)
{
    long b = a; /* W0762 */
    foo(a); /* W0762 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0763
@section W0763
@cindex W0763

@subsection メッセージ本文

暗黙的に unsigned long long 型から unsigned char 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned char a);

void bar(unsigned long long a)
{
    unsigned char b = a; /* W0763 */
    foo(a); /* W0763 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0764
@section W0764
@cindex W0764

@subsection メッセージ本文

暗黙的に unsigned long long 型から unsigned short 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned short a);

void bar(unsigned long long a)
{
    unsigned short b = a; /* W0764 */
    foo(a); /* W0764 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0765
@section W0765
@cindex W0765

@subsection メッセージ本文

暗黙的に unsigned long long 型から unsigned int 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned int a);

void bar(unsigned long long a)
{
    unsigned int b = a; /* W0765 */
    foo(a); /* W0765 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0766} 暗黙的に unsigned long long 型から unsigned long 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0766
@section W0766
@cindex W0766

@subsection メッセージ本文

暗黙的に unsigned long long 型から unsigned long 型に型変換されています。

@subsection 内容

より小さいデータ型への暗黙のキャストにより、情報を損失する可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(unsigned long a);

void bar(unsigned long long a)
{
    unsigned long b = a; /* W0766 */
    foo(a); /* W0766 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0747} 暗黙的に signed short 型から signed char 型に型変換されています。
@item @ref{W0748} 暗黙的に unsigned short 型から unsigned char 型に型変換されています。
@item @ref{W0749} 暗黙的に signed int 型から signed char 型に型変換されています。
@item @ref{W0750} 暗黙的に signed int 型から signed short 型に型変換されています。
@item @ref{W0751} 暗黙的に unsigned int 型から unsigned char 型に型変換されています。
@item @ref{W0752} 暗黙的に unsigned int 型から unsigned short 型に型変換されています。
@item @ref{W0753} 暗黙的に signed long 型から signed char 型に型変換されています。
@item @ref{W0754} 暗黙的に signed long 型から signed short 型に型変換されています。
@item @ref{W0755} 暗黙的に signed long 型から signed int 型に型変換されています。
@item @ref{W0756} 暗黙的に unsigned long 型から unsigned char 型に型変換されています。
@item @ref{W0757} 暗黙的に unsigned long 型から unsigned short 型に型変換されています。
@item @ref{W0758} 暗黙的に unsigned long 型から unsigned int 型に型変換されています。
@item @ref{W0759} 暗黙的に signed long long 型から signed char 型に型変換されています。
@item @ref{W0760} 暗黙的に signed long long 型から signed short 型に型変換されています。
@item @ref{W0761} 暗黙的に signed long long 型から signed int 型に型変換されています。
@item @ref{W0762} 暗黙的に signed long long 型から signed long 型に型変換されています。
@item @ref{W0763} 暗黙的に unsigned long long 型から unsigned char 型に型変換されています。
@item @ref{W0764} 暗黙的に unsigned long long 型から unsigned short 型に型変換されています。
@item @ref{W0765} 暗黙的に unsigned long long 型から unsigned int 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0767
@section W0767
@cindex W0767

@subsection メッセージ本文

暗黙的に double 型から float 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(double a)
{
    float b = a; /* W0767 */
    foo(a); /* W0767 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0768} 暗黙的に long double 型から float 型に型変換されています。
@item @ref{W0769} 暗黙的に long double 型から double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0768
@section W0768
@cindex W0768

@subsection メッセージ本文

暗黙的に long double 型から float 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(float a);

void bar(long double a)
{
    float b = a; /* W0768 */
    foo(a); /* W0768 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0767} 暗黙的に double 型から float 型に型変換されています。
@item @ref{W0769} 暗黙的に long double 型から double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0769
@section W0769
@cindex W0769

@subsection メッセージ本文

暗黙的に long double 型から double 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern void foo(double a);

void bar(long double a)
{
    double b = a; /* W0769 */
    foo(a); /* W0769 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0767} 暗黙的に double 型から float 型に型変換されています。
@item @ref{W0768} 暗黙的に long double 型から float 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0770
@section W0770
@cindex W0770

@subsection メッセージ本文

外部結合をもつ識別子 `%s' の宣言が、二つ以上存在しています。

@subsection 内容

リンケージをもつオブジェクトおよび関数を複数のファイルで宣言する際は、その宣言に互換性があることを保証する必要があります。
これは、保守性を大きく低下させます。

@subsection サンプルコード

@file{test1.h}
@verbatim
extern int func(void); /* W0770 */
@end verbatim

@file{test2.h}
@verbatim
extern int func(void); /* W0770 */
@end verbatim

@file{test.c}
@verbatim
#include "test1.h"
#include "test2.h"

int func(void)
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0771} グローバルな識別子 `%s' が、二つ以上のファイルで宣言されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0771
@section W0771
@cindex W0771

@subsection メッセージ本文

グローバルな識別子 `%s' が、二つ以上のファイルで宣言されています。

@subsection 内容

リンケージをもつオブジェクトおよび関数を複数のファイルで宣言する際は、その宣言に互換性があることを保証する必要があります。
これは、保守性を大きく低下させます。

@subsection サンプルコード

@file{test1.h}
@verbatim
extern int func(void); /* W0771 */
extern int a; /* W0771 */
@end verbatim

@file{test2.h}
@verbatim
extern int func(void); /* W0771 */
extern int a; /* W0771 */
@end verbatim

@file{test.c}
@verbatim
#include "test1.h"
#include "test2.h"
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0770} 外部結合をもつ識別子 `%s' の宣言が、二つ以上存在しています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0774
@section W0774
@cindex W0774

@subsection メッセージ本文

double 型の値が関数 `float %s()' から返されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern double foo(void);

float bar(void)
{
    return foo(); /* W0774 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0775} long double 型の値が関数 `float %s()' から返されています。
@item @ref{W0776} long double 型の値が関数 `double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0775
@section W0775
@cindex W0775

@subsection メッセージ本文

long double 型の値が関数 `float %s()' から返されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern long double foo(void);

float bar(void)
{
    return foo(); /* W0775 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0774} double 型の値が関数 `float %s()' から返されています。
@item @ref{W0776} long double 型の値が関数 `double %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0776
@section W0776
@cindex W0776

@subsection メッセージ本文

long double 型の値が関数 `double %s()' から返されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。

@subsection サンプルコード

@verbatim
extern long double foo(void);

double bar(void)
{
    return foo(); /* W0776 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0774} double 型の値が関数 `float %s()' から返されています。
@item @ref{W0775} long double 型の値が関数 `float %s()' から返されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0777
@section W0777
@cindex W0777

@subsection メッセージ本文

暗黙的に float 型の複合式から double 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。
より大きい浮動小数点型への暗黙のキャストでは、大きな問題は起きませんが、暗黙のキャストは解析性にもデメリットがあるため推奨しません。

@subsection サンプルコード

@verbatim
void func(float a, float b)
{
    double c = a + b; /* W0777 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0778} 暗黙的に float 型の複合式から long double 型に型変換されています。
@item @ref{W0779} 暗黙的に double 型の複合式から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0778
@section W0778
@cindex W0778

@subsection メッセージ本文

暗黙的に float 型の複合式から long double 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。
より大きい浮動小数点型への暗黙のキャストでは、大きな問題は起きませんが、暗黙のキャストは解析性にもデメリットがあるため推奨しません。

@subsection サンプルコード

@verbatim
void func(float a, float b)
{
    long double c = a + b; /* W0778 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0777} 暗黙的に float 型の複合式から double 型に型変換されています。
@item @ref{W0779} 暗黙的に double 型の複合式から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0779
@section W0779
@cindex W0779

@subsection メッセージ本文

暗黙的に double 型の複合式から long double 型に型変換されています。

@subsection 内容

より小さい浮動小数点型への暗黙のキャストにより、精度落ちになる可能性があります。
より大きい浮動小数点型への暗黙のキャストでは、大きな問題は起きませんが、暗黙のキャストは解析性にもデメリットがあるため推奨しません。

@subsection サンプルコード

@verbatim
void func(double a, double b)
{
    long double c = a + b; /* W0779 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0777} 暗黙的に float 型の複合式から double 型に型変換されています。
@item @ref{W0778} 暗黙的に float 型の複合式から long double 型に型変換されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0780
@section W0780
@cindex W0780

@subsection メッセージ本文

定数式における符号無し左シフト演算 `<<' は、非ゼロの上位ビットを切り詰めます。

@subsection 内容

シフト演算の結果として上位ビットの情報が欠落してしまいます。
これが意図通りであれば問題ありませんが、意図通りでない場合は、不具合の原因になる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int foo(void)
{
    return 0x08000000U << 5; /* W0780 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0781
@section W0781
@cindex W0781

@subsection メッセージ本文

この switch 文にはパスが 1 つしかありません。この switch 文は冗長です。

@subsection 内容

このような @code{switch} 文がプログラマの意図通りだとしたら、
冗長な記述という意味で問題があります。
また、意図通りでないとしたら @code{case} 節の書き忘れが考えられますので、
動作上のバグが発生する可能性があります。
また、コードの閲覧者から見てプログラマの意図通りかどうかを判断できないという問題もあります。

@subsection サンプルコード

@verbatim
int foo(const int i)
{
    if (i > 5) {
        switch (i) { /* W0781 */
        case 0:
            return 1;
        case 5:
            return 2;
        default:
            return 3;
        }
    }

    switch (i) { /* OK */
    case 0:
        return 4;
    default:
        switch (i) { /* W0781 */
        case 10:
            return 5;
        default:
            return 6;
        }
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W0783
@section W0783
@cindex W0783

@subsection メッセージ本文

不完全型を指すポインタを含むキャストが行われています。このプログラムは移植性がありません。

@subsection 内容

完全型から不完全型へのキャストは ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern struct Foo *gp;

void foo(int *p)
{
    gp = (struct Foo *) p; /* W0783 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0784
@section W0784
@cindex W0784

@subsection メッセージ本文

非標準の拡張表記が使われています。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

未定義の拡張表記を使用した場合の動作は未定義です。したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W0785
@section W0785
@cindex W0785

@subsection メッセージ本文

このタグ `%s' の宣言は、以前の宣言と異なります。

@subsection 内容

構造体、共用体、列挙体は衝突しないように異なる識別子でタグ宣言する必要があります。
同じ識別子でタグ宣言されている構造体や共用体の動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct AAA {
    int a;
};

union AAA { /* W0785 */
    long a;
    int b;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0786
@section W0786
@cindex W0786

@subsection メッセージ本文

int、signed int、あるいは unsigned int 以外の型をもつビットフィールドは、ISO C 標準規格ではサポートされません。

@subsection 内容

コンパイラの中には @code{int} 型以外のビットフィールドの使用を許すものがあります。
しかし、@code{int} 型以外のビットフィールドの動作は ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct ST { /* W0786 */
    unsigned int a:3;
    unsigned long b:1;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0787
@section W0787
@cindex W0787

@subsection メッセージ本文

`%s' の型が、以前の異なるスコープで宣言された型と異なります。

@subsection 内容

宣言が異なるスコープにある場合の動作は処理系定義になります。
また、宣言が同じスコープにある場合は標準制約違反になります。
従って、移植性が低下します。
ただし、一方がもう一方の内側のスコープで宣言される場合は問題ありません。

@subsection サンプルコード

@verbatim
void func1(void)
{
    extern int num;
    extern void func3(void);
}

void func2(void)
{
    extern double num; /* W0787 */
    extern void func3(int); /* W0787 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0788} `%s' の型が、以前の同じスコープ内で宣言された型と異なります。
@item @ref{W0789} `%s' の型が、以前のより広いスコープで宣言された型と異なります。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0788
@section W0788
@cindex W0788

@subsection メッセージ本文

`%s' の型が、以前の同じスコープ内で宣言された型と異なります。

@subsection 内容

宣言が異なるスコープにある場合の動作は処理系定義になります。
また、宣言が同じスコープにある場合は標準制約違反になります。
従って、移植性が低下します。
ただし、一方がもう一方の内側のスコープで宣言される場合は問題ありません。

@subsection サンプルコード

@verbatim
extern int func(void);

void func(void) /* W0788 */
{
    typedef int num;
    double num; /* W0788 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0787} `%s' の型が、以前の異なるスコープで宣言された型と異なります。
@item @ref{W0789} `%s' の型が、以前のより広いスコープで宣言された型と異なります。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0789
@section W0789
@cindex W0789

@subsection メッセージ本文

`%s' の型が、以前のより広いスコープで宣言された型と異なります。

@subsection 内容

宣言が異なるスコープにある場合の動作は処理系定義になります。
また、宣言が同じスコープにある場合は標準制約違反になります。
従って、移植性が低下します。
ただし、一方がもう一方の内側のスコープで宣言される場合は問題ありません。

@subsection サンプルコード

@verbatim
int num = 0;
extern int func1(void);

void func2(void)
{
    extern double num; /* W0789 */
    extern void func1(void); /* W0789 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0788} `%s' の型が、以前の同じスコープ内で宣言された型と異なります。
@item @ref{W0789} `%s' の型が、以前のより広いスコープで宣言された型と異なります。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0790
@section W0790
@cindex W0790

@subsection メッセージ本文

グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。

@subsection 内容

文法上の誤りではありませんので、重複定義そのものが原因で予期しない動作を引き起こすことはありません。
しかし、同じ識別子で複数回定義することは無駄な処理と言えます。
無駄なものは、メモリ資源を消費する、ソースコードの可読性を低下させる、などのデメリットがあります。

@subsection サンプルコード

@verbatim
int func(void)
{
    return 0;
}

int a = 0;

int func(void) /* W0790 */
{
    return 1;
}

int a = 1; /* W0790 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0791} グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0791
@section W0791
@cindex W0791

@subsection メッセージ本文

グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。

@subsection 内容

文法上の誤りではありませんので、重複定義そのものが原因で予期しない動作を引き起こすことはありません。
しかし、同じ識別子で複数回定義することは無駄な処理と言えます。
無駄なものは、メモリ資源を消費する、ソースコードの可読性を低下させる、などのデメリットがあります。

@subsection サンプルコード

@file{test1.c}
@verbatim
int func(void) /* W0791 */
{
    return 0;
}

int a = 0; /* W0791 */
@end verbatim

@file{test2.c}
@verbatim
int func(void) /* W0791 */
{
    return 1;
}

int a = 1; /* W0791 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0790} グローバルなオブジェクトまたは関数 `%s' が二回以上定義されています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0792
@section W0792
@cindex W0792

@subsection メッセージ本文

浮動小数点数型を関数ポインタ(あるいはその逆)へキャストしています。

@subsection 内容

関数ポインタから浮動小数点型へのキャスト、またはその逆のキャストは未定義の動作になります。従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int (*foo(const float f))(void)
{
    return (int (*)(void)) f; /* W0792 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0793
@section W0793
@cindex W0793

@subsection メッセージ本文

関数ポインタをオブジェクトを指すポインタ(あるいはその逆)へキャストしています。

@subsection 内容

オブジェクトを指すポインタから関数ポインタへのキャスト、またはその逆の黄やストは未定義の動作になります。
従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
typedef int (*funptr_t)(void);

funptr_t foo(float *p)
{
    return (funptr_t) p; /* W0793 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0794
@section W0794
@cindex W0794

@subsection メッセージ本文

符号付きのオペランドを左シフト演算しています。

@subsection 内容

整数の負の値をどのように表現するかは規格で定義されているわけではありません。
従って、符号付き型の値に対して左シフト演算をした結果は、コンパイラに依存することになり、移植性が低下します。

@subsection サンプルコード

@verbatim
int func(int i)
{
    return i << 1; /* W0794 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0795
@section W0795
@cindex W0795

@subsection メッセージ本文

関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも少ないです。

@subsection 内容

このような記述は、言語制約違反になりますので、移植性を低下させます。
また、スタックを破壊する可能性があるため危険です。

@subsection サンプルコード

@verbatim
extern void foo(int, int, int);

static void bar(void)
{
    foo(1, 2); /* W0795 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0796} 関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも多いです。
@item @ref{W0797} 関数呼び出しの実引数の数が、関数定義における仮引数の数とは異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0796
@section W0796
@cindex W0796

@subsection メッセージ本文

関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも多いです。

@subsection 内容

このような記述は、言語制約違反になりますので、移植性を低下させます。
また、スタックを破壊する可能性があるため危険です。

@subsection サンプルコード

@verbatim
extern void foo(int, int);

static void bar(void)
{
    foo(1, 2, 3); /* W0796 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0795} 関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも少ないです。
@item @ref{W0797} 関数呼び出しの実引数の数が、関数定義における仮引数の数とは異なります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0797
@section W0797
@cindex W0797

@subsection メッセージ本文

関数呼び出しの実引数の数が、関数定義における仮引数の数とは異なります。

@subsection 内容

このような記述は、言語制約違反になりますので、移植性を低下させます。
また、スタックを破壊する可能性があるため危険です。

@subsection サンプルコード

@verbatim
static int foo(int, int);

static int bar(void)
{
    int a = foo(1); /* W0795 */
    int b = foo(1, 2);
    int c = foo(1, 2, 3); /* W0795 */
}

static int foo(int a, int b)
{
    return a + b;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0795} 関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも少ないです。
@item @ref{W0796} 関数呼び出しの実引数の数が、関数プロトタイプ宣言の仮引数の数よりも多いです。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0798
@section W0798
@cindex W0798

@subsection メッセージ本文

不完全な共用体オブジェクトの値を使ってはいけません。

@subsection 内容

オブジェクトの値が必要な文脈で、不完全型をもつ左辺値を用いるような式は
ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern union UN *p;

void func(void)
{
    int i = 0;

    if (p) {
        i = p->i; /* W0798 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0799} 不完全な構造体オブジェクトの値を使ってはいけません。
@item @ref{W0800} `%s' は結合をもたない不完全型です。これは未定義です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0799
@section W0799
@cindex W0799

@subsection メッセージ本文

不完全な構造体オブジェクトの値を使ってはいけません。

@subsection 内容

オブジェクトの値が必要な文脈で、不完全型をもつ左辺値を用いるような式は
 ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
extern struct ST *p;

void func(void)
{
    int i = 0;

    if (p) {
        i = p->i; /* W0799 */
    }
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0798} 不完全な共用体オブジェクトの値を使ってはいけません。
@item @ref{W0800} `%s' は結合をもたない不完全型です。これは未定義です。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0800
@section W0800
@cindex W0800

@subsection メッセージ本文

`%s' は結合をもたない不完全型です。これは未定義です。

@subsection 内容

オブジェクトの値が必要な文脈で、不完全型をもつ左辺値を用いるような式は
 ISO C90 で未定義なので、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
int a[]; /* W0800 */
struct ST s = { 0 }; /* W0800 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0798} 不完全な共用体オブジェクトの値を使ってはいけません。
@item @ref{W0799} 不完全な構造体オブジェクトの値を使ってはいけません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0801
@section W0801
@cindex W0801

@subsection メッセージ本文

この構造体あるいは共用体には名前付きのメンバがありません。

@subsection 内容

名前付きのメンバを一つも持たない構造体または共用体を使用したときの動作は未定義です。
従って、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
struct foo { /* W0801 */
};

struct bar { /* W0801 */
    int;
    int :1;
    long;
    double;
};
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W0802
@section W0802
@cindex W0802

@subsection メッセージ本文

`#include' 前処理指令の後が、<ファイル名> あるいは "ファイル名" 形式のどちらでもありません。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

@code{#include <ファイル名>} または @code{#include "ファイル名"} 以外の形式で記述されている @code{#include} 文の動作は未定義になります。
従って、予期しない動作を引き起こす可能性があります。"

@subsection サンプルコード

@verbatim
#include fruits.h /* W0802 */

#define MACRO 1
#include MACRO /* W0802 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W0803
@section W0803
@cindex W0803

@subsection メッセージ本文

関数形式マクロの実引数の中に、前処理指令が記述されています。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W0804
@section W0804
@cindex W0804

@subsection メッセージ本文

defined 構文が、`defined(識別子)' あるいは `defined 識別子' のどちらでもありません。

@subsection 内容

このような記述は未定義の動作になります。したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#if defined "MACRO" /* W0804 */
#endif
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0805} `defined' に、実引数となる識別子がありません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0805
@section W0805
@cindex W0805

@subsection メッセージ本文

`defined' に、実引数となる識別子がありません。

@subsection 内容

このような記述は未定義の動作になります。したがって、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#if defined "foo" /* W0805 */
int i = 0;
#endif
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0804} defined 構文が、`defined(識別子)' あるいは `defined 識別子' のどちらでもありません。
@end itemize

@subsection 対応バージョン

1.16.0

@node W0806
@section W0806
@cindex W0806

@subsection メッセージ本文

`defined' という名称のマクロを定義しようとしています。

@subsection 内容

ISO C90 で規定されている予約語を定義、再定義、定義解消することは未定義の動作になります。
したがって、予期しない動作を引き起こす可能性あります。

@subsection サンプルコード

@verbatim
#define defined !defined /* W0806 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0807} 事前定義のマクロ名 `%s' を削除しようとしています。
@item @ref{W0808} 事前定義のマクロ名 `%s' を再定義しようとしています。
@end itemize

@subsection 対応バージョン

1.4.0

@node W0807
@section W0807
@cindex W0807

@subsection メッセージ本文

事前定義のマクロ名 `%s' を削除しようとしています。

@subsection 内容

ISO C90 で規定されている予約語を定義、再定義、定義解消することは未定義の動作になります。
したがって、予期しない動作を引き起こす可能性あります。

@subsection サンプルコード

@verbatim
#undef __STDC_VERSION__ /* W0807 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0806} `defined' という名称のマクロを定義しようとしています。
@item @ref{W0808} 事前定義のマクロ名 `%s' を再定義しようとしています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0808
@section W0808
@cindex W0808

@subsection メッセージ本文

事前定義のマクロ名 `%s' を再定義しようとしています。

@subsection 内容

ISO C90 で規定されている予約語を定義、再定義、定義解消することは未定義の動作になります。
したがって、予期しない動作を引き起こす可能性あります。

@subsection サンプルコード

@verbatim
#define __FILE__ "test.c" /* W0808 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0806} `defined' という名称のマクロを定義しようとしています。
@item @ref{W0807} 事前定義のマクロ名 `%s' を削除しようとしています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W0809
@section W0809
@cindex W0809

@subsection メッセージ本文

識別子 `%s' はライブラリで予約済みです。

@subsection 内容

ISO C90 で規定されている予約語を再使用することは未定義の動作になります。
したがって、予期しない動作を引き起こす可能性あります。

@subsection サンプルコード

@verbatim
extern int __value; /* W0809 */
int _VAL = 10; /* W0809 */
static void _func(void); /* W0809 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W0810
@section W0810
@cindex W0810

@subsection メッセージ本文

この `if-if-else' 文の構造をより明確にするためには `@{@}' が必要です。

@subsection 内容

サンプルコードのようなコードでは、@code{else} がどちらの @code{if} に対応するのかが不明確です。
また、本体が単一文で済まなくなったときに、波括弧をつけ忘れるリスクもあります。

@subsection サンプルコード

@verbatim
int foo(int i, int j) {
    if (i < 0) /* W0810 */
        if (j > 0) {
            return 0;
        }
    else {
        return 1;
    }

    if (i > 0) /* W0810 */
        if (j < 0) {
            return 2;
        }
        else {
            return 3;
        }

    return 4;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W0811
@section W0811
@cindex W0811

@subsection メッセージ本文

このマクロの展開結果の、`defined' トークンは、許容されません。

@subsection 内容

このような記述は、未定義の動作のため、予期しない動作を引き起こす可能性があります。

@subsection サンプルコード

@verbatim
#define COND defined(FOO)

#if COND /* W0811 */
int i = 0;
#endif
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W0827
@section W0827
@cindex W0827

@subsection メッセージ本文

ネストされた構造体の初期値の各要素が `@{@}' で囲まれていません。

@subsection 内容

構造体を 0 以外で初期化する場合は、構造を示し、初期化子は波括弧 "@{@}" で囲まなければなりません。

@subsection サンプルコード

@verbatim
struct ST {
    int i;
    int j;
};

struct ST a[2] = { 10, 20, 30, 40 }; /* W0827 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0828} ネストされた配列の初期値の各要素が `@{@}' で囲まれていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0828
@section W0828
@cindex W0828

@subsection メッセージ本文

ネストされた配列の初期値の各要素が `@{@}' で囲まれていません。

@subsection 内容

配列を 0 以外で初期化する場合は、構造を示し、初期化子は波括弧 "@{@}" で囲まなければなりません。

@subsection サンプルコード

@verbatim
int a[3][2] = { {1, 2}, {3, 4}, {5, 6} };
int b[3][2] = { 1, 2, 3, 4, 5, 6 }; /* W0828 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0827} ネストされた構造体の初期値の各要素が `@{@}' で囲まれていません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0830
@section W0830
@cindex W0830

@subsection メッセージ本文

列挙子並びの末尾にカンマ `,' があります。

@subsection 内容

このような記述は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@verbatim
enum Color { Red, Green, Blue, }; /* W0830 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W0831
@section W0831
@cindex W0831

@subsection メッセージ本文

これはインラインアセンブリ用の言語拡張です。#asm と #endasm の間は無視します。

@subsection 内容

インライン・アセンブラ構文は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0832} インラインアセンブリ構文を使っています。これは言語拡張です。このコードは無視します。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0832
@section W0832
@cindex W0832

@subsection メッセージ本文

インラインアセンブリ構文を使っています。これは言語拡張です。このコードは無視します。

@subsection 内容

インライン・アセンブラ構文は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@verbatim
#define ASM_CODE asm("movl %ecx, %eax")

void foo(int arg1, int *arg2, int arg3)
{
    asm("movl %ecx, %eax"); /* W0832 */
    __asm__("movl %ecx, (%eax)"); /* W0832 */

    asm { /* W0832 */
        xorl eax, eax
    }

    ASM_CODE; /* W0832 */

    __asm__ volatile ( /* W0832 */
            "int $0x80"
            : "=a" (r)
              "+b" (arg1),
              "+c" (arg2),
              "+d" (arg3)
            : "a" (128)
            : "memory", "cc");
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0831} これはインラインアセンブリ用の言語拡張です。#asm と #endasm の間は無視します。
@end itemize

@subsection 対応バージョン

1.8.0

@node W0833
@section W0833
@cindex W0833

@subsection メッセージ本文

接尾語 LL を使っています。

@subsection 内容

接尾語 @code{LL} は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@verbatim
long long ll = 123LL; /* W0833 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0834} long long 型を使っています。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0834
@section W0834
@cindex W0834

@subsection メッセージ本文

long long 型を使っています。

@subsection 内容

@code{long long} 型は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@verbatim
extern long long ll; /* W0834 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0833} 接尾語 LL を使っています。
@end itemize

@subsection 対応バージョン

1.18.0

@node W0835
@section W0835
@cindex W0835

@subsection メッセージ本文

可変引数を受け取るマクロが定義されています。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

可変個引数マクロの定義は、言語拡張に該当するため、移植性を低下させます。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W0947
@section W0947
@cindex W0947

@subsection メッセージ本文

文字列リテラルが直接使われています。

@subsection 内容

リテラルが何を表しているのか分かり難く、保守性に悪影響を及ぼします。

@subsection サンプルコード

@verbatim
func("Apple, Banana, Chocolate"); /* W0947 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0948} 文字定数 %s が直接使われています。
@item @ref{W0949} ビットフィールドのサイズ定義に、数値 `%s' が直接使われています。
@item @ref{W0950} 配列のサイズ定義に、数値 `%s' が直接使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0948
@section W0948
@cindex W0948

@subsection メッセージ本文

文字定数 %s が直接使われています。

@subsection 内容

リテラルが何を表しているのか分かり難く、保守性に悪影響を及ぼします。

@subsection サンプルコード

@verbatim
func('a'); /* W0948 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0947} 文字列リテラルが直接使われています。
@item @ref{W0949} ビットフィールドのサイズ定義に、数値 `%s' が直接使われています。
@item @ref{W0950} 配列のサイズ定義に、数値 `%s' が直接使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0949
@section W0949
@cindex W0949

@subsection メッセージ本文

ビットフィールドのサイズ定義に、数値 `%s' が直接使われています。

@subsection 内容

リテラルが何を表しているのか分かり難く、保守性に悪影響を及ぼします。

@subsection サンプルコード

@verbatim
struct ST {
    unsigned int a:1;
    unsigned int a:2; /* W0949 */
    unsigned int a:3; /* W0949 */
};
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0947} 文字列リテラルが直接使われています。
@item @ref{W0948} 文字定数 %s が直接使われています。
@item @ref{W0950} 配列のサイズ定義に、数値 `%s' が直接使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W0950
@section W0950
@cindex W0950

@subsection メッセージ本文

配列のサイズ定義に、数値 `%s' が直接使われています。

@subsection 内容

リテラルが何を表しているのか分かり難く、保守性に悪影響を及ぼします。

@subsection サンプルコード

@verbatim
int a[10]; /* W0950 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0947} 文字列リテラルが直接使われています。
@item @ref{W0948} 文字定数 %s が直接使われています。
@item @ref{W0949} ビットフィールドのサイズ定義に、数値 `%s' が直接使われています。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1026
@section W1026
@cindex W1026

@subsection メッセージ本文

%s 番目の実引数がオブジェクト型ではありません。

@subsection 内容

不完全型の構造体や配列を仮引数にしています。関数の全ての仮引数はオブジェクト型の式である必要があります。

@subsection サンプルコード

@verbatim
extern struct st s;
extern void foo(struct st);

void bar(void)
{
    foo(s); /* W1026 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W1027
@section W1027
@cindex W1027

@subsection メッセージ本文

配列の基本型が関数型です。これは意味がありません。

@subsection 内容

関数の配列が存在しています。

@subsection サンプルコード

@verbatim
int (fun_tbl[20])(void); /* W1027 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1028} 配列の基本型がサイズ不明の配列です。不完全型の配列は構築できません。
@item @ref{W1029} 配列の基本型が内容不明の構造体あるいは共用体です。不完全型の配列は構築できません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1028
@section W1028
@cindex W1028

@subsection メッセージ本文

配列の基本型がサイズ不明の配列です。不完全型の配列は構築できません。

@subsection 内容

この配列は不完全型で定義されています。これは誤りです。

@subsection サンプルコード

@verbatim
int a[4][]; /* W1028 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1027} 配列の基本型が関数型です。これは意味がありません。
@item @ref{W1029} 配列の基本型が内容不明の構造体あるいは共用体です。不完全型の配列は構築できません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1029
@section W1029
@cindex W1029

@subsection メッセージ本文

配列の基本型が内容不明の構造体あるいは共用体です。不完全型の配列は構築できません。

@subsection 内容

この配列は、不完全な要素を持つ構造体または共用体を型として定義しています。

@subsection サンプルコード

@verbatim
struct ST a[5]; /* W1029 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1027} 配列の基本型が関数型です。これは意味がありません。
@item @ref{W1028} 配列の基本型がサイズ不明の配列です。不完全型の配列は構築できません。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1030
@section W1030
@cindex W1030

@subsection メッセージ本文

ラベル `%s' がこの関数の中で二回以上使われています。

@subsection 内容

同じ名前のラベルが、関数内で 2 回以上使われています。このような使い方は誤りです。

@subsection サンプルコード

@verbatim
void func(int a, int b)
{
    if (a == 0) {
        int c = 0;
RETRY:
        b = 10;
    }

    if (b != 0) {
        goto RETRY;
    }
RETRY: /* W1030 */
    b = 1;

    ...snip...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.6.0

@node W1031
@section W1031
@cindex W1031

@subsection メッセージ本文

オブジェクト `%s' は、外部結合と内部結合の両方で宣言されています。その動作は未定義です。

@subsection 内容

同じ名前の変数が 2 回以上定義されていて、その 1 つには @code{static} 宣言がついています。このような使い方は誤りです。

@subsection サンプルコード

@file{test.h}
@verbatim
extern int a;
@end verbatim

@file{test.c}
@verbatim
#include "test.h"

static int a; /* W1031 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W1032
@section W1032
@cindex W1032

@subsection メッセージ本文

内部結合をもつ変数 '%s' の仮定義は、不完全型ではいけません。

@subsection 内容

内部結合を持つオブジェクトの仮定義でのうち、後で示されたほうにに明示的な定義が見つかりません。このような使い方は誤りです。

@subsection サンプルコード

@verbatim
static struct ST a[3]; /* W1032 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W1033
@section W1033
@cindex W1033

@subsection メッセージ本文

関数の戻り値の型に volatile あるいは const 修飾子を使っています。その動作は未定義です。

@subsection 内容

関数の戻り値の型が、@code{volatile} 型の場合の動作は処理系定義です。
また、@code{const} 型の場合は未定義です。

@subsection サンプルコード

@verbatim
extern const int func1(int); /* W1033 */

const int func2(int i) /* W1033 */
{
    return i + 1;
}

const int *func3(int i) /* OK */
{
    static int j;

    j = i;
    return &j;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.4.0

@node W1034
@section W1034
@cindex W1034

@subsection メッセージ本文

ブロックスコープで、関数 `%s()' に static 記憶域クラス指定子を使って宣言されています。この用法は意味がありません。

@subsection 内容

@code{static} な関数がブロックスコープ内で宣言されています。
関数宣言はブロック・スコープの場合 @code{static} を使用できません。

@subsection サンプルコード

@verbatim
int func(void)
{
    static int func1(void); /* W1034 */
    extern int func2(void);
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W1035
@section W1035
@cindex W1035

@subsection メッセージ本文

`%s' は typedef として宣言されています。明示的な型指定子を使わずに、より内側のスコープで再宣言することはできません。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

@code{typedef} の再定義は未定義の動作になります。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1036} `%s' は typedef として宣言されています。明示的な型指定子を使わずに、構造体または共用体のメンバとして再宣言することはできません。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W1036
@section W1036
@cindex W1036

@subsection メッセージ本文

`%s' は typedef として宣言されています。明示的な型指定子を使わずに、構造体または共用体のメンバとして再宣言することはできません。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

@code{typedef} の再定義は未定義の動作になります。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1035} `%s' は typedef として宣言されています。明示的な型指定子を使わずに、より内側のスコープで再宣言することはできません。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W1037
@section W1037
@cindex W1037

@subsection メッセージ本文

外部結合をもつ `%s' が、二つ以上宣言されていますが互換性がありません。

@subsection 内容

外部結合を持つ同一の識別子を複数宣言する際は、すべての宣言において、
その型（関数の宣言の場合は、戻り値の型、結合、例外仕様）に互換性を保証する必要があります。

@subsection サンプルコード

@file{test1.c}
@verbatim
extern void func(void); /* W1037 */
extern int a; /* W1037 */
@end verbatim

@file{test2.c}
@verbatim
extern int func(int); /* W1037 */
extern long a; /* W1037 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W1039
@section W1039
@cindex W1039

@subsection メッセージ本文

%s 番目の指定子に `ll' が使われています。

@subsection 内容

'@code{ll}' を変換指定子に使用しています。このような記述は ISO C90 では認められていません。

@subsection サンプルコード

@verbatim
extern int printf(const char *, ...);

void foo(long long ll)
{
    printf("%lld", ll); /* W1039 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W1040
@section W1040
@cindex W1040

@subsection メッセージ本文

前処理指令の後に認識できない文字列が記述されています。

@subsection 内容

このような前処理指令の記述は、ISO C90 標準規格ではサポートされていません。

@subsection サンプルコード

@verbatim
#define TEST

#ifdef TEST
#if defined(CASE_1)
int i = 1;
#elif defined(CASE_2)
int i = 2;
#endif CASE /* W1040 */
#else
int i = 0;
#endif TEST /* W1040 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1041} `%s' は、ISO C 標準規格の正式な前処理指令ではありません。
@item @ref{W1042} 前処理指令の中で sizeof 演算子を使っています。これは言語拡張です。
@end itemize

@subsection 対応バージョン

1.16.0

@node W1041
@section W1041
@cindex W1041

@subsection メッセージ本文

`%s' は、ISO C 標準規格の正式な前処理指令ではありません。

@subsection 内容

このような前処理指令の記述は、ISO C90 標準規格ではサポートされていません。

@subsection サンプルコード

@verbatim
#compiler_specific_extension 1 2.3 "4" /* W1041 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1040} 前処理指令の後に認識できない文字列が記述されています。
@item @ref{W1042} 前処理指令の中で sizeof 演算子を使っています。これは言語拡張です。
@end itemize

@subsection 対応バージョン

1.16.0

@node W1042
@section W1042
@cindex W1042

@subsection メッセージ本文

前処理指令の中で sizeof 演算子を使っています。これは言語拡張です。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

このような前処理指令の記述は、ISO C90 標準規格ではサポートされていません。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1040} 前処理指令の後に認識できない文字列が記述されています。
@item @ref{W1041} `%s' は、ISO C 標準規格の正式な前処理指令ではありません。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W1043
@section W1043
@cindex W1043

@subsection メッセージ本文

`@@ address' は、ISO C 標準規格ではサポートされていません。言語拡張と見なします。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

このような構文記述は、ISO C90 標準規格ではサポートされていないため、言語拡張とみなされます。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1045} この `@@ word' 構文は無視されます。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W1045
@section W1045
@cindex W1045

@subsection メッセージ本文

この `@@ word' 構文は無視されます。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

このような構文記述は、ISO C90 標準規格ではサポートされていないため、言語拡張とみなされます。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1043} `@@ address' は、ISO C 標準規格ではサポートされていません。言語拡張と見なします。
@end itemize

@subsection 対応バージョン

2.0.0 以降の予定

@node W1046
@section W1046
@cindex W1046

@subsection メッセージ本文

`\' と改行の間にある空白文字類が無視されています。

@subsection 内容

ISO C 規格ではバックスラッシュ文字の後に直接改行文字が続くべきであると規定しています。

@subsection サンプルコード

@verbatim
#define FOO(a, b)   /* OK */    \
    (               /* W1046 */ \ 
        (a) + (b)   /* W1046 */ \	
    )
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W1047
@section W1047
@cindex W1047

@subsection メッセージ本文

構造体、共用体、あるいは配列の初期化子がリテラルではありません。

@subsection 内容

初期化子が定数式になっていません。

@subsection サンプルコード

@verbatim
int foo(int i, int j)
{
    int a[] = { 0, i, j }; /* W1047 */
    return a[1];
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W1048
@section W1048
@cindex W1048

@subsection メッセージ本文

マルチバイト文字リテラルは処理系定義の値になります。

@subsection 内容

@b{このメッセージは AdLint 2.0.0 以降で出力する予定です。}

マルチバイト文字定数が使用されています。この値やサイズは処理系によって異なるため、移植性が低下します。

@subsection サンプルコード

@c{未実装}
@verbatim
/* 追記予定 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

2.0.0 以降の予定

@node W1049
@section W1049
@cindex W1049

@subsection メッセージ本文

この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。

@subsection 内容

@code{char} が 8bit の場合、@code{signed char} 型は -128～127 の範囲しか表現できません。したがって、例 1 では表現できないことがあります。この場合、結果は "処理系定義" になります。
符号なし演算の結果は、オーバーフローせず、ラップアラウンドします。例 2 では、ラップアラウンドし結果が切り詰められる可能性があります。

@subsection サンプルコード

例 1
@verbatim
void func1(signed int si)
{
    signed char sc = (signed char) si + 10; /* W1049 */
}
@end verbatim

例 2
@verbatim
void func(unsigned int ui)
{
    unsigned int a = ui * ui;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@item @ref{W1051} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込みます。
@item @ref{W1052} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込むことがあります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1050
@section W1050
@cindex W1050

@subsection メッセージ本文

この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。

@subsection 内容

@code{char} が 8bit の場合、@code{signed char} 型は -128～127 の範囲しか表現できません。したがって、例 1 では表現できないことがあります。この場合、結果は "処理系定義" になります。
符号なし演算の結果は、オーバーフローせず、ラップアラウンドします。例 2 では、ラップアラウンドし結果が切り詰められる可能性があります。

@subsection サンプルコード

例 1
@verbatim
void func(signed int si)
{
    signed char sc = 0;

    if (si > 127) {
        sc = (signed char) si + 1; /* W1050 */
    }
}
@end verbatim

例 2
@verbatim
void func(unsigned int ui)
{
    unsigned int a = ui * ui;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1051} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込みます。
@item @ref{W1052} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込むことがあります。
@item @ref{C1000} 次の実行パスで警告を検知しました。
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1051
@section W1051
@cindex W1051

@subsection メッセージ本文

符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込みます。

@subsection 内容

符号なし演算の結果は、オーバーフローせずラップアラウンドし、結果が切り詰められる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(unsigned int ui)
{
    if (ui > 0xEFFFFFFFU) {
        return ui + 0x10000000U; /* W1051 */
    }

    return 0U;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@item @ref{W1052} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込むことがあります。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1052
@section W1052
@cindex W1052

@subsection メッセージ本文

符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込むことがあります。

@subsection 内容

符号なし演算の結果は、オーバーフローせずラップアラウンドし、結果が切り詰められる可能性があります。

@subsection サンプルコード

@verbatim
unsigned int func(unsigned int a, unsigned int b)
{
    if (a > 0xEFFFFFFFU && b < 0x20000000U) {
        return a + b; /* W1052 */
    }

    return 0U;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@item @ref{W1051} 符号無し型 `%s' の算術演算結果は、桁あふれによって 0 を回り込みます。
@end itemize

@subsection 対応バージョン

1.0.0

@node W1053
@section W1053
@cindex W1053

@subsection メッセージ本文

仮引数が列挙型である関数の実引数に数値定数が渡されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(enum Color);

void func2(void)
{
    func1(4); /* W1053 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1054
@section W1054
@cindex W1054

@subsection メッセージ本文

列挙型に、列挙型ではない式が代入されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern enum Color col;

void func2(void)
{
    col = 4; /* W1054 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1055
@section W1055
@cindex W1055

@subsection メッセージ本文

戻り値が列挙型の関数から、列挙型ではない式が返されています。

@subsection 内容

列挙型から非列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

enum Color func(void)
{
    return 4; /* W1055 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1056
@section W1056
@cindex W1056

@subsection メッセージ本文

仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。

@subsection 内容

列挙型から異なる列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN= 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

extern void func1(enum Color);

void func2(enum Season ssn)
{
    func1(ssn); /* W1056 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1057
@section W1057
@cindex W1057

@subsection メッセージ本文

列挙型に、異なる列挙型のオブジェクトが代入されています。

@subsection 内容

列挙型から異なる列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

extern enum Color col;

void func(enum Season ssn)
{
    col = ssn; /* W1057 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1058
@section W1058
@cindex W1058

@subsection メッセージ本文

戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。

@subsection 内容

列挙型から異なる列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED  = 1, GREEN = 2, BLUE = 4 };
enum Season { SPRING = 1, SUMMER, AUTUMN, WINTER };

enum Color func(enum Season ssn)
{
    return ssn; /* W1058 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1059
@section W1059
@cindex W1059

@subsection メッセージ本文

仮引数が列挙型でない関数の実引数に列挙型が渡されています。

@subsection 内容

列挙型から非列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(int num);

void func2(enum Color col)
{
    func1(col); /* W1059 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1060
@section W1060
@cindex W1060

@subsection メッセージ本文

戻り値が列挙型でない関数から、列挙型が返されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

int func2(enum Color col)
{
    return col; /* W1060 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1061
@section W1061
@cindex W1061

@subsection メッセージ本文

仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern void func1(enum Color);

void func2(int num)
{
    func1(num); /* W1061 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1062
@section W1062
@cindex W1062

@subsection メッセージ本文

異なる型の非定数式の値が列挙型オブジェクトに代入されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

extern enum Color col;

void func(int num)
{
    col = num + 1; /* W1062 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1063
@section W1063
@cindex W1063

@subsection メッセージ本文

戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED = 1, GREEN = 2, BLUE = 4 };

enum Color func(int num)
{
    return num / 2; /* W1063 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.6.0

@node W1064
@section W1064
@cindex W1064

@subsection メッセージ本文

列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。

@subsection 内容

非列挙型から列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };

int func(enum Color c)
{
    switch (c) {
    case RED: /* OK */
        return 1;
    case 1: /* W1064 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1065} 列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.4.0

@node W1065
@section W1065
@cindex W1065

@subsection メッセージ本文

列挙型の制御式が使われている switch 文で、異なる列挙型の値が case ラベルに使われています。

@subsection 内容

列挙型から異なる列挙型への変換が生じています。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruits { APPLE, BANANA, ORANGE, GRAPE };

int func(enum Color c)
{
    switch (c) {
    case RED: /* OK */
        return 1;
    case ORANGE: /* W1065 */
        return 2;
    }

    return 0;
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1053} 仮引数が列挙型である関数の実引数に数値定数が渡されています。
@item @ref{W1054} 列挙型に、列挙型ではない式が代入されています。
@item @ref{W1055} 戻り値が列挙型の関数から、列挙型ではない式が返されています。
@item @ref{W1056} 仮引数が列挙型である関数の実引数が異なる列挙型のオブジェクトです。
@item @ref{W1057} 列挙型に、異なる列挙型のオブジェクトが代入されています。
@item @ref{W1058} 戻り値が列挙型の関数から、異なる列挙型のオブジェクトが返されています。
@item @ref{W1059} 仮引数が列挙型でない関数の実引数に列挙型が渡されています。
@item @ref{W1060} 戻り値が列挙型でない関数から、列挙型が返されています。
@item @ref{W1061} 仮引数が列挙型である関数の実引数に異なる型の非定数式の値が渡されています。
@item @ref{W1062} 異なる型の非定数式の値が列挙型オブジェクトに代入されています。
@item @ref{W1063} 戻り値が列挙型の関数から、異なる型の非定数式の値が返されています。
@item @ref{W1064} 列挙型の制御式が使われている switch 文で、整数定数が case ラベルに使われています。
@end itemize

@subsection 対応バージョン

1.4.0

@node W1066
@section W1066
@cindex W1066

@subsection メッセージ本文

明示的に float 型の複合式の値を double 型に変換しています。

@subsection 内容

例えばサンプルコードでは @code{float} 型変数 @code{a} の 2 乗した値が @code{float} 型の範囲に収まらないことを想定して
 @code{double} 型変数 @code{b} へ代入しています。しかし、環境によっては @code{a * a} の演算はいったん @code{float} 型として
結果を出したあとに @code{double} 型にキャストされ、@code{b} へ代入される場合があります。その場合、@code{a} の値によっては精度落ちが起こります。

@subsection サンプルコード

@verbatim
void func(float a)
{
    double b = (double) (a * a);
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1067} 明示的に float 型の複合式の値を long double 型に変換しています。
@item @ref{W1068} 明示的に double 型の複合式の値を long double 型に変換しています。
@end itemize

@subsection 対応バージョン

1.14.0

@node W1067
@section W1067
@cindex W1067

@subsection メッセージ本文

明示的に float 型の複合式の値を long double 型に変換しています。

@subsection 内容

例えばサンプルコードでは @code{float} 型変数 @code{a} の 2 乗した値が @code{float} 型の範囲に収まらないことを想定して
 @code{long double} 型変数 @code{b} へ代入しています。しかし、環境によっては @code{a * a} の演算はいったん @code{float} 型として
結果を出したあとに @code{long double} 型にキャストされ、@code{b} へ代入される場合があります。その場合、@code{a} の値によっては精度落ちが起こります。

@subsection サンプルコード

@verbatim
void func(float a)
{
    long double b = (long double) (a * a);
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1066} 明示的に float 型の複合式の値を double 型に変換しています。
@item @ref{W1068} 明示的に double 型の複合式の値を long double 型に変換しています。
@end itemize

@subsection 対応バージョン

1.14.0

@node W1068
@section W1068
@cindex W1068

@subsection メッセージ本文

明示的に double 型の複合式の値を long double 型に変換しています。

@subsection 内容

例えばサンプルコードでは @code{double} 型変数 @code{a} の 2 乗した値が @code{double} 型の範囲に収まらないことを想定して
 @code{long double} 型変数 @code{b} へ代入しています。しかし、環境によっては @code{a * a} の演算はいったん @code{double} 型として
結果を出したあとに @code{long double} 型にキャストされ、@code{b} へ代入される場合があります。その場合、@code{a} の値によっては精度落ちが起こります。

@subsection サンプルコード

@verbatim
void func(double a)
{
    long double b = (long double) (a * a);
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W1066} 明示的に float 型の複合式の値を double 型に変換しています。
@item @ref{W1067} 明示的に float 型の複合式の値を long double 型に変換しています。
@end itemize

@subsection 対応バージョン

1.14.0

@node W1069
@section W1069
@cindex W1069

@subsection メッセージ本文

この `if-else-if' 文には、末尾の `else' 節がありません。

@subsection 内容

@code{else} 節がないと、 @code{else} 節を書き忘れているのか、 @code{else} 節が発生しない @code{if-else if} 文なのかが分からず、混乱を招きます。

@subsection サンプルコード

@verbatim
static int func(int i)
{
    if (i == 2) { /* W1069 */
        return 0;
    }
    else if (i == 4) {
        return 1;
    }
    return 2;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.14.0

@node W1070
@section W1070
@cindex W1070

@subsection メッセージ本文

この `switch' 文には実行経路が 2 つしか無いため、`if-else' 文に変換可能です。

@subsection 内容

深刻な問題ではありませんが、通常 @code{switch} 文は 2 つ以上の分岐があることが想定されるので、
@code{case} 節が 1 つしかない @code{switch} 文では、実行パスの定義漏れが疑われます。

@subsection サンプルコード

@verbatim
switch (x) { /* W1070 */
case 1:
    ...
    break;
default:
    ...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.14.0

@node W1071
@section W1071
@cindex W1071

@subsection メッセージ本文

関数 `%s' には複数の終了点があります。

@subsection 内容

出口となる @code{return} 文が関数内に複数個存在しています。

@subsection サンプルコード

@verbatim
void foo(int i) /* W1071 */
{
    if (i == 0) {
        return;
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.18.0

@node W1072
@section W1072
@cindex W1072

@subsection メッセージ本文

`goto' 文を使用しています。

@subsection 内容


ファイル内で @code{goto} 文が使用されています。

@subsection サンプルコード

@verbatim
static int func(int i)
{
    if (i == 1) {
        goto Label1; /* W1072 */
    }

    goto Label2; /* W1072 */

Label1:
    i = 10;
Label2:
    i = 20;
    return i;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.14.0

@node W1073
@section W1073
@cindex W1073

@subsection メッセージ本文

関数 `%s' の戻り値を破棄しています。

@subsection 内容

関数の戻り値が使用されていない場合、その戻り値は無駄な要素といえます。コード中に無駄な要素があることで解析性が低下します。
また、使用されない戻り値が多いことは、戻り値のチェックも怠っていることが推測されるため、障害許容性が低下している可能性が高いといえます。

@subsection サンプルコード

@verbatim
extern int bar(void);
static void foo(void)
{
    int i;
    int j;
    for (i = 0, bar(); i < 10; i++) { /* W1073 */
        j = bar(); /* OK */
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W1074
@section W1074
@cindex W1074

@subsection メッセージ本文

`sizeof' 演算子のオペランドは実行されないため、副作用が発生しません。

@subsection 内容

サンプルコードで示したソースコードの場合、@code{sizeof} 演算子は式を評価しないため、@code{data++} は実行されません。
従って @code{data++} が実行されていることが前提だとすると様々な予期しない問題が起きる可能性があります。

@subsection サンプルコード

@verbatim
static int foo(void)
{
    int i = 0;

    if (sizeof(i++) == 4) { /* W1074 */
        return 0;
    }
    else {
        return 1;
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W1075
@section W1075
@cindex W1075

@subsection メッセージ本文

`%s' は以前に内部結合として宣言されていますが、この宣言には `static' がありません。

@subsection 内容

static 記憶域クラス指定子が明示されていません。

@subsection サンプルコード

@verbatim
static int func(void);
int func(void) /* W1075 */
{
    ...
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W1076
@section W1076
@cindex W1076

@subsection メッセージ本文

関数 `%s' は内部結合を持ちますが、事前に内部結合として宣言していません。

@subsection 内容

関数プロトタイプ宣言がないまま static 記憶域クラス指定子付きの関数が定義されています。

@subsection サンプルコード

@verbatim
static int func(void) /* W1076 */
{
    return 0;
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W1077
@section W1077
@cindex W1077

@subsection メッセージ本文

サイズが省略された配列を宣言しています。

@subsection 内容

この配列は、サイズが明示されていません。

@subsection サンプルコード

@verbatim
extern int a[]; /* W1077 */
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.16.0

@node W9001
@section W9001
@cindex W9001

@subsection メッセージ本文

この文には制御が到達しません。

@subsection 内容

この実行経路に至るための分岐条件が常に偽と評価されるため、この文は実行されるこ
とがありません。

@subsection サンプルコード

@verbatim
extern int all_possible_values_of_int(void);
extern unsigned int zero_if_succeeded(void);

void func(void)
{
    int i = all_possible_values_of_int();

    if (i < 0) {
        unsigned int ui = zero_if_succeeded();

        if (ui > 0) {
            return;
        }

        /* "ui" is equal to zero at this point */

        /* Always be true?  No, it'll be false all the time */
        if (i < ui) {
            return; /* W9001: Control never reaches here! */
        }
        /*
         * ISO standard says;
         *   Usual Arithmetic Conversion performed before evaluating
         *   the expression "i < ui".
         * Usual Arithmetic Conversion makes "i < ui" into
         * "(unsigned int) i < ui" and then the value of "i" which
         * is less than 0 will be converted into a new value which
         * is greater than 0 because of the wrap-around.
         * So, the expression ("a value greater than 0" < 0) makes
         * always false.
         */
    }
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W9002
@section W9002
@cindex W9002

@subsection メッセージ本文

ファイルの末尾に改行文字がありません。

@subsection 内容

プリプロセッサによって処理する行は、すべて末尾に改行文字が必要です。

@subsection サンプルコード

なし。

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.0.0

@node W9003
@section W9003
@cindex W9003

@subsection メッセージ本文

暗黙的に `%s' 型のオブジェクトが `%s' 型のオブジェクトに変換されています。

@subsection 内容

変換元または変換先の型が非標準型である暗黙的な変換が発生することを示します。

@subsection サンプルコード

@verbatim
enum Color { RED, BLUE, GREEN };
enum Fruit { APPLE, BANANA, ORANGE };

extern void foo(enum Color);

static void bar(void)
{
    int i = RED; /* W9003 */
    foo(ORANGE); /* W9003 */
}
@end verbatim

@subsection 関連メッセージ

なし。

@subsection 対応バージョン

1.12.0

@node C0001
@section C0001
@cindex C0001

@subsection メッセージ本文

この識別名 `%s' で警告を検知しました。

@subsection 内容

@ref{W0051,W0051}、@ref{W0052,W0052}、@ref{W0491,W0491}、@ref{W0492,W0492}、
@ref{W0703,W0703}、@ref{W0770,W0770}、@ref{W0771,W0771}、@ref{W0787,W0787}、
@ref{W0788,W0788}、@ref{W0789,W0789}、@ref{W0790,W0790}、@ref{W0791,W0791}、
@ref{W1037,W1037} メッセージの直後に出力され、問題となる識別子の対となる識別子の位置を示します。

@subsection サンプルコード

@verbatim
int very_long_long_long_long_long_long_long_identifier_2 = 1; /* W0052 */
int very_long_long_long_long_long_long_long_identifier_1 = 0; /* C0001 */
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0051} 外部識別子 `%s' が他の識別子名と、リンカ特性で指定された文字数の範囲内で区別できません。
@item @ref{W0052} 識別子名 `%s' が他の識別子名と、コンパイラ特性で指定された文字数の範囲内で区別できません。
@end itemize

@subsection 対応バージョン

1.0.0

@node C1000
@section C1000
@cindex C1000

@subsection メッセージ本文

次の実行パスで警告を検知しました。

@subsection 内容

@ref{W0093,W0093}、@ref{W0096,W0096}、@ref{W0097,W0097}、@ref{W0115,W0115}、
@ref{W0116,W0116}、@ref{W0421,W0421}、@ref{W0422,W0422}、@ref{W0423,W0423}、
@ref{W0424,W0424}、@ref{W0459,W0459}、@ref{W0460,W0460}、@ref{W0461,W0461}、
@ref{W0462,W0462}、@ref{W0568,W0568}、@ref{W0569,W0569}、@ref{W0570,W0570}、
@ref{W0607,W0607}、@ref{W0608,W0608}、@ref{W0705,W0705}、@ref{W0707,W0707}、
@ref{W0720,W0720}、@ref{W0745,W0745}、@ref{W1049,W1049}、@ref{W1050,W1050}
メッセージの直後に出力され、このメッセージの後に問題を検出した状況を補足するメ
ッセージが続くことを示します。

@subsection サンプルコード

@verbatim
 1: int foo(int i)
 2: {
 3:     int j; /* C1003 */
 4:
 5:     if (i < 0) { /* C1001 */
 6:         if (i < -10) { /* C1002 */
 7:             j = 2;
 8:         }
 9:         else if (i < -5) { /* C1002 */
10:             j = 3;
11:         }
12:     }
13:     else {
14:         j = 1;
15:     }
16:
17:     return j; /* W0460 */
18: }

a.c:17:12:warning:c_builtin:W0460:UNC:X99:変数 `j' の値は、この式の評価時点では設定されていないことがあります。
:::context:c_builtin:C1000:INF:X99:次の実行パスで警告を検知しました。
a.c:3:9:context:c_builtin:C1003:INF:X99:ここで該当変数が初期値を指定せずに定義されています。
a.c:5:11:context:c_builtin:C1001:INF:X99:この制御式を真として評価しました。
a.c:6:15:context:c_builtin:C1002:INF:X99:この制御式を偽として評価しました。
a.c:9:20:context:c_builtin:C1002:INF:X99:この制御式を偽として評価しました。
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{C1001} この制御式を真として評価しました。
@item @ref{C1002} この制御式を偽として評価しました。
@item @ref{C1003} ここで該当変数が初期値を指定せずに定義されています。
@item @ref{C1004} ここで該当変数に NULL の値を割り当てました。
@item @ref{C1005} ここで該当変数に NULL の可能性がある値を割り当てました。
@item @ref{C1006} ここで該当変数に値を割り当てました。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1001
@section C1001
@cindex C1001

@subsection メッセージ本文

この制御式を真として評価しました。

@subsection 内容

@ref{W0093,W0093}、@ref{W0096,W0096}、@ref{W0097,W0097}、@ref{W0115,W0115}、
@ref{W0116,W0116}、@ref{W0421,W0421}、@ref{W0422,W0422}、@ref{W0423,W0423}、
@ref{W0424,W0424}、@ref{W0459,W0459}、@ref{W0460,W0460}、@ref{W0461,W0461}、
@ref{W0462,W0462}、@ref{W0568,W0568}、@ref{W0569,W0569}、@ref{W0570,W0570}、
@ref{W0607,W0607}、@ref{W0608,W0608}、@ref{W0705,W0705}、@ref{W0707,W0707}、
@ref{W0720,W0720}、@ref{W0745,W0745}、@ref{W1049,W1049}、@ref{W1050,W1050}
メッセージを検出した状況として、該当制御式を真と評価したことを示します。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0093} ゼロで除算される恐れがあります。
@item @ref{W0096} ゼロになる定数式で除算しています。
@item @ref{W0097} ゼロの値で除算しています。
@item @ref{W0115} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。
@item @ref{W0116} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。
@item @ref{W0421} 値が NULL になるポインタに対して間接参照が行われています。
@item @ref{W0422} 値が NULL になることがあるポインタに対して間接参照が行われています。
@item @ref{W0423} 値が NULL になるポインタに対して算術演算を行っています。
@item @ref{W0424} 値が NULL になることがあるポインタに対して算術演算を行っています。
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@item @ref{W0568} 符号付き定数式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0569} 符号付きの式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0570} 符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
@item @ref{W0607} 値が負になる整数式が符号無し型に変換されています。
@item @ref{W0608} 値が負になることがありうる整数式が符号無し型に変換されています。
@item @ref{W0705} 配列の添字が領域外を指すことがあります。
@item @ref{W0707} 配列の添字が領域外を指す定数です。
@item @ref{W0720} 浮動小数点型の値が変換先の型の範囲に入りきりません。
@item @ref{W0745} 配列の添字が、領域外を指しています。
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1002
@section C1002
@cindex C1002

@subsection メッセージ本文

この制御式を偽として評価しました。

@subsection 内容

@ref{W0093,W0093}、@ref{W0096,W0096}、@ref{W0097,W0097}、@ref{W0115,W0115}、
@ref{W0116,W0116}、@ref{W0421,W0421}、@ref{W0422,W0422}、@ref{W0423,W0423}、
@ref{W0424,W0424}、@ref{W0459,W0459}、@ref{W0460,W0460}、@ref{W0461,W0461}、
@ref{W0462,W0462}、@ref{W0568,W0568}、@ref{W0569,W0569}、@ref{W0570,W0570}、
@ref{W0607,W0607}、@ref{W0608,W0608}、@ref{W0705,W0705}、@ref{W0707,W0707}、
@ref{W0720,W0720}、@ref{W0745,W0745}、@ref{W1049,W1049}、@ref{W1050,W1050}
メッセージを検出した状況として、該当制御式を偽と評価したことを示します。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0093} ゼロで除算される恐れがあります。
@item @ref{W0096} ゼロになる定数式で除算しています。
@item @ref{W0097} ゼロの値で除算しています。
@item @ref{W0115} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。
@item @ref{W0116} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。
@item @ref{W0421} 値が NULL になるポインタに対して間接参照が行われています。
@item @ref{W0422} 値が NULL になることがあるポインタに対して間接参照が行われています。
@item @ref{W0423} 値が NULL になるポインタに対して算術演算を行っています。
@item @ref{W0424} 値が NULL になることがあるポインタに対して算術演算を行っています。
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@item @ref{W0568} 符号付き定数式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0569} 符号付きの式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0570} 符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
@item @ref{W0607} 値が負になる整数式が符号無し型に変換されています。
@item @ref{W0608} 値が負になることがありうる整数式が符号無し型に変換されています。
@item @ref{W0705} 配列の添字が領域外を指すことがあります。
@item @ref{W0707} 配列の添字が領域外を指す定数です。
@item @ref{W0720} 浮動小数点型の値が変換先の型の範囲に入りきりません。
@item @ref{W0745} 配列の添字が、領域外を指しています。
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1003
@section C1003
@cindex C1003

@subsection メッセージ本文

ここで該当変数が初期値を指定せずに定義されています。

@subsection 内容

@ref{W0459,W0459}、@ref{W0460,W0460}、@ref{W0461,W0461}、@ref{W0462,W0462}
メッセージを検出した状況として、どの位置で該当変数を定義したかを示します。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j; /* C1003 */

    if (i < 0) { /* C1001 */
        if (i < -10) { /* C1002 */
            j = 2;
        }
        else if (i < -5) { /* C1002 */
            j = 3;
        }
    }
    else {
        j = 1;
    }

    return j; /* W0460 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0459} 変数 `%s' の値は、この式の評価時点では設定されていません。このプログラムは危険です。
@item @ref{W0460} 変数 `%s' の値は、この式の評価時点では設定されていないことがあります。
@item @ref{W0461} 値が定まっていない変数を指すポインタを関数の実引数として使っています。このプログラムは危険です。
@item @ref{W0462} 値が設定されていないことがありうる変数を指すポインタを関数の実引数として使っています。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1004
@section C1004
@cindex C1004

@subsection メッセージ本文

ここで該当変数に NULL の値を割り当てました。

@subsection 内容

@ref{W0421,W0421}、@ref{W0422,W0422}、@ref{W0423,W0423}、@ref{W0424,W0424}
メッセージを検出した状況として、どの位置で該当変数に NULL を割り当てたかを示し
ます。

@subsection サンプルコード

@verbatim
extern int *bar(void);
extern int *baz(void);

void foo(int i)
{
    int *p = NULL; /* C1004 */

    if (i < 0) { /* C1002 */
        p = bar();
        if (!p) {
            return;
        }
    }
    else {
        p = baz(); /* C1005 */
    }

    *p += 2; /* W0422 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0421} 値が NULL になるポインタに対して間接参照が行われています。
@item @ref{W0422} 値が NULL になることがあるポインタに対して間接参照が行われています。
@item @ref{W0423} 値が NULL になるポインタに対して算術演算を行っています。
@item @ref{W0424} 値が NULL になることがあるポインタに対して算術演算を行っています。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1005
@section C1005
@cindex C1005

@subsection メッセージ本文

ここで該当変数に NULL の可能性がある値を割り当てました。

@subsection 内容

@ref{W0421,W0421}、@ref{W0422,W0422}、@ref{W0423,W0423}、@ref{W0424,W0424}
メッセージを検出した状況として、どの位置で該当変数に NULL となり得る値を割り当
てたかを示します。

@subsection サンプルコード

@verbatim
extern int *bar(void);
extern int *baz(void);

void foo(int i)
{
    int *p = NULL; /* C1004 */

    if (i < 0) { /* C1002 */
        p = bar();
        if (!p) {
            return;
        }
    }
    else {
        p = baz(); /* C1005 */
    }

    *p += 2; /* W0422 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0421} 値が NULL になるポインタに対して間接参照が行われています。
@item @ref{W0422} 値が NULL になることがあるポインタに対して間接参照が行われています。
@item @ref{W0423} 値が NULL になるポインタに対して算術演算を行っています。
@item @ref{W0424} 値が NULL になることがあるポインタに対して算術演算を行っています。
@end itemize

@subsection 対応バージョン

3.2.0

@node C1006
@section C1006
@cindex C1006

@subsection メッセージ本文

ここで該当変数に値を割り当てました。

@subsection 内容

@ref{W0093,W0093}、@ref{W0096,W0096}、@ref{W0097,W0097}、@ref{W0115,W0115}、
@ref{W0116,W0116}、@ref{W0568,W0568}、@ref{W0569,W0569}、@ref{W0570,W0570}、
@ref{W0607,W0607}、@ref{W0608,W0608}、@ref{W0705,W0705}、@ref{W0707,W0707}、
@ref{W0720,W0720}、@ref{W0745,W0745}、@ref{W1049,W1049}、@ref{W1050,W1050}
メッセージを検出した状況として、どの位置で該当変数に問題の値を割り当てたかを示
します。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j = 0; /* C1006 */

    if (i < 0) { /* C1002 */
        j = -i;
    }
    else if (i > 0) { /* C1002 */
        j = i;
    }

    return 5 / j; /* W0093 */
}
@end verbatim

@subsection 関連メッセージ

@itemize
@item @ref{W0093} ゼロで除算される恐れがあります。
@item @ref{W0096} ゼロになる定数式で除算しています。
@item @ref{W0097} ゼロの値で除算しています。
@item @ref{W0115} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てます。
@item @ref{W0116} 符号無し左シフト演算 `<<' は、上位ビットを切り捨てる恐れがあります。
@item @ref{W0568} 符号付き定数式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0569} 符号付きの式の値を左シフト演算した結果は、未定義になります。
@item @ref{W0570} 符号付きの式の値を左シフト演算した結果は、未定義になることがあります。
@item @ref{W0607} 値が負になる整数式が符号無し型に変換されています。
@item @ref{W0608} 値が負になることがありうる整数式が符号無し型に変換されています。
@item @ref{W0705} 配列の添字が領域外を指すことがあります。
@item @ref{W0707} 配列の添字が領域外を指す定数です。
@item @ref{W0720} 浮動小数点型の値が変換先の型の範囲に入りきりません。
@item @ref{W0745} 配列の添字が、領域外を指しています。
@item @ref{W1049} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できないことがあります。
@item @ref{W1050} この整数式の符号付き整数型への変換結果は、符号付きの結果の型で表現できません。
@end itemize

@subsection 対応バージョン

3.2.0


@node Metrics
@chapter メトリクス一覧

@menu
* FL_STMT::ファイル内の文の数
* FL_FUNC::ファイル内の関数定義の数
* FN_STMT::関数内の文の数
* FN_UNRC::関数内の制御が到達しない文の数
* FN_LINE::関数内の保守コード行数
* FN_PARA::関数の仮引数の数
* FN_UNUV::関数内の未使用および再使用されない変数の数
* FN_CSUB::関数内の子関数コールの数
* FN_CALL::他の関数から被呼び出し箇所数
* FN_GOTO::関数内の @code{goto} 文の数
* FN_RETN::関数内の戻り点の数
* FN_UELS::関数内の完結していない @code{if} 文の数
* FN_NEST::関数内のネスティングの最深段数
* FN_PATH::関数内の推定静的パス数
* FN_CYCM::関数の経路複雑度
@end menu

@node FL_STMT
@section FL_STMT
@cindex FL_STMT

@subsection メトリック名

ファイル内の文の数

@subsection 内容

ファイル内に言語の構文規則としてステートメント(文)と認識されるものの数を示しま
す。

@subsection サンプルコード

@verbatim
int foo(int a)
{
    int i = 0;  /* A declaration is not a statement */

    if (a > 0) {  /* An if-else-statement makes FL_STMT += 1 */
        i = a + 1;  /* An expression-statement makes FL_STMT += 1 */
    }
    else {
        ;  /* An empty expression-statement makes FL_STMT += 1 */
    }

    return i;  /* A jump-statement makes FL_STMT += 1 */
}

/* Now, FL_STMT == 4 */

void bar(int a)
{
    struct {  /* A declaration is not a statement */
        int i;
    } s;

    /* A for-statement which has 2 expression-statements (`s.i=0;' and `s.i<a;') makes FL_STMT += 3 */
    for (s.i = 0; s.i < a; s.i++) {
        switch (s.i % 3) {  /* A switch-statement makes FL_STMT += 1 */
        case 0:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("A\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        case 1:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("B\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        case 2:             /* A label is part of a labeled-statement, but it makes FL_STMT += 1 */
            puts("C\n");    /* A labeled expression-statement makes FL_STMT += 1 */
            break;          /* A jump-statement makes FL_STMT += 1 */
        }
    }
}

/* Finally, FL_STMT == 17 */
@end verbatim

@example
MET,FL_STMT,test.c,17
@end example

@subsection 対応バージョン

1.0.0

@node FL_FUNC
@section FL_FUNC
@cindex FL_FUNC

@subsection メトリック名

ファイル内の関数定義の数

@subsection 内容

ファイル内に定義されている関数の数を示します。

@subsection サンプルコード

@verbatim
void foo(void) {}  /* A function-definition makes FL_FUNC += 1 */

static void bar(void) {}  /* A function-definition makes FL_FUNC += 1 */

extern void baz(void);  /* A declaration is not a function-definition */

int qux(a, b)  /* An old style function-definition makes FL_FUNC += 1 */
    int a, b;
{
    return a + b;
}

/* FL_FUNC == 3 */
@end verbatim

@example
MET,FL_FUNC,test.c,3
@end example

@subsection 対応バージョン

1.0.0

@node FN_STMT
@section FN_STMT
@cindex FN_STMT

@subsection メトリック名

関数内の文の数

@subsection 内容

関数内に言語の構文規則としてステートメント(文)と認識されるものの数を示します。

@subsection サンプルコード

@verbatim
int foo(int a)
{
    int i = 0;  /* A declaration is not a statement */

    if (a > 0) {  /* An if-else-statement makes foo's FN_STMT += 1 */
        i = a + 1;  /* An expression-statement makes foo's FN_STMT += 1 */
    }
    else {
        ;  /* An empty expression-statement makes foo's FN_STMT += 1 */
    }

    return i;  /* A jump-statement makes foo's FN_STMT += 1 */

    /* foo's FN_STMT == 4 */
}

void bar(int a)
{
    struct {  /* A declaration is not a statement */
        int i;
    } s;

    /* A for-statement which has 2 expression-statements (`s.i=0;' and * `s.i<a;') makes bar's FN_STMT += 3 */
    for (s.i = 0; s.i < a; s.i++) {
        switch (s.i % 3) {  /* A switch-statement makes bar's FN_STMT += 1 */
        case 0:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("A\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        case 1:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("B\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        case 2:             /* A label is part of a labeled-statement, but it makes bar's FN_STMT += 1 */
            puts("C\n");    /* A labeled expression-statement makes bar's FN_STMT += 1 */
            break;          /* A jump-statement makes bar's FN_STMT += 1 */
        }
    }

    /* bar's FN_STMT == 13 */
}
@end verbatim

@example
MET,FN_STMT,foo,int foo(int),test.c,1,5,4
MET,FN_STMT,bar,void bar(int),test.c,14,6,13
@end example

@subsection 対応バージョン

1.0.0

@node FN_UNRC
@section FN_UNRC
@cindex FN_UNRC

@subsection メトリック名

関数内の制御が到達しない文の数

@subsection 内容

いかなる条件でも実行されることのないステートメントの数を示します。

@subsection サンプルコード

@verbatim
#include <stdlib.h>

int foo(int i)
{
    unsigned int ui;

    if (i < 0) {
        switch (i) {
        case -3:
            ui = 0;
            break;
        /* Control never reaches to this "case 3:" clause because "i" is less than 0 at this point */
        case 3:      /* This label is part of an unreachable labeled-statement, but it makes foo's FN_UNRC += 1 */
            ui = 1;  /* An unreachable labeled expression-statement makes FN_UNRC += 1 */
            break;   /* An unreachable jump-statement makes FN_UNRC += 1 */
        default:
            ui = 0;
        }

        /* "ui" is equal to 0 at this point */

        /*
         * The usual-arithmetic-conversion makes "i < ui" into "(unsigned int) i < ui".
         * Then, the value of "i" which is less than 0 will be converted into the new value which is greater than 0
         * because of the wrap-around.
         * So, "(value which is greater than 0) < 0" makes false at all times.
         */
        if (i < ui) {
            exit(0);  /* An unreachable expression-statement makes FN_UNRC += 1 */
        }
    }
    else {
        /* "i" is greater than or equal to 0 at this point */

        abort();  /* The abort() standard function terminates this execution path */
    }

    /* "i" is less than 0 at this point */

    if (i == 3) {   /* "(value which is less than 0) == 3" makes false at all times */
        return -1;  /* An unreachable jump-statement makes FN_UNRC += 1 */
    }

    return 0;

    /* foo's FN_UNRC == 5 */
}
@end verbatim

@example
MET,FN_UNRC,foo,int foo(int),test.c,3,5,5
@end example

@subsection 対応バージョン

1.0.0

@node FN_LINE
@section FN_LINE
@cindex FN_LINE

@subsection メトリック名

関数内の保守コード行数

@subsection 内容

関数定義の開始行から関数定義の終了行までの物理行数を示します。

@subsection サンプルコード

@verbatim
int foo(void)  /* foo's function definition starts here */
{
    return 0;
}  /* foo's function definition ends here */

/* foo's FN_LINE == 3 */

int
bar  /* bar's function definition starts here */
(void)
{
    return 0;
}  /* bar's function definition ends here */

/* bar's FN_LINE == 5 */

int
baz  /* baz's old style function definition starts here */
(a)
int a;
{
    return 0;
}  /* baz's old style function definition ends here */

/* baz's FN_LINE == 6 */
@end verbatim

@example
MET,FN_LINE,foo,int foo(void),test.c,1,5,3
MET,FN_LINE,bar,int bar(void),test.c,8,1,5
MET,FN_LINE,baz,int baz(int),test.c,17,1,6
@end example

@subsection 対応バージョン

1.0.0

@node FN_PARA
@section FN_PARA
@cindex FN_PARA

@subsection メトリック名

関数の仮引数の数

@subsection 内容

関数定義の引数リスト内に宣言された仮引数の数を示します。

@subsection サンプルコード

@verbatim
int foo(int a, long b, char *p)
{
    return 0;
}
/* foo's FN_PARA == 3 */

int bar(a, b, p)  /* An old style function definition */
    long b;  /* A type-specifier of "a" is omitted */
    char *p;
{
    return 0;
}
/* bar's FN_PARA == 3 */
@end verbatim

@example
MET,FN_PARA,foo,"int foo(int,long,char *)",test.c,1,5,3
MET,FN_PARA,bar,"int bar(int,long,char *)",test.c,6,5,3
@end example

@subsection 対応バージョン

1.0.0

@node FN_UNUV
@section FN_UNUV
@cindex FN_UNUV

@subsection メトリック名

関数内の未使用および再使用されない変数の数

@subsection 内容

使用されないにも関わらず宣言されている変数、および、値を割り当てた後に使用され
ない変数の数を示します。

@subsection サンプルコード

@verbatim
void foo(int i, int j)  /* A useless declaration of "j" makes FN_UNUV += 1 */
{
    int a;
    int b;
    int c = 0;  /* A useless declaration of "c" makes FN_UNUV += 1 */

    if (i < 0) {
        a = -i;
    }
    else {
        a = i;
    }

    b = a * 2;  /* A useless assignment to "b" makes FN_UNUV += 1 */
    printf("%d\n", a);

    /* foo's FN_UNUV == 3 */
}
@end verbatim

@example
MET,FN_UNUV,foo,"void foo(int,int)",test.c,1,6,3
@end example

@subsection 対応バージョン

1.0.0

@node FN_CSUB
@section FN_CSUB
@cindex FN_CSUB

@subsection メトリック名

関数内の子関数コールの数

@subsection 内容

関数内にて他の関数を呼び出す箇所数を示します。

@subsection サンプルコード

@verbatim
extern int foo(int);

static int bar(int);

int baz(int i)
{
    int j = foo(i);  /* A function-call-expression makes baz's FN_CSUB += 1 */

    return foo(bar(j)); /* 2 function-call-expressions makes baz's FN_CSUB += 2 */

    /* baz's FN_CSUB == 3 */
}
@end verbatim

@example
MET,FN_CSUB,baz,int baz(int),test.c,5,5,3
@end example

@subsection 対応バージョン

1.0.0

@node FN_CALL
@section FN_CALL
@cindex FN_CALL

@subsection メトリック名

他の関数から被呼び出し箇所数

@subsection 内容

該当する関数がプロジェクト中の他の関数から呼び出される箇所数を示します。

@subsection サンプルコード

@file{test1.c}
@verbatim
int foo(int i) { return i + 1; }

int bar(int i)
{
    return foo(i) + 1;  /* A function-call-expression makes foo's FN_CALL += 1 */
}
@end verbatim

@file{test2.c}
@verbatim
extern int bar(int);

static void baz(void)
{
    int i = bar(0);  /* A function-call-expression makes bar's FN_CALL += 1 and foo's FN_CALL += 1 */
}
@end verbatim

@file{project-name.met.csv}
@example
MET,FN_CALL,foo,int foo(int),test1.c,1,5,2
MET,FN_CALL,bar,int bar(int),test1.c,3,5,1
MET,FN_CALL,baz,void baz(void),test2.c,3,13,0
@end example

@subsection 対応バージョン

1.0.0

@node FN_GOTO
@section FN_GOTO
@cindex FN_GOTO

@subsection メトリック名

関数内の @code{goto} 文の数

@subsection 内容

関数内に記された @code{goto} 文の数を示します。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    switch (i) {
    case 0:
        goto ZERO;  /* A goto-statement makes foo's FN_GOTO += 1 */
    case 1:
        goto ONE;   /* A goto-statement makes foo's FN_GOTO += 1 */
    default:
        return 0;
    }

ZERO:
    return 1;

ONE:
    return 2;

    /* foo's FN_GOTO == 2 */
}
@end verbatim

@example
MET,FN_GOTO,foo,int foo(int),test.c,1,5,2
@end example

@subsection 対応バージョン

1.0.0

@node FN_RETN
@section FN_RETN
@cindex FN_RETN

@subsection メトリック名

関数内の戻り点の数

@subsection 内容

実行される @code{return} 文の数、および、関数末尾にある暗黙の @code{return} 文
の数を示します。

@subsection サンプルコード

@verbatim
void foo(int i)
{
    if (i < 0) {
        return;  /* A return-statement makes foo's FN_RETN += 1 */
    }

    if (i >= 10) {
        return;  /* A return-statement makes foo's FN_RETN += 1 */
    }
    else {
        for (; i < 10; i++) {
          printf("%d\n", i);
        }
    }

    /* An implicit return from the function whose return type is void makes foo's FN_RETN * += 1 */

    /* foo's FN_RETN == 3 */
}

int bar(int i)
{
    if (i < 0) {
        return -1;  /* A return-statement makes bar's FN_RETN += 1 */
    }

    if (i >= 10) {
        return -1;  /* A return-statement makes bar's FN_RETN += 1 */
    }
    else {
        for (; i < 10; i++) {
          printf("%d\n", i);
        }
    }

    return 0;  /* A return-statement makes bar's FN_RETN += 1 */

    /* bar's FN_RETN == 3 */
}
@end verbatim

@example
MET,FN_RETN,foo,void foo(int),test.c,1,6,3
MET,FN_RETN,bar,int bar(int),test.c,20,5,3
@end example

@subsection 対応バージョン

1.0.0

@node FN_UELS
@section FN_UELS
@cindex FN_UELS

@subsection メトリック名

関数内の完結していない @code{if-else} 文の数

@subsection 内容

関数内の @code{if-else} 文で、明示的な @code{else} 節を持たないものの数を示しま
す。

@subsection サンプルコード

@verbatim
int foo(int i)
{
    int j;

    if (i < 0) {
        return -1;
    }
    else {
        j = i + 1;
    }

    if (j % 2) {
        return -1;
    }
    /* A standalone if-statement does nothing to the FN_UELS metric */

    if (i == 2) {
        return 0;
    }
    else if (i == 4) {
        return 1;
    }
    /* An implicit else clause makes foo's FN_UELS += 1 */

    return 5;

    /* foo's FN_UELS == 1 */
}
@end verbatim

@example
MET,FN_UELS,foo,int foo(int),test.c,1,5,1
@end example

@subsection 対応バージョン

1.0.0

@node FN_NEST
@section FN_NEST
@cindex FN_NEST

@subsection メトリック名

関数内のネスティングの最深段数

@subsection 内容

関数内で制御構造のネストが一番深い部分のネスト段数を示します。

@subsection サンプルコード

@verbatim
void foo(int i)
{
    /* Nesting level == 0 */

    if (i < 0) {
        /* Nesting level == 1 */

        switch (i) {
            /* Nesting level == 2 */
        case -1:
            return;
        case -2:
            puts("A\n");
            break;
        }

        /* Nesting level == 1 */
    }
    else {
        /* Nesting level == 1 */
        int j;
        int k;

        for (j = 0; j < i; j++) {
            /* Nesting level == 2 */

            for (k = 0; k < 10; k++) {
                /* Nesting level == 3 */

                if (j == k) {
                    /* Nesting level == 4 */
                    puts("B\n");
                }
            }
        }
    }

    /* foo's FN_NEST == 4 */
}
@end verbatim

@example
MET,FN_NEST,foo,void foo(int),test.c,1,6,4
@end example

@subsection 対応バージョン

1.0.0

@node FN_PATH
@section FN_PATH
@cindex FN_PATH

@subsection メトリック名

関数内の推定静的パス数

@subsection 内容

関数の制御フロー内で考えられるすべての実行経路の数を示します。

@subsection サンプルコード

@verbatim
static int foo(int i)
{
    /* A */
    if (i == 0) {
        /* B */
        i = 0;
    }
    else {
        /* C */
        i = 1;
    }
    /* D */
    return i;

    /* Possible execute paths A->B->D and A->C->D makes foo's FN_PATH = 2 */
}

static int bar(int i)
{
    /* A */
    if (i == 0) {
        /* B */
        i = 0;
    }
    /* C */
    if (i == 1) {
        /* D */
        i = 1;
    }
    /* E */
    if (i == 2) {
        /* F */
        i = 2;
    }
    /* G */
    return i;

    /* Possible execute paths
         A->B->C->D->E->F->G,
         A->B->C->D->E->G,
         A->B->C->E->F->G,
         A->B->C->E->G,
         A->C->D->E->F->G,
         A->C->D->E->G,
         A->C->E->F->G,
         A->C->E->G
       makes bar's FN_PATH = 8 */
}

static int baz(int i)
{
    /* A */
    switch (i) {
    case 0:
        /* B */
        if (rand()) {
            /* C */
            i = 0;
        }
        else {
            /* D */
            i = 0;
        }
        /* E */
        i = 0;
        break;
    default:
        /* F */
        if (rand()) {
            /* G */
            i = 1;
        }
        else {
            /* H */
            i = 1;
        }
        /* I */
        i = 1;
        break;
    }
    /* J */
    return i;

    /* Possible execute paths
         A->B->C->E->J,
         A->B->D->E->J,
         A->F->G->I->J,
         A->F->H->I->J
       makes baz's FN_PATH = 4 */
}

static int qux(int i)
{
    /* A */
    while (i < 5) {
        /* B */
        if (i == 0) {
            /* C */
            return 0;
        }
        /* D */
        if (i == 1) {
            /* E */
            return 1;
        }
    }
    /* F */
    if (i == 2) {
        /* G */
        return 2;
    }
    /* H */
    return 3;

    /* Possible execute paths
         A->B->C,
         A->B->D->E,
         A->B->D->F->G,
         A->B->D->F->H,
         A->F->G,
         A->F->H
       makes qux's FN_PATH = 6 */
}
@end verbatim

@example
MET,FN_PATH,foo,int foo(int),test.c,1,12,2
MET,FN_PATH,bar,int bar(int),test.c,18,12,8
MET,FN_PATH,baz,int baz(int),test.c,42,12,4
MET,FN_PATH,qux,int qux(int),test.c,80,12,6
@end example

@subsection 対応バージョン

1.0.0

@node FN_CYCM
@section FN_CYCM
@cindex FN_CYCM

@subsection メトリック名

関数の経路複雑度

@subsection 内容

McCabe(マッケーブ)の提唱したメトリックで、プログラムを構成する線上にある独立し
たパスの数を示します。

計算式「@verb{.制御フローグラフのエッジ数 - ノード数 + 2.}」で算出し、関数中の分
岐の数に 1 を足したものに等しくなります。

@subsection サンプルコード

@verbatim
static int foo(int i)
{
    if (i == 0) {  /* Complexity += 1 */
        i = 0;
    }
    else {  /* An else branch does not grow the complexity */
        i = 1;
    }
    return i;

    /* foo's FN_CYCM == 2 */
}

static int bar(int i)
{
    if (i == 0) {  /* Complexity += 1 */
        i = 0;
    }
    if (i == 1) {  /* Complexity += 1 */
        i = 1;
    }
    if (i == 2) {  /* Complexity += 1 */
        i = 2;
    }
    return i;

    /* bar's FN_CYCM == 4 */
}

static int baz(int i)
{
    switch (i) {
    case 0:  /* Complexity += 1 */
        if (rand()) {  /* Complexity += 1 */
            i = 0;
        }
        else {  /* An else branch does not grow the complexity */
            i = 0;
        }
        i = 0;
        break;
    default:  /* A default clause does not grow the complexity */
        if (rand()) {  /* Complexity += 1 */
            i = 1;
        }
        else {  /* An else branch does not grow the complexity */
            i = 1;
        }
        i = 1;
        break;
    }
    return i;

    /* baz's FN_CYCM == 4 */
}

static int qux(int i)
{
    while (i < 5) {  /* An iteration does not grow the complexity */
        if (i == 0) {  /* Complexity += 1 */
            return 0;
        }
        if (i == 1) {  /* Complexity += 1 */
            return 1;
        }
    }
    if (i == 2) {  /* Complexity += 1 */
        return 2;
    }
    return 3;

    /* qux's FN_CYCM == 4 */
}
@end verbatim

@example
MET,FN_CYCM,foo,int foo(int),test.c,1,12,2
MET,FN_CYCM,bar,int bar(int),test.c,13,12,4
MET,FN_CYCM,baz,int baz(int),test.c,28,12,4
MET,FN_CYCM,qux,int qux(int),test.c,54,12,4
@end example

@subsection 対応バージョン

1.0.0

@node CodeStructures
@chapter コード情報一覧
@menu
* VER::バージョンレコード
* DCL(T)::型宣言レコード
* DCL(V)::外部変数宣言レコード
* DCL(F)::関数宣言レコード
* DEF(V)::変数定義レコード
* DEF(F)::関数定義レコード
* DEF(M)::マクロ定義レコード
* DEF(L)::ラベル定義レコード
* INI::初期化レコード
* ASN::代入式レコード
* DEP(I)::インクルードレコード
* DEP(C)::呼び出しレコード
* DEP(X)::外部参照レコード
* LIT::リテラルレコード
* PRE::プリプロセスレコード
@end menu

@node VER
@section VER
@cindex VER

@subsection コード情報名

バージョンレコード

@subsection 内容

解析に使用した AdLint のバージョンや、実行日時を記録します。

@subsection サンプルコード

@ref{Output_Metrics_Ver_Sample, バージョンレコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DCL(T)
@section DCL(T)
@cindex DCL(T)

@subsection コード情報名

型宣言レコード

@subsection 内容

@code{typedef}、@code{struct}、@code{union}、@code{enum} による型宣言について、
宣言位置、型の種別、型名などを出力します。

@subsection サンプルコード

@ref{Output_Metrics_Dcl_Sample, 宣言レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DCL(V)
@section DCL(V)
@cindex DCL(V)

@subsection コード情報名

外部変数宣言レコード

@subsection 内容

外部リンケージを持つグローバル変数の宣言について、宣言位置、変数名、変数型を出
力します。

@subsection サンプルコード

@ref{Output_Metrics_Dcl_Sample, 宣言レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DCL(F)
@section DCL(F)
@cindex DCL(F)

@subsection コード情報名

関数宣言レコード

@subsection 内容

外部リンケージを持つ関数宣言について、宣言位置、関数名、関数シグニチャ情報を出
力します。

@subsection サンプルコード

@ref{Output_Metrics_Dcl_Sample, 宣言レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEF(V)
@section DEF(V)
@cindex DEF(V)

@subsection コード情報名

変数定義レコード

@subsection 内容

関数の仮引数を含む全ての変数定義について、定義位置、変数名、変数型などを出力し
ます。

@subsection サンプルコード

@ref{Output_Metrics_Def_Sample, 定義レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEF(F)
@section DEF(F)
@cindex DEF(F)

@subsection コード情報名

関数定義レコード

@subsection 内容

全ての関数定義について、定義位置、関数名、関数シグニチャなどを出力します。

@subsection サンプルコード

@ref{Output_Metrics_Def_Sample, 定義レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEF(M)
@section DEF(M)
@cindex DEF(M)

@subsection コード情報名

マクロ定義レコード

@subsection 内容

すべてのマクロ定義について、定義位置、マクロ名、マクロの種別を出力します。

@subsection サンプルコード

@ref{Output_Metrics_Def_Sample, 定義レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEF(L)
@section DEF(L)
@cindex DEF(L)

@subsection コード情報名

ラベル定義レコード

@subsection 内容

関数内の全てのラベルについて、定義位置、ラベル名を出力します。

@subsection サンプルコード

@ref{Output_Metrics_Def_Sample, 定義レコードの出力例}を参照。

@cindex INI

@subsection 対応バージョン

1.0.0

@node INI
@section INI

@subsection コード情報名

初期化レコード

@subsection 内容

変数定義時の初期化について、初期化位置、初期化する変数名、初期値を出力します。

@subsection サンプルコード

@ref{Output_Metrics_Ini_Sample, 初期化レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node ASN
@section ASN
@cindex ASN

@subsection コード情報名

代入式レコード

@subsection 内容

変数への代入式について、代入式の位置、代入する変数名、代入値を出力します。

@subsection サンプルコード

@ref{Output_Metrics_Asn_Sample, 代入式レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEP(I)
@section DEP(I)
@cindex DEP(I)

@subsection コード情報名

インクルードレコード

@subsection 内容

@code{#include} ディレクティブで他のファイルをインクルードした場合に、
@code{#include} ディレクティブの位置、インクルードするファイルのパス名を出力し
ます。

@subsection サンプルコード

@ref{Output_Metrics_Dep_Sample, 依存レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEP(C)
@section DEP(C)
@cindex DEP(C)

@subsection コード情報名

呼び出しレコード

@subsection 内容

関数から他の関数を呼び出した場合、呼び出し位置、呼び出し元の関数名、呼び出し先
の関数名などを出力します。

@subsection サンプルコード

@ref{Output_Metrics_Dep_Sample, 依存レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node DEP(X)
@section DEP(X)
@cindex DEP(X)

@subsection コード情報名

外部参照レコード

@subsection 内容

関数からグローバル変数をアクセス、関数から他の関数のアドレスを参照した場合に、
アクセス位置、アクセス元の関数名、アクセス先のオブジェクト名などを出力します。

@subsection サンプルコード

@ref{Output_Metrics_Dep_Sample, 依存レコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node LIT
@section LIT
@cindex LIT

@subsection コード情報名

リテラルレコード

@subsection 内容

定数、文字列リテラルを使用した場合、使用した位置、定数や文字列リテラルの内容な
どを出力します。

@subsection サンプルコード

@ref{Output_Metrics_Lit_Sample, リテラルレコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node PRE
@section PRE
@cindex PRE

@subsection コード情報名

プリプロセスレコード

@subsection 内容

プリプロセッサディレクティブについて、使用位置、ディレクティブ名、ディレクティ
ブに指定した引数を出力します。

@subsection サンプルコード

@ref{Output_Metrics_Pre_Sample, プリプロセスレコードの出力例}を参照。

@subsection 対応バージョン

1.0.0

@node Appendix
@appendix 付録

@anchor{Screen Shot}
@section スクリーンショット

@subsection Adqua との連携
AdLint の静的解析結果を Adqua で処理することにより、ソースコード品質を定量的に
評価することができます。

Adqua は@uref{http://www.ogis-ri.co.jp/, 株式会社オージス総研}から入手可能です
。詳しくは @uref{http://www.ogis-ri.co.jp/product/b-08-000001A6.html, Adqua 製
  品情報}をご覧ください。

@image{adlint_on_adqua,,,,png}

@subsection テキストエディタ Vim との連携
AdLint は、標準的なコンパイラと同様の形式で警告メッセージを出力するので、テキス
トエディタと容易に連携して開発中にコードチェックすることができます。

@image{adlint_on_vim_ja,,,,png}

@subsection 統合開発環境 Eclipse との連携
AdLint は、標準的なコンパイラと同様の形式で警告メッセージを出力するので、統合開
発環境と容易に連携して開発中にコードチェックすることができます。

@image{adlint_on_eclipse_ja,,,,png}

@anchor{Traits Sample}
@section 特性ファイルのサンプル
@verbatiminclude samples/adlint_traits.yml

@anchor{GNUmakefile Sample}
@section 解析手順 @file{GNUmakefile} のサンプル
@verbatiminclude samples/GNUmakefile

@node Index
@unnumbered 索引
@printindex cp

@bye

@c vim:sw=2:sts=2:et:tw=79:fo+=mM:
